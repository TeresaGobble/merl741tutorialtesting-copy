[22-Feb-2023 17:21:15 UTC] PHP Warning:  Undefined array key "default" in /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql-content-blocks-main/includes/Blocks/Block.php on line 214
[22-Feb-2023 17:21:15 UTC] PHP Stack trace:
[22-Feb-2023 17:21:15 UTC] PHP   1. {main}() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/index.php:0
[22-Feb-2023 17:21:15 UTC] PHP   2. require() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/index.php:17
[22-Feb-2023 17:21:15 UTC] PHP   3. wp($query_vars = *uninitialized*) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-blog-header.php:16
[22-Feb-2023 17:21:15 UTC] PHP   4. WP->main($query_args = '') /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/functions.php:1332
[22-Feb-2023 17:21:15 UTC] PHP   5. WP->parse_request($extra_query_vars = '') /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/class-wp.php:780
[22-Feb-2023 17:21:15 UTC] PHP   6. do_action_ref_array($hook_name = 'parse_request', $args = [0 => class WP { public $public_query_vars = [...]; public $private_query_vars = [...]; public $extra_query_vars = [...]; public $query_vars = [...]; public $query_string = ''; public $request = ''; public $matched_rule = ''; public $matched_query = ''; public $did_permalink = FALSE }]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/class-wp.php:399
[22-Feb-2023 17:21:15 UTC] PHP   7. WP_Hook->do_action($args = [0 => class WP { public $public_query_vars = [...]; public $private_query_vars = [...]; public $extra_query_vars = [...]; public $query_vars = [...]; public $query_string = ''; public $request = ''; public $matched_rule = ''; public $matched_query = ''; public $did_permalink = FALSE }]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/plugin.php:565
[22-Feb-2023 17:21:15 UTC] PHP   8. WP_Hook->apply_filters($value = '', $args = [0 => class WP { public $public_query_vars = [...]; public $private_query_vars = [...]; public $extra_query_vars = [...]; public $query_vars = [...]; public $query_string = ''; public $request = ''; public $matched_rule = ''; public $matched_query = ''; public $did_permalink = FALSE }]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/class-wp-hook.php:332
[22-Feb-2023 17:21:15 UTC] PHP   9. WPGraphQL\Router::resolve_http_request(class WP { public $public_query_vars = [0 => 'm', 1 => 'p', 2 => 'posts', 3 => 'w', 4 => 'cat', 5 => 'withcomments', 6 => 'withoutcomments', 7 => 's', 8 => 'search', 9 => 'exact', 10 => 'sentence', 11 => 'calendar', 12 => 'page', 13 => 'paged', 14 => 'more', 15 => 'tb', 16 => 'pb', 17 => 'author', 18 => 'order', 19 => 'orderby', 20 => 'year', 21 => 'monthnum', 22 => 'day', 23 => 'hour', 24 => 'minute', 25 => 'second', 26 => 'name', 27 => 'category_name', 28 => 'tag', 29 => 'feed', 30 => 'author_name', 31 => 'pagename', 32 => 'page_id', 33 => 'error', 34 => 'attachment', 35 => 'attachment_id', 36 => 'subpost', 37 => 'subpost_id', 38 => 'preview', 39 => 'robots', 40 => 'favicon', 41 => 'taxonomy', 42 => 'term', 43 => 'cpage', 44 => 'post_type', 45 => 'embed', 46 => 'post_format', 47 => 'rest_route', 48 => 'sitemap', 49 => 'sitemap-subtype', 50 => 'sitemap-stylesheet', 51 => 'graphql']; public $private_query_vars = [0 => 'offset', 1 => 'posts_per_page', 2 => 'posts_per_archive_page', 3 => 'showposts', 4 => 'nopaging', 5 => 'post_type', 6 => 'post_status', 7 => 'category__in', 8 => 'category__not_in', 9 => 'category__and', 10 => 'tag__in', 11 => 'tag__not_in', 12 => 'tag__and', 13 => 'tag_slug__in', 14 => 'tag_slug__and', 15 => 'tag_id', 16 => 'post_mime_type', 17 => 'perm', 18 => 'comments_per_page', 19 => 'post__in', 20 => 'post__not_in', 21 => 'post_parent', 22 => 'post_parent__in', 23 => 'post_parent__not_in', 24 => 'title', 25 => 'fields']; public $extra_query_vars = []; public $query_vars = ['graphql' => '']; public $query_string = ''; public $request = ''; public $matched_rule = ''; public $matched_query = ''; public $did_permalink = FALSE }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/class-wp-hook.php:308
[22-Feb-2023 17:21:15 UTC] PHP  10. WPGraphQL\Router::process_http_request() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/src/Router.php:275
[22-Feb-2023 17:21:15 UTC] PHP  11. WPGraphQL\Request->execute_http() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/src/Router.php:481
[22-Feb-2023 17:21:15 UTC] PHP  12. GraphQL\Server\StandardServer->executeRequest($parsedBody = class GraphQL\Server\OperationParams { public $queryId = NULL; public $query = 'query NewQuery {\n  posts {\n    nodes {\n      contentBlocks {\n        name\n        renderedHtml\n        ... on CoreCode {\n          apiVersion\n          blockEditorCategoryName\n          attributes {\n            borderColor\n            backgroundColor\n            content\n            style\n            textColor\n            fontSize\n          }\n        }\n      }\n    }\n  }\n}'; public $operation = 'NewQuery'; public $variables = NULL; public $extensions = NULL; private $originalInput = ['query' => 'query NewQuery {\n  posts {\n    nodes {\n      contentBlocks {\n        name\n        renderedHtml\n        ... on CoreCode {\n          apiVersion\n          blockEditorCategoryName\n          attributes {\n            borderColor\n            backgroundColor\n            content\n            style\n            textColor\n            fontSize\n          }\n        }\n      }\n    }\n  }\n}', 'variables' => NULL, 'operationname' => 'NewQuery']; private $readOnly = FALSE }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/src/Request.php:713
[22-Feb-2023 17:21:15 UTC] PHP  13. GraphQL\Server\Helper->executeOperation($config = class GraphQL\Server\ServerConfig { private $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; private $context = class WPGraphQL\AppContext { public $root_url = 'http://localhost:10028'; public $viewer = class WP_User { ... }; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... }; public $request = [...]; public $config = [...]; public $currentConnection = NULL; public $connectionArgs = [...]; public $loaders = [...]; public $node_resolver = class WPGraphQL\Data\NodeResolver { ... }; public $connection_query_class = 'WP_Query' }; private $rootValue = NULL; private $errorFormatter = NULL; private $errorsHandler = NULL; private $debugFlag = 0; private $queryBatching = TRUE; private $validationRules = [0 => class GraphQL\Validator\Rules\ExecutableDefinitions { ... }, 1 => class GraphQL\Validator\Rules\UniqueOperationNames { ... }, 2 => class GraphQL\Validator\Rules\LoneAnonymousOperation { ... }, 3 => class GraphQL\Validator\Rules\SingleFieldSubscription { ... }, 4 => class GraphQL\Validator\Rules\KnownTypeNames { ... }, 5 => class GraphQL\Validator\Rules\FragmentsOnCompositeTypes { ... }, 6 => class GraphQL\Validator\Rules\VariablesAreInputTypes { ... }, 7 => class GraphQL\Validator\Rules\ScalarLeafs { ... }, 8 => class GraphQL\Validator\Rules\FieldsOnCorrectType { ... }, 9 => class GraphQL\Validator\Rules\UniqueFragmentNames { ... }, 10 => class GraphQL\Validator\Rules\KnownFragmentNames { ... }, 11 => class GraphQL\Validator\Rules\NoUnusedFragments { ... }, 12 => class GraphQL\Validator\Rules\PossibleFragmentSpreads { ... }, 13 => class GraphQL\Validator\Rules\NoFragmentCycles { ... }, 14 => class GraphQL\Validator\Rules\UniqueVariableNames { ... }, 15 => class GraphQL\Validator\Rules\NoUndefinedVariables { ... }, 16 => class GraphQL\Validator\Rules\NoUnusedVariables { ... }, 17 => class GraphQL\Validator\Rules\KnownDirectives { ... }, 18 => class GraphQL\Validator\Rules\UniqueDirectivesPerLocation { ... }, 19 => class GraphQL\Validator\Rules\KnownArgumentNames { ... }, 20 => class GraphQL\Validator\Rules\UniqueArgumentNames { ... }, 21 => class GraphQL\Validator\Rules\ValuesOfCorrectType { ... }, 22 => class GraphQL\Validator\Rules\ProvidedRequiredArguments { ... }, 23 => class GraphQL\Validator\Rules\VariablesInAllowedPosition { ... }, 24 => class GraphQL\Validator\Rules\OverlappingFieldsCanBeMerged { ... }, 25 => class GraphQL\Validator\Rules\UniqueInputFieldNames { ... }, 'require_authentication' => class WPGraphQL\Server\ValidationRules\RequireAuthentication { ... }, 'disable_introspection' => class WPGraphQL\Server\ValidationRules\DisableIntrospection { ... }, 'query_depth' => class WPGraphQL\Server\ValidationRules\QueryDepth { ... }]; private $fieldResolver = NULL; private $promiseAdapter = NULL; private $persistentQueryLoader = NULL }, $op = class GraphQL\Server\OperationParams { public $queryId = NULL; public $query = 'query NewQuery {\n  posts {\n    nodes {\n      contentBlocks {\n        name\n        renderedHtml\n        ... on CoreCode {\n          apiVersion\n          blockEditorCategoryName\n          attributes {\n            borderColor\n            backgroundColor\n            content\n            style\n            textColor\n            fontSize\n          }\n        }\n      }\n    }\n  }\n}'; public $operation = 'NewQuery'; public $variables = NULL; public $extensions = NULL; private $originalInput = ['query' => 'query NewQuery {\n  posts {\n    nodes {\n      contentBlocks {\n        name\n        renderedHtml\n        ... on CoreCode {\n          apiVersion\n          blockEditorCategoryName\n          attributes {\n            borderColor\n            backgroundColor\n            content\n            style\n            textColor\n            fontSize\n          }\n        }\n      }\n    }\n  }\n}', 'variables' => NULL, 'operationname' => 'NewQuery']; private $readOnly = FALSE }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Server/StandardServer.php:136
[22-Feb-2023 17:21:15 UTC] PHP  14. GraphQL\Executor\Promise\Adapter\SyncPromiseAdapter->wait($promise = class GraphQL\Executor\Promise\Promise { public $adoptedPromise = class GraphQL\Executor\Promise\Adapter\SyncPromise { public $state = 'pending'; public $result = NULL; private $waiting = [...] }; private $adapter = class GraphQL\Executor\Promise\Adapter\SyncPromiseAdapter {  } }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Server/Helper.php:214
[22-Feb-2023 17:21:15 UTC] PHP  15. GraphQL\Executor\Promise\Adapter\SyncPromise::runQueue() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/Promise/Adapter/SyncPromiseAdapter.php:149
[22-Feb-2023 17:21:15 UTC] PHP  16. GraphQL\Executor\Promise\Adapter\SyncPromise->GraphQL\Executor\Promise\Adapter\{closure:/Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/Promise/Adapter/SyncPromise.php:142-163}() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/Promise/Adapter/SyncPromise.php:53
[22-Feb-2023 17:21:15 UTC] PHP  17. GraphQL\Executor\ReferenceExecutor->GraphQL\Executor\{closure:/Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:650-652}($resolved = ['nodes' => [5 => class WPGraphQL\Model\Post { ... }, 1 => class WPGraphQL\Model\Post { ... }], 'edges' => [0 => [...], 1 => [...]], 'pageInfo' => ['startCursor' => 'YXJyYXljb25uZWN0aW9uOjU=', 'endCursor' => 'YXJyYXljb25uZWN0aW9uOjE=', 'hasNextPage' => FALSE, 'hasPreviousPage' => FALSE]]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/Promise/Adapter/SyncPromise.php:148
[22-Feb-2023 17:21:15 UTC] PHP  18. GraphQL\Executor\ReferenceExecutor->completeValue($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'RootQueryToPostConnection'; public $description = 'Connection between the RootQuery type and the post type'; public $astNode = NULL; public $config = ['description' => 'Connection between the RootQuery type and the post type', 'interfaces' => [...], 'connection_config' => [...], 'fields' => [...], 'kind' => 'object', 'name' => 'RootQueryToPostConnection']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['edges' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodes' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pageInfo' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'posts'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'Connection between the RootQuery type and the post type'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class WPGraphQL\Type\WPObjectType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'posts'; public $returnType = class WPGraphQL\Type\WPObjectType { public $name = 'RootQueryToPostConnection'; public $description = 'Connection between the RootQuery type and the post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'RootQuery'; public $description = 'The root entry point into the Graph'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'posts']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = []; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = []; private $queryPlan = NULL }, $path = [0 => 'posts'], $result = ['nodes' => [5 => class WPGraphQL\Model\Post { ... }, 1 => class WPGraphQL\Model\Post { ... }], 'edges' => [0 => [...], 1 => [...]], 'pageInfo' => ['startCursor' => 'YXJyYXljb25uZWN0aW9uOjU=', 'endCursor' => 'YXJyYXljb25uZWN0aW9uOjE=', 'hasNextPage' => FALSE, 'hasPreviousPage' => FALSE]]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:651
[22-Feb-2023 17:21:15 UTC] PHP  19. GraphQL\Executor\ReferenceExecutor->completeObjectValue($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'RootQueryToPostConnection'; public $description = 'Connection between the RootQuery type and the post type'; public $astNode = NULL; public $config = ['description' => 'Connection between the RootQuery type and the post type', 'interfaces' => [...], 'connection_config' => [...], 'fields' => [...], 'kind' => 'object', 'name' => 'RootQueryToPostConnection']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['edges' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodes' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pageInfo' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'posts'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'Connection between the RootQuery type and the post type'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class WPGraphQL\Type\WPObjectType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'posts'; public $returnType = class WPGraphQL\Type\WPObjectType { public $name = 'RootQueryToPostConnection'; public $description = 'Connection between the RootQuery type and the post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'RootQuery'; public $description = 'The root entry point into the Graph'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'posts']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = []; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = []; private $queryPlan = NULL }, $path = [0 => 'posts'], $result = ['nodes' => [5 => class WPGraphQL\Model\Post { ... }, 1 => class WPGraphQL\Model\Post { ... }], 'edges' => [0 => [...], 1 => [...]], 'pageInfo' => ['startCursor' => 'YXJyYXljb25uZWN0aW9uOjU=', 'endCursor' => 'YXJyYXljb25uZWN0aW9uOjE=', 'hasNextPage' => FALSE, 'hasPreviousPage' => FALSE]]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:793
[22-Feb-2023 17:21:15 UTC] PHP  20. GraphQL\Executor\ReferenceExecutor->collectAndExecuteSubfields($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'RootQueryToPostConnection'; public $description = 'Connection between the RootQuery type and the post type'; public $astNode = NULL; public $config = ['description' => 'Connection between the RootQuery type and the post type', 'interfaces' => [...], 'connection_config' => [...], 'fields' => [...], 'kind' => 'object', 'name' => 'RootQueryToPostConnection']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['edges' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodes' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pageInfo' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'posts'], $result = ['nodes' => [5 => class WPGraphQL\Model\Post { ... }, 1 => class WPGraphQL\Model\Post { ... }], 'edges' => [0 => [...], 1 => [...]], 'pageInfo' => ['startCursor' => 'YXJyYXljb25uZWN0aW9uOjU=', 'endCursor' => 'YXJyYXljb25uZWN0aW9uOjE=', 'hasNextPage' => FALSE, 'hasPreviousPage' => FALSE]]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1106
[22-Feb-2023 17:21:15 UTC] PHP  21. GraphQL\Executor\ReferenceExecutor->executeFields($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'RootQueryToPostConnection'; public $description = 'Connection between the RootQuery type and the post type'; public $astNode = NULL; public $config = ['description' => 'Connection between the RootQuery type and the post type', 'interfaces' => [...], 'connection_config' => [...], 'fields' => [...], 'kind' => 'object', 'name' => 'RootQueryToPostConnection']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['edges' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodes' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pageInfo' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = ['nodes' => [5 => class WPGraphQL\Model\Post { ... }, 1 => class WPGraphQL\Model\Post { ... }], 'edges' => [0 => [...], 1 => [...]], 'pageInfo' => ['startCursor' => 'YXJyYXljb25uZWN0aW9uOjU=', 'endCursor' => 'YXJyYXljb25uZWN0aW9uOjE=', 'hasNextPage' => FALSE, 'hasPreviousPage' => FALSE]], $path = [0 => 'posts'], $fields = class ArrayObject { private $storage = ['nodes' => class ArrayObject { ... }] }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1145
[22-Feb-2023 17:21:15 UTC] PHP  22. GraphQL\Executor\ReferenceExecutor->resolveField($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'RootQueryToPostConnection'; public $description = 'Connection between the RootQuery type and the post type'; public $astNode = NULL; public $config = ['description' => 'Connection between the RootQuery type and the post type', 'interfaces' => [...], 'connection_config' => [...], 'fields' => [...], 'kind' => 'object', 'name' => 'RootQueryToPostConnection']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['edges' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodes' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pageInfo' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = ['nodes' => [5 => class WPGraphQL\Model\Post { ... }, 1 => class WPGraphQL\Model\Post { ... }], 'edges' => [0 => [...], 1 => [...]], 'pageInfo' => ['startCursor' => 'YXJyYXljb25uZWN0aW9uOjU=', 'endCursor' => 'YXJyYXljb25uZWN0aW9uOjE=', 'hasNextPage' => FALSE, 'hasPreviousPage' => FALSE]], $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'posts', 1 => 'nodes']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1195
[22-Feb-2023 17:21:15 UTC] PHP  23. GraphQL\Executor\ReferenceExecutor->completeValueCatchingError($returnType = class GraphQL\Type\Definition\NonNull { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; private $ofType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class GraphQL\Type\Definition\NonNull { ... } } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'nodes'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'The nodes of the connection, without the edges'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\NonNull { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'nodes'; public $returnType = class GraphQL\Type\Definition\NonNull { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; private $ofType = class GraphQL\Type\Definition\ListOfType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'RootQueryToPostConnection'; public $description = 'Connection between the RootQuery type and the post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'posts', 1 => 'nodes', 2 => 0]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = []; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = []; private $queryPlan = NULL }, $path = [0 => 'posts', 1 => 'nodes'], $result = [5 => class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { ... }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [...]; protected $owner = 1; protected $current_user = class WP_User { ... }; protected $visibility = 'public'; public $fields = [...]; protected $global_post = class WP_Post { ... }; protected $post_type_object = class WP_Post_Type { ... }; protected $wp_query = NULL }, 1 => class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { ... }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [...]; protected $owner = 1; protected $current_user = class WP_User { ... }; protected $visibility = 'public'; public $fields = [...]; protected $global_post = class WP_Post { ... }; protected $post_type_object = class WP_Post_Type { ... }; protected $wp_query = NULL }]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:557
[22-Feb-2023 17:21:15 UTC] PHP  24. GraphQL\Executor\ReferenceExecutor->completeValue($returnType = class GraphQL\Type\Definition\NonNull { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; private $ofType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class GraphQL\Type\Definition\NonNull { ... } } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'nodes'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'The nodes of the connection, without the edges'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\NonNull { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'nodes'; public $returnType = class GraphQL\Type\Definition\NonNull { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; private $ofType = class GraphQL\Type\Definition\ListOfType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'RootQueryToPostConnection'; public $description = 'Connection between the RootQuery type and the post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'posts', 1 => 'nodes', 2 => 0]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = []; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = []; private $queryPlan = NULL }, $path = [0 => 'posts', 1 => 'nodes'], $result = [5 => class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { ... }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [...]; protected $owner = 1; protected $current_user = class WP_User { ... }; protected $visibility = 'public'; public $fields = [...]; protected $global_post = class WP_Post { ... }; protected $post_type_object = class WP_Post_Type { ... }; protected $wp_query = NULL }, 1 => class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { ... }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [...]; protected $owner = 1; protected $current_user = class WP_User { ... }; protected $visibility = 'public'; public $fields = [...]; protected $global_post = class WP_Post { ... }; protected $post_type_object = class WP_Post_Type { ... }; protected $wp_query = NULL }]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:654
[22-Feb-2023 17:21:15 UTC] PHP  25. GraphQL\Executor\ReferenceExecutor->completeValue($returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class GraphQL\Type\Definition\NonNull { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; private $ofType = class WPGraphQL\Type\WPObjectType { ... } } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'nodes'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'The nodes of the connection, without the edges'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\NonNull { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'nodes'; public $returnType = class GraphQL\Type\Definition\NonNull { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; private $ofType = class GraphQL\Type\Definition\ListOfType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'RootQueryToPostConnection'; public $description = 'Connection between the RootQuery type and the post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'posts', 1 => 'nodes', 2 => 0]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = []; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = []; private $queryPlan = NULL }, $path = [0 => 'posts', 1 => 'nodes'], $result = [5 => class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { ... }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [...]; protected $owner = 1; protected $current_user = class WP_User { ... }; protected $visibility = 'public'; public $fields = [...]; protected $global_post = class WP_Post { ... }; protected $post_type_object = class WP_Post_Type { ... }; protected $wp_query = NULL }, 1 => class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { ... }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [...]; protected $owner = 1; protected $current_user = class WP_User { ... }; protected $visibility = 'public'; public $fields = [...]; protected $global_post = class WP_Post { ... }; protected $post_type_object = class WP_Post_Type { ... }; protected $wp_query = NULL }]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:741
[22-Feb-2023 17:21:15 UTC] PHP  26. GraphQL\Executor\ReferenceExecutor->completeListValue($returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class GraphQL\Type\Definition\NonNull { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; private $ofType = class WPGraphQL\Type\WPObjectType { ... } } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'nodes'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'The nodes of the connection, without the edges'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\NonNull { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'nodes'; public $returnType = class GraphQL\Type\Definition\NonNull { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; private $ofType = class GraphQL\Type\Definition\ListOfType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'RootQueryToPostConnection'; public $description = 'Connection between the RootQuery type and the post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'posts', 1 => 'nodes', 2 => 0]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = []; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = []; private $queryPlan = NULL }, $path = [0 => 'posts', 1 => 'nodes'], $results = [5 => class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { ... }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [...]; protected $owner = 1; protected $current_user = class WP_User { ... }; protected $visibility = 'public'; public $fields = [...]; protected $global_post = class WP_Post { ... }; protected $post_type_object = class WP_Post_Type { ... }; protected $wp_query = NULL }, 1 => class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { ... }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [...]; protected $owner = 1; protected $current_user = class WP_User { ... }; protected $visibility = 'public'; public $fields = [...]; protected $global_post = class WP_Post { ... }; protected $post_type_object = class WP_Post_Type { ... }; protected $wp_query = NULL }]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:761
[22-Feb-2023 17:21:15 UTC] PHP  27. GraphQL\Executor\ReferenceExecutor->completeValueCatchingError($returnType = class GraphQL\Type\Definition\NonNull { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; private $ofType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'nodes'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'The nodes of the connection, without the edges'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\NonNull { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'nodes'; public $returnType = class GraphQL\Type\Definition\NonNull { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; private $ofType = class GraphQL\Type\Definition\ListOfType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'RootQueryToPostConnection'; public $description = 'Connection between the RootQuery type and the post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'posts', 1 => 'nodes', 2 => 0]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = []; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = []; private $queryPlan = NULL }, $path = [0 => 'posts', 1 => 'nodes', 2 => 0], $result = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 17:11:42'; public $post_modified_gmt = '2023-02-22 17:11:42'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 0; public $caps = [...]; public $cap_key = NULL; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 0 }; protected $visibility = 'public'; public $fields = ['ID' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDo1', 'databaseId' => 5, 'post_type' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'date' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 17:11:42'; public $post_modified_gmt = '2023-02-22 17:11:42'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:887
[22-Feb-2023 17:21:15 UTC] PHP  28. GraphQL\Executor\ReferenceExecutor->completeValue($returnType = class GraphQL\Type\Definition\NonNull { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; private $ofType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'nodes'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'The nodes of the connection, without the edges'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\NonNull { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'nodes'; public $returnType = class GraphQL\Type\Definition\NonNull { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; private $ofType = class GraphQL\Type\Definition\ListOfType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'RootQueryToPostConnection'; public $description = 'Connection between the RootQuery type and the post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'posts', 1 => 'nodes', 2 => 0]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = []; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = []; private $queryPlan = NULL }, $path = [0 => 'posts', 1 => 'nodes', 2 => 0], $result = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 17:11:42'; public $post_modified_gmt = '2023-02-22 17:11:42'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 0; public $caps = [...]; public $cap_key = NULL; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 0 }; protected $visibility = 'public'; public $fields = ['ID' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDo1', 'databaseId' => 5, 'post_type' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'date' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 17:11:42'; public $post_modified_gmt = '2023-02-22 17:11:42'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:654
[22-Feb-2023 17:21:15 UTC] PHP  29. GraphQL\Executor\ReferenceExecutor->completeValue($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = ['description' => 'The post type', 'connections' => [...], 'interfaces' => [...], 'fields' => [...], 'model' => 'WPGraphQL\\Model\\Post', 'kind' => 'object', 'name' => 'Post']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['author' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'categories' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentCount' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'comments' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'conditionalTags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentType' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentTypeName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'databaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'date' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'dateGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'desiredSlug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'editingLockedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enclosure' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedScripts' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedStylesheets' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'excerpt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImage' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'guid' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'id' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isContentNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isPreview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRestricted' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRevision' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isSticky' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isTermNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lastEditedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'link' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modified' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modifiedGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pingStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pinged' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postFormats' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'preview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisionOf' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisions' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'slug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'status' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'tags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'template' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'templates' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'terms' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'title' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'toPing' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'uri' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'nodes'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'The nodes of the connection, without the edges'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\NonNull { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'nodes'; public $returnType = class GraphQL\Type\Definition\NonNull { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; private $ofType = class GraphQL\Type\Definition\ListOfType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'RootQueryToPostConnection'; public $description = 'Connection between the RootQuery type and the post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'posts', 1 => 'nodes', 2 => 0]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = []; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = []; private $queryPlan = NULL }, $path = [0 => 'posts', 1 => 'nodes', 2 => 0], $result = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 17:11:42'; public $post_modified_gmt = '2023-02-22 17:11:42'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 0; public $caps = [...]; public $cap_key = NULL; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 0 }; protected $visibility = 'public'; public $fields = ['ID' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDo1', 'databaseId' => 5, 'post_type' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'date' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 17:11:42'; public $post_modified_gmt = '2023-02-22 17:11:42'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:741
[22-Feb-2023 17:21:15 UTC] PHP  30. GraphQL\Executor\ReferenceExecutor->completeObjectValue($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = ['description' => 'The post type', 'connections' => [...], 'interfaces' => [...], 'fields' => [...], 'model' => 'WPGraphQL\\Model\\Post', 'kind' => 'object', 'name' => 'Post']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['author' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'categories' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentCount' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'comments' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'conditionalTags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentType' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentTypeName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'databaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'date' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'dateGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'desiredSlug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'editingLockedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enclosure' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedScripts' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedStylesheets' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'excerpt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImage' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'guid' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'id' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isContentNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isPreview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRestricted' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRevision' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isSticky' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isTermNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lastEditedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'link' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modified' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modifiedGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pingStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pinged' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postFormats' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'preview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisionOf' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisions' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'slug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'status' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'tags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'template' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'templates' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'terms' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'title' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'toPing' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'uri' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'nodes'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'The nodes of the connection, without the edges'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\NonNull { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'nodes'; public $returnType = class GraphQL\Type\Definition\NonNull { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; private $ofType = class GraphQL\Type\Definition\ListOfType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'RootQueryToPostConnection'; public $description = 'Connection between the RootQuery type and the post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'posts', 1 => 'nodes', 2 => 0]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = []; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = []; private $queryPlan = NULL }, $path = [0 => 'posts', 1 => 'nodes', 2 => 0], $result = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 17:11:42'; public $post_modified_gmt = '2023-02-22 17:11:42'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 0; public $caps = [...]; public $cap_key = NULL; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 0 }; protected $visibility = 'public'; public $fields = ['ID' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDo1', 'databaseId' => 5, 'post_type' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'date' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 17:11:42'; public $post_modified_gmt = '2023-02-22 17:11:42'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:793
[22-Feb-2023 17:21:15 UTC] PHP  31. GraphQL\Executor\ReferenceExecutor->collectAndExecuteSubfields($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = ['description' => 'The post type', 'connections' => [...], 'interfaces' => [...], 'fields' => [...], 'model' => 'WPGraphQL\\Model\\Post', 'kind' => 'object', 'name' => 'Post']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['author' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'categories' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentCount' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'comments' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'conditionalTags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentType' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentTypeName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'databaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'date' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'dateGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'desiredSlug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'editingLockedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enclosure' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedScripts' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedStylesheets' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'excerpt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImage' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'guid' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'id' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isContentNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isPreview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRestricted' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRevision' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isSticky' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isTermNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lastEditedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'link' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modified' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modifiedGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pingStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pinged' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postFormats' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'preview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisionOf' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisions' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'slug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'status' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'tags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'template' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'templates' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'terms' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'title' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'toPing' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'uri' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'posts', 1 => 'nodes', 2 => 0], $result = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 17:11:42'; public $post_modified_gmt = '2023-02-22 17:11:42'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 0; public $caps = [...]; public $cap_key = NULL; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 0 }; protected $visibility = 'public'; public $fields = ['ID' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDo1', 'databaseId' => 5, 'post_type' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'date' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 17:11:42'; public $post_modified_gmt = '2023-02-22 17:11:42'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1106
[22-Feb-2023 17:21:15 UTC] PHP  32. GraphQL\Executor\ReferenceExecutor->executeFields($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = ['description' => 'The post type', 'connections' => [...], 'interfaces' => [...], 'fields' => [...], 'model' => 'WPGraphQL\\Model\\Post', 'kind' => 'object', 'name' => 'Post']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['author' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'categories' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentCount' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'comments' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'conditionalTags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentType' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentTypeName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'databaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'date' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'dateGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'desiredSlug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'editingLockedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enclosure' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedScripts' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedStylesheets' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'excerpt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImage' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'guid' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'id' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isContentNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isPreview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRestricted' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRevision' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isSticky' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isTermNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lastEditedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'link' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modified' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modifiedGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pingStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pinged' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postFormats' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'preview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisionOf' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisions' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'slug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'status' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'tags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'template' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'templates' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'terms' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'title' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'toPing' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'uri' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 17:11:42'; public $post_modified_gmt = '2023-02-22 17:11:42'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 0; public $caps = [...]; public $cap_key = NULL; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 0 }; protected $visibility = 'public'; public $fields = ['ID' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDo1', 'databaseId' => 5, 'post_type' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'date' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 17:11:42'; public $post_modified_gmt = '2023-02-22 17:11:42'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }, $path = [0 => 'posts', 1 => 'nodes', 2 => 0], $fields = class ArrayObject { private $storage = ['contentBlocks' => class ArrayObject { ... }] }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1145
[22-Feb-2023 17:21:15 UTC] PHP  33. GraphQL\Executor\ReferenceExecutor->resolveField($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = ['description' => 'The post type', 'connections' => [...], 'interfaces' => [...], 'fields' => [...], 'model' => 'WPGraphQL\\Model\\Post', 'kind' => 'object', 'name' => 'Post']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['author' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'categories' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentCount' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'comments' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'conditionalTags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentType' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentTypeName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'databaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'date' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'dateGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'desiredSlug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'editingLockedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enclosure' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedScripts' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedStylesheets' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'excerpt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImage' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'guid' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'id' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isContentNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isPreview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRestricted' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRevision' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isSticky' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isTermNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lastEditedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'link' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modified' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modifiedGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pingStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pinged' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postFormats' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'preview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisionOf' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisions' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'slug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'status' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'tags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'template' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'templates' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'terms' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'title' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'toPing' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'uri' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 17:11:42'; public $post_modified_gmt = '2023-02-22 17:11:42'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 0; public $caps = [...]; public $cap_key = NULL; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 0 }; protected $visibility = 'public'; public $fields = ['ID' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDo1', 'databaseId' => 5, 'post_type' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'date' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 17:11:42'; public $post_modified_gmt = '2023-02-22 17:11:42'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'posts', 1 => 'nodes', 2 => 0, 3 => 'contentBlocks']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1195
[22-Feb-2023 17:21:15 UTC] PHP  34. GraphQL\Executor\ReferenceExecutor->completeValueCatchingError($returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'posts', 1 => 'nodes', 2 => 0, 3 => 'contentBlocks', 4 => 0]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = []; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = []; private $queryPlan = NULL }, $path = [0 => 'posts', 1 => 'nodes', 2 => 0, 3 => 'contentBlocks'], $result = [0 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f64f0bae87d']]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:557
[22-Feb-2023 17:21:15 UTC] PHP  35. GraphQL\Executor\ReferenceExecutor->completeValue($returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'posts', 1 => 'nodes', 2 => 0, 3 => 'contentBlocks', 4 => 0]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = []; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = []; private $queryPlan = NULL }, $path = [0 => 'posts', 1 => 'nodes', 2 => 0, 3 => 'contentBlocks'], $result = [0 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f64f0bae87d']]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:654
[22-Feb-2023 17:21:15 UTC] PHP  36. GraphQL\Executor\ReferenceExecutor->completeListValue($returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'posts', 1 => 'nodes', 2 => 0, 3 => 'contentBlocks', 4 => 0]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = []; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = []; private $queryPlan = NULL }, $path = [0 => 'posts', 1 => 'nodes', 2 => 0, 3 => 'contentBlocks'], $results = [0 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f64f0bae87d']]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:761
[22-Feb-2023 17:21:15 UTC] PHP  37. GraphQL\Executor\ReferenceExecutor->completeValueCatchingError($returnType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = ['eagerlyLoadType' => TRUE, 'description' => 'Blocks that can be edited to create content and layouts', 'fields' => [...], 'resolveType' => class Closure { virtual $closure = "$this->WPGraphQL\Type\{closure}", ... }, 'kind' => 'interface', 'name' => 'ContentBlock']; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = []; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'posts', 1 => 'nodes', 2 => 0, 3 => 'contentBlocks', 4 => 0]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = []; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = []; private $queryPlan = NULL }, $path = [0 => 'posts', 1 => 'nodes', 2 => 0, 3 => 'contentBlocks', 4 => 0], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f64f0bae87d']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:887
[22-Feb-2023 17:21:15 UTC] PHP  38. GraphQL\Executor\ReferenceExecutor->completeValue($returnType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = ['eagerlyLoadType' => TRUE, 'description' => 'Blocks that can be edited to create content and layouts', 'fields' => [...], 'resolveType' => class Closure { virtual $closure = "$this->WPGraphQL\Type\{closure}", ... }, 'kind' => 'interface', 'name' => 'ContentBlock']; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = []; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'posts', 1 => 'nodes', 2 => 0, 3 => 'contentBlocks', 4 => 0]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = []; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = []; private $queryPlan = NULL }, $path = [0 => 'posts', 1 => 'nodes', 2 => 0, 3 => 'contentBlocks', 4 => 0], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f64f0bae87d']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:654
[22-Feb-2023 17:21:15 UTC] PHP  39. GraphQL\Executor\ReferenceExecutor->completeAbstractValue($returnType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = ['eagerlyLoadType' => TRUE, 'description' => 'Blocks that can be edited to create content and layouts', 'fields' => [...], 'resolveType' => class Closure { virtual $closure = "$this->WPGraphQL\Type\{closure}", ... }, 'kind' => 'interface', 'name' => 'ContentBlock']; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = []; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'posts', 1 => 'nodes', 2 => 0, 3 => 'contentBlocks', 4 => 0]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = []; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = []; private $queryPlan = NULL }, $path = [0 => 'posts', 1 => 'nodes', 2 => 0, 3 => 'contentBlocks', 4 => 0], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f64f0bae87d']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:789
[22-Feb-2023 17:21:15 UTC] PHP  40. GraphQL\Executor\ReferenceExecutor->completeObjectValue($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = ['description' => 'A block used for editing the site', 'interfaces' => [...], 'eagerlyLoadType' => TRUE, 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCode']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'attributes' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['ContentBlock' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'posts', 1 => 'nodes', 2 => 0, 3 => 'contentBlocks', 4 => 0]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = []; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = []; private $queryPlan = NULL }, $path = [0 => 'posts', 1 => 'nodes', 2 => 0, 3 => 'contentBlocks', 4 => 0], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f64f0bae87d']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:974
[22-Feb-2023 17:21:15 UTC] PHP  41. GraphQL\Executor\ReferenceExecutor->collectAndExecuteSubfields($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = ['description' => 'A block used for editing the site', 'interfaces' => [...], 'eagerlyLoadType' => TRUE, 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCode']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'attributes' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['ContentBlock' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'posts', 1 => 'nodes', 2 => 0, 3 => 'contentBlocks', 4 => 0], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f64f0bae87d']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1106
[22-Feb-2023 17:21:15 UTC] PHP  42. GraphQL\Executor\ReferenceExecutor->executeFields($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = ['description' => 'A block used for editing the site', 'interfaces' => [...], 'eagerlyLoadType' => TRUE, 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCode']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'attributes' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['ContentBlock' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f64f0bae87d'], $path = [0 => 'posts', 1 => 'nodes', 2 => 0, 3 => 'contentBlocks', 4 => 0], $fields = class ArrayObject { private $storage = ['name' => class ArrayObject { ... }, 'renderedHtml' => class ArrayObject { ... }, 'apiVersion' => class ArrayObject { ... }, 'blockEditorCategoryName' => class ArrayObject { ... }, 'attributes' => class ArrayObject { ... }] }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1145
[22-Feb-2023 17:21:15 UTC] PHP  43. GraphQL\Executor\ReferenceExecutor->resolveField($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = ['description' => 'A block used for editing the site', 'interfaces' => [...], 'eagerlyLoadType' => TRUE, 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCode']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'attributes' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['ContentBlock' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f64f0bae87d'], $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'posts', 1 => 'nodes', 2 => 0, 3 => 'contentBlocks', 4 => 0, 5 => 'attributes']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1195
[22-Feb-2023 17:21:15 UTC] PHP  44. GraphQL\Executor\ReferenceExecutor->completeValueCatchingError($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'attributes'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'Attributes of the %s Block Type'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class WPGraphQL\Type\WPObjectType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'attributes'; public $returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'posts', 1 => 'nodes', 2 => 0, 3 => 'contentBlocks', 4 => 0, 5 => 'attributes']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = []; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = []; private $queryPlan = NULL }, $path = [0 => 'posts', 1 => 'nodes', 2 => 0, 3 => 'contentBlocks', 4 => 0, 5 => 'attributes'], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f64f0bae87d']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:557
[22-Feb-2023 17:21:15 UTC] PHP  45. GraphQL\Executor\ReferenceExecutor->completeValue($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'attributes'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'Attributes of the %s Block Type'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class WPGraphQL\Type\WPObjectType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'attributes'; public $returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'posts', 1 => 'nodes', 2 => 0, 3 => 'contentBlocks', 4 => 0, 5 => 'attributes']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = []; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = []; private $queryPlan = NULL }, $path = [0 => 'posts', 1 => 'nodes', 2 => 0, 3 => 'contentBlocks', 4 => 0, 5 => 'attributes'], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f64f0bae87d']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:654
[22-Feb-2023 17:21:15 UTC] PHP  46. GraphQL\Executor\ReferenceExecutor->completeObjectValue($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'attributes'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'Attributes of the %s Block Type'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class WPGraphQL\Type\WPObjectType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'attributes'; public $returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'posts', 1 => 'nodes', 2 => 0, 3 => 'contentBlocks', 4 => 0, 5 => 'attributes']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = []; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = []; private $queryPlan = NULL }, $path = [0 => 'posts', 1 => 'nodes', 2 => 0, 3 => 'contentBlocks', 4 => 0, 5 => 'attributes'], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f64f0bae87d']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:793
[22-Feb-2023 17:21:15 UTC] PHP  47. GraphQL\Executor\ReferenceExecutor->collectAndExecuteSubfields($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'posts', 1 => 'nodes', 2 => 0, 3 => 'contentBlocks', 4 => 0, 5 => 'attributes'], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f64f0bae87d']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1106
[22-Feb-2023 17:21:15 UTC] PHP  48. GraphQL\Executor\ReferenceExecutor->executeFields($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f64f0bae87d'], $path = [0 => 'posts', 1 => 'nodes', 2 => 0, 3 => 'contentBlocks', 4 => 0, 5 => 'attributes'], $fields = class ArrayObject { private $storage = ['borderColor' => class ArrayObject { ... }, 'backgroundColor' => class ArrayObject { ... }, 'content' => class ArrayObject { ... }, 'style' => class ArrayObject { ... }, 'textColor' => class ArrayObject { ... }, 'fontSize' => class ArrayObject { ... }] }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1145
[22-Feb-2023 17:21:15 UTC] PHP  49. GraphQL\Executor\ReferenceExecutor->resolveField($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f64f0bae87d'], $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'posts', 1 => 'nodes', 2 => 0, 3 => 'contentBlocks', 4 => 0, 5 => 'attributes', 6 => 'content']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1195
[22-Feb-2023 17:21:15 UTC] PHP  50. GraphQL\Executor\ReferenceExecutor->resolveFieldValueOrError($fieldDef = class GraphQL\Type\Definition\FieldDefinition { public $name = 'content'; public $args = []; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", public $static = [...]; public $parameter = [...] }; public $mapFn = NULL; public $description = 'The &quot;content&quot; field on the &quot;CoreCode&quot; block'; public $deprecationReason = NULL; public $astNode = NULL; public $config = ['type' => class Closure { virtual $closure = "$this->WPGraphQL\Registry\{closure}", ... }, 'description' => 'The "content" field on the "CoreCode" block', 'resolve' => class Closure { virtual $closure = "$this->WPGraphQL\ContentBlocks\Blocks\{closure}", ... }, 'name' => 'content']; private $type = class GraphQL\Type\Definition\StringType { public $name = 'String'; public $description = 'The `String` scalar type represents textual data, represented as UTF-8\ncharacter sequences. The String type is most often used by GraphQL to\nrepresent free-form human-readable text.'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }, $fieldNode = class GraphQL\Language\AST\FieldNode { public $loc = class GraphQL\Language\AST\Location { public $start = 263; public $end = 270; public $startToken = class GraphQL\Language\Token { ... }; public $endToken = class GraphQL\Language\Token { ... }; public $source = class GraphQL\Language\Source { ... } }; public $kind = 'Field'; public $name = class GraphQL\Language\AST\NameNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'Name'; public $value = 'content' }; public $alias = NULL; public $arguments = class GraphQL\Language\AST\NodeList { private $nodes = [...] }; public $directives = class GraphQL\Language\AST\NodeList { private $nodes = [...] }; public $selectionSet = NULL }, $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", public $static = ['field_resolver' => class Closure { virtual $closure = "$this->WPGraphQL\ContentBlocks\Blocks\{closure}", ... }, 'type_name' => 'CoreCodeAttributes', 'field_key' => 'content', 'field' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $parameter = ['$source' => '<required>', '$args' => '<required>', '$context' => '<required>', '$info' => '<required>'] }, $rootValue = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f64f0bae87d'], $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'content'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'The &quot;content&quot; field on the &quot;CoreCode&quot; block'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\StringType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'content'; public $returnType = class GraphQL\Type\Definition\StringType { public $name = 'String'; public $description = 'The `String` scalar type represents textual data, represented as UTF-8\ncharacter sequences. The String type is most often used by GraphQL to\nrepresent free-form human-readable text.'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'posts', 1 => 'nodes', 2 => 0, 3 => 'contentBlocks', 4 => 0, 5 => 'attributes', 6 => 'content']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = []; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = []; private $queryPlan = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:550
[22-Feb-2023 17:21:15 UTC] PHP  51. WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure:/Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/src/Utils/InstrumentSchema.php:100-188}($source = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f64f0bae87d'], $args = [], $context = class WPGraphQL\AppContext { public $root_url = 'http://localhost:10028'; public $viewer = class WP_User { public $data = class stdClass { ... }; public $ID = 0; public $caps = [...]; public $cap_key = NULL; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 0 }; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] }; public $request = ['graphql' => '']; public $config = ['registered_editor_blocks' => [...]]; public $currentConnection = NULL; public $connectionArgs = []; public $loaders = ['comment_author' => class WPGraphQL\Data\Loader\CommentAuthorLoader { ... }, 'comment' => class WPGraphQL\Data\Loader\CommentLoader { ... }, 'enqueued_script' => class WPGraphQL\Data\Loader\EnqueuedScriptLoader { ... }, 'enqueued_stylesheet' => class WPGraphQL\Data\Loader\EnqueuedStylesheetLoader { ... }, 'plugin' => class WPGraphQL\Data\Loader\PluginLoader { ... }, 'nav_menu_item' => class WPGraphQL\Data\Loader\PostObjectLoader { ... }, 'post' => class WPGraphQL\Data\Loader\PostObjectLoader { ... }, 'post_type' => class WPGraphQL\Data\Loader\PostTypeLoader { ... }, 'taxonomy' => class WPGraphQL\Data\Loader\TaxonomyLoader { ... }, 'term' => class WPGraphQL\Data\Loader\TermObjectLoader { ... }, 'theme' => class WPGraphQL\Data\Loader\ThemeLoader { ... }, 'user' => class WPGraphQL\Data\Loader\UserLoader { ... }, 'user_role' => class WPGraphQL\Data\Loader\UserRoleLoader { ... }]; public $node_resolver = class WPGraphQL\Data\NodeResolver { protected $wp = class WP { ... }; protected $context = ... }; public $connection_query_class = 'WP_Query' }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'content'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'The &quot;content&quot; field on the &quot;CoreCode&quot; block'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\StringType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'content'; public $returnType = class GraphQL\Type\Definition\StringType { public $name = 'String'; public $description = 'The `String` scalar type represents textual data, represented as UTF-8\ncharacter sequences. The String type is most often used by GraphQL to\nrepresent free-form human-readable text.'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'posts', 1 => 'nodes', 2 => 0, 3 => 'contentBlocks', 4 => 0, 5 => 'attributes', 6 => 'content']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = []; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = []; private $queryPlan = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:623
[22-Feb-2023 17:21:15 UTC] PHP  52. WPGraphQL\ContentBlocks\Blocks\Block->WPGraphQL\ContentBlocks\Blocks\{closure:/Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql-content-blocks-main/includes/Blocks/Block.php:161-163}($block = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f64f0bae87d'], $args = [], $context = class WPGraphQL\AppContext { public $root_url = 'http://localhost:10028'; public $viewer = class WP_User { public $data = class stdClass { ... }; public $ID = 0; public $caps = [...]; public $cap_key = NULL; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 0 }; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] }; public $request = ['graphql' => '']; public $config = ['registered_editor_blocks' => [...]]; public $currentConnection = NULL; public $connectionArgs = []; public $loaders = ['comment_author' => class WPGraphQL\Data\Loader\CommentAuthorLoader { ... }, 'comment' => class WPGraphQL\Data\Loader\CommentLoader { ... }, 'enqueued_script' => class WPGraphQL\Data\Loader\EnqueuedScriptLoader { ... }, 'enqueued_stylesheet' => class WPGraphQL\Data\Loader\EnqueuedStylesheetLoader { ... }, 'plugin' => class WPGraphQL\Data\Loader\PluginLoader { ... }, 'nav_menu_item' => class WPGraphQL\Data\Loader\PostObjectLoader { ... }, 'post' => class WPGraphQL\Data\Loader\PostObjectLoader { ... }, 'post_type' => class WPGraphQL\Data\Loader\PostTypeLoader { ... }, 'taxonomy' => class WPGraphQL\Data\Loader\TaxonomyLoader { ... }, 'term' => class WPGraphQL\Data\Loader\TermObjectLoader { ... }, 'theme' => class WPGraphQL\Data\Loader\ThemeLoader { ... }, 'user' => class WPGraphQL\Data\Loader\UserLoader { ... }, 'user_role' => class WPGraphQL\Data\Loader\UserRoleLoader { ... }]; public $node_resolver = class WPGraphQL\Data\NodeResolver { protected $wp = class WP { ... }; protected $context = ... }; public $connection_query_class = 'WP_Query' }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'content'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'The &quot;content&quot; field on the &quot;CoreCode&quot; block'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\StringType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'content'; public $returnType = class GraphQL\Type\Definition\StringType { public $name = 'String'; public $description = 'The `String` scalar type represents textual data, represented as UTF-8\ncharacter sequences. The String type is most often used by GraphQL to\nrepresent free-form human-readable text.'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'posts', 1 => 'nodes', 2 => 0, 3 => 'contentBlocks', 4 => 0, 5 => 'attributes', 6 => 'content']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = []; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = []; private $queryPlan = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/src/Utils/InstrumentSchema.php:151
[22-Feb-2023 17:21:15 UTC] PHP  53. WPGraphQL\ContentBlocks\Blocks\Block->resolve_block_attributes($block = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f64f0bae87d'], $attribute_name = 'content', $attribute_config = ['type' => 'string', 'source' => 'html', 'selector' => 'code']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql-content-blocks-main/includes/Blocks/Block.php:162
[22-Feb-2023 20:30:33 UTC] PHP Warning:  Undefined array key "default" in /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql-content-blocks-main/includes/Blocks/Block.php on line 214
[22-Feb-2023 20:30:33 UTC] PHP Stack trace:
[22-Feb-2023 20:30:33 UTC] PHP   1. {main}() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/index.php:0
[22-Feb-2023 20:30:33 UTC] PHP   2. require() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/index.php:17
[22-Feb-2023 20:30:33 UTC] PHP   3. wp($query_vars = *uninitialized*) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-blog-header.php:16
[22-Feb-2023 20:30:33 UTC] PHP   4. WP->main($query_args = '') /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/functions.php:1332
[22-Feb-2023 20:30:33 UTC] PHP   5. WP->parse_request($extra_query_vars = '') /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/class-wp.php:780
[22-Feb-2023 20:30:33 UTC] PHP   6. do_action_ref_array($hook_name = 'parse_request', $args = [0 => class WP { public $public_query_vars = [...]; public $private_query_vars = [...]; public $extra_query_vars = [...]; public $query_vars = [...]; public $query_string = ''; public $request = 'graphql'; public $matched_rule = 'graphql/?$'; public $matched_query = 'graphql=true'; public $did_permalink = TRUE }]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/class-wp.php:399
[22-Feb-2023 20:30:33 UTC] PHP   7. WP_Hook->do_action($args = [0 => class WP { public $public_query_vars = [...]; public $private_query_vars = [...]; public $extra_query_vars = [...]; public $query_vars = [...]; public $query_string = ''; public $request = 'graphql'; public $matched_rule = 'graphql/?$'; public $matched_query = 'graphql=true'; public $did_permalink = TRUE }]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/plugin.php:565
[22-Feb-2023 20:30:33 UTC] PHP   8. WP_Hook->apply_filters($value = '', $args = [0 => class WP { public $public_query_vars = [...]; public $private_query_vars = [...]; public $extra_query_vars = [...]; public $query_vars = [...]; public $query_string = ''; public $request = 'graphql'; public $matched_rule = 'graphql/?$'; public $matched_query = 'graphql=true'; public $did_permalink = TRUE }]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/class-wp-hook.php:332
[22-Feb-2023 20:30:33 UTC] PHP   9. WPGraphQL\Router::resolve_http_request(class WP { public $public_query_vars = [0 => 'm', 1 => 'p', 2 => 'posts', 3 => 'w', 4 => 'cat', 5 => 'withcomments', 6 => 'withoutcomments', 7 => 's', 8 => 'search', 9 => 'exact', 10 => 'sentence', 11 => 'calendar', 12 => 'page', 13 => 'paged', 14 => 'more', 15 => 'tb', 16 => 'pb', 17 => 'author', 18 => 'order', 19 => 'orderby', 20 => 'year', 21 => 'monthnum', 22 => 'day', 23 => 'hour', 24 => 'minute', 25 => 'second', 26 => 'name', 27 => 'category_name', 28 => 'tag', 29 => 'feed', 30 => 'author_name', 31 => 'pagename', 32 => 'page_id', 33 => 'error', 34 => 'attachment', 35 => 'attachment_id', 36 => 'subpost', 37 => 'subpost_id', 38 => 'preview', 39 => 'robots', 40 => 'favicon', 41 => 'taxonomy', 42 => 'term', 43 => 'cpage', 44 => 'post_type', 45 => 'embed', 46 => 'post_format', 47 => 'rest_route', 48 => 'sitemap', 49 => 'sitemap-subtype', 50 => 'sitemap-stylesheet', 51 => 'graphql']; public $private_query_vars = [0 => 'offset', 1 => 'posts_per_page', 2 => 'posts_per_archive_page', 3 => 'showposts', 4 => 'nopaging', 5 => 'post_type', 6 => 'post_status', 7 => 'category__in', 8 => 'category__not_in', 9 => 'category__and', 10 => 'tag__in', 11 => 'tag__not_in', 12 => 'tag__and', 13 => 'tag_slug__in', 14 => 'tag_slug__and', 15 => 'tag_id', 16 => 'post_mime_type', 17 => 'perm', 18 => 'comments_per_page', 19 => 'post__in', 20 => 'post__not_in', 21 => 'post_parent', 22 => 'post_parent__in', 23 => 'post_parent__not_in', 24 => 'title', 25 => 'fields']; public $extra_query_vars = []; public $query_vars = ['graphql' => 'true']; public $query_string = ''; public $request = 'graphql'; public $matched_rule = 'graphql/?$'; public $matched_query = 'graphql=true'; public $did_permalink = TRUE }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/class-wp-hook.php:308
[22-Feb-2023 20:30:33 UTC] PHP  10. WPGraphQL\Router::process_http_request() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/src/Router.php:275
[22-Feb-2023 20:30:33 UTC] PHP  11. WPGraphQL\Request->execute_http() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/src/Router.php:481
[22-Feb-2023 20:30:33 UTC] PHP  12. GraphQL\Server\StandardServer->executeRequest($parsedBody = class GraphQL\Server\OperationParams { public $queryId = NULL; public $query = 'fragment BlogInfoFragment on GeneralSettings {\n  title\n  description\n  __typename\n}\n\nfragment NavigationMenuItemFragment on MenuItem {\n  id\n  path\n  label\n  parentId\n  cssClasses\n  menu {\n    node {\n      name\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment FeaturedImageFragment on NodeWithFeaturedImage {\n  featuredImage {\n    node {\n      id\n      sourceUrl\n      altText\n      mediaDetails {\n        width\n        height\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }'...; public $operation = 'GetPost'; public $variables = ['asPreview' => TRUE, 'databaseId' => 5, 'headerLocation' => 'PRIMARY', 'footerLocation' => 'FOOTER']; public $extensions = NULL; private $originalInput = ['operationname' => 'GetPost', 'variables' => [...], 'query' => 'fragment BlogInfoFragment on GeneralSettings {\n  title\n  description\n  __typename\n}\n\nfragment NavigationMenuItemFragment on MenuItem {\n  id\n  path\n  label\n  parentId\n  cssClasses\n  menu {\n    node {\n      name\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment FeaturedImageFragment on NodeWithFeaturedImage {\n  featuredImage {\n    node {\n      id\n      sourceUrl\n      altText\n      mediaDetails {\n        width\n        height\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }'...]; private $readOnly = FALSE }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/src/Request.php:713
[22-Feb-2023 20:30:33 UTC] PHP  13. GraphQL\Server\Helper->executeOperation($config = class GraphQL\Server\ServerConfig { private $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; private $context = class WPGraphQL\AppContext { public $root_url = 'http://localhost:10028'; public $viewer = class WP_User { ... }; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... }; public $request = NULL; public $config = [...]; public $currentConnection = NULL; public $connectionArgs = [...]; public $loaders = [...]; public $node_resolver = class WPGraphQL\Data\NodeResolver { ... }; public $connection_query_class = NULL }; private $rootValue = NULL; private $errorFormatter = NULL; private $errorsHandler = NULL; private $debugFlag = 0; private $queryBatching = TRUE; private $validationRules = [0 => class GraphQL\Validator\Rules\ExecutableDefinitions { ... }, 1 => class GraphQL\Validator\Rules\UniqueOperationNames { ... }, 2 => class GraphQL\Validator\Rules\LoneAnonymousOperation { ... }, 3 => class GraphQL\Validator\Rules\SingleFieldSubscription { ... }, 4 => class GraphQL\Validator\Rules\KnownTypeNames { ... }, 5 => class GraphQL\Validator\Rules\FragmentsOnCompositeTypes { ... }, 6 => class GraphQL\Validator\Rules\VariablesAreInputTypes { ... }, 7 => class GraphQL\Validator\Rules\ScalarLeafs { ... }, 8 => class GraphQL\Validator\Rules\FieldsOnCorrectType { ... }, 9 => class GraphQL\Validator\Rules\UniqueFragmentNames { ... }, 10 => class GraphQL\Validator\Rules\KnownFragmentNames { ... }, 11 => class GraphQL\Validator\Rules\NoUnusedFragments { ... }, 12 => class GraphQL\Validator\Rules\PossibleFragmentSpreads { ... }, 13 => class GraphQL\Validator\Rules\NoFragmentCycles { ... }, 14 => class GraphQL\Validator\Rules\UniqueVariableNames { ... }, 15 => class GraphQL\Validator\Rules\NoUndefinedVariables { ... }, 16 => class GraphQL\Validator\Rules\NoUnusedVariables { ... }, 17 => class GraphQL\Validator\Rules\KnownDirectives { ... }, 18 => class GraphQL\Validator\Rules\UniqueDirectivesPerLocation { ... }, 19 => class GraphQL\Validator\Rules\KnownArgumentNames { ... }, 20 => class GraphQL\Validator\Rules\UniqueArgumentNames { ... }, 21 => class GraphQL\Validator\Rules\ValuesOfCorrectType { ... }, 22 => class GraphQL\Validator\Rules\ProvidedRequiredArguments { ... }, 23 => class GraphQL\Validator\Rules\VariablesInAllowedPosition { ... }, 24 => class GraphQL\Validator\Rules\OverlappingFieldsCanBeMerged { ... }, 25 => class GraphQL\Validator\Rules\UniqueInputFieldNames { ... }, 'require_authentication' => class WPGraphQL\Server\ValidationRules\RequireAuthentication { ... }, 'disable_introspection' => class WPGraphQL\Server\ValidationRules\DisableIntrospection { ... }, 'query_depth' => class WPGraphQL\Server\ValidationRules\QueryDepth { ... }]; private $fieldResolver = NULL; private $promiseAdapter = NULL; private $persistentQueryLoader = NULL }, $op = class GraphQL\Server\OperationParams { public $queryId = NULL; public $query = 'fragment BlogInfoFragment on GeneralSettings {\n  title\n  description\n  __typename\n}\n\nfragment NavigationMenuItemFragment on MenuItem {\n  id\n  path\n  label\n  parentId\n  cssClasses\n  menu {\n    node {\n      name\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment FeaturedImageFragment on NodeWithFeaturedImage {\n  featuredImage {\n    node {\n      id\n      sourceUrl\n      altText\n      mediaDetails {\n        width\n        height\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }'...; public $operation = 'GetPost'; public $variables = ['asPreview' => TRUE, 'databaseId' => 5, 'headerLocation' => 'PRIMARY', 'footerLocation' => 'FOOTER']; public $extensions = NULL; private $originalInput = ['operationname' => 'GetPost', 'variables' => [...], 'query' => 'fragment BlogInfoFragment on GeneralSettings {\n  title\n  description\n  __typename\n}\n\nfragment NavigationMenuItemFragment on MenuItem {\n  id\n  path\n  label\n  parentId\n  cssClasses\n  menu {\n    node {\n      name\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment FeaturedImageFragment on NodeWithFeaturedImage {\n  featuredImage {\n    node {\n      id\n      sourceUrl\n      altText\n      mediaDetails {\n        width\n        height\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }'...]; private $readOnly = FALSE }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Server/StandardServer.php:136
[22-Feb-2023 20:30:33 UTC] PHP  14. GraphQL\Executor\Promise\Adapter\SyncPromiseAdapter->wait($promise = class GraphQL\Executor\Promise\Promise { public $adoptedPromise = class GraphQL\Executor\Promise\Adapter\SyncPromise { public $state = 'pending'; public $result = NULL; private $waiting = [...] }; private $adapter = class GraphQL\Executor\Promise\Adapter\SyncPromiseAdapter {  } }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Server/Helper.php:214
[22-Feb-2023 20:30:33 UTC] PHP  15. GraphQL\Executor\Promise\Adapter\SyncPromise::runQueue() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/Promise/Adapter/SyncPromiseAdapter.php:149
[22-Feb-2023 20:30:33 UTC] PHP  16. GraphQL\Executor\Promise\Adapter\SyncPromise->GraphQL\Executor\Promise\Adapter\{closure:/Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/Promise/Adapter/SyncPromise.php:142-163}() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/Promise/Adapter/SyncPromise.php:53
[22-Feb-2023 20:30:33 UTC] PHP  17. GraphQL\Executor\ReferenceExecutor->GraphQL\Executor\{closure:/Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:650-652}($resolved = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/Promise/Adapter/SyncPromise.php:148
[22-Feb-2023 20:30:33 UTC] PHP  18. GraphQL\Executor\ReferenceExecutor->completeValue($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = ['description' => 'The post type', 'connections' => [...], 'interfaces' => [...], 'fields' => [...], 'model' => 'WPGraphQL\\Model\\Post', 'kind' => 'object', 'name' => 'Post']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['author' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'categories' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentCount' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'comments' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'conditionalTags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentType' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentTypeName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'databaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'date' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'dateGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'desiredSlug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'editingLockedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enclosure' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedScripts' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedStylesheets' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'excerpt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImage' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'guid' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'id' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isContentNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isPreview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRestricted' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRevision' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isSticky' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isTermNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lastEditedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'link' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modified' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modifiedGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pingStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pinged' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postFormats' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'preview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisionOf' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisions' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'slug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'status' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'tags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'template' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'templates' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'terms' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'title' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'toPing' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'uri' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['Node' => class WPGraphQL\Type\WPInterfaceType { ... }, 'ContentNode' => class WPGraphQL\Type\WPInterfaceType { ... }, 'UniformResourceIdentifiable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'DatabaseIdentifier' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTemplate' => class WPGraphQL\Type\WPInterfaceType { ... }, 'Previewable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTitle' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentEditor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithAuthor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithFeaturedImage' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithExcerpt' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithComments' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTrackbacks' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithRevisions' => class WPGraphQL\Type\WPInterfaceType { ... }, 'MenuItemLinkable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentBlocks' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'post'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'An object of the post Type. '; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class WPGraphQL\Type\WPObjectType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'post'; public $returnType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'RootQuery'; public $description = 'The root entry point into the Graph'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post'], $result = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:651
[22-Feb-2023 20:30:33 UTC] PHP  19. GraphQL\Executor\ReferenceExecutor->completeObjectValue($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = ['description' => 'The post type', 'connections' => [...], 'interfaces' => [...], 'fields' => [...], 'model' => 'WPGraphQL\\Model\\Post', 'kind' => 'object', 'name' => 'Post']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['author' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'categories' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentCount' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'comments' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'conditionalTags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentType' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentTypeName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'databaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'date' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'dateGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'desiredSlug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'editingLockedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enclosure' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedScripts' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedStylesheets' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'excerpt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImage' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'guid' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'id' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isContentNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isPreview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRestricted' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRevision' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isSticky' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isTermNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lastEditedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'link' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modified' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modifiedGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pingStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pinged' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postFormats' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'preview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisionOf' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisions' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'slug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'status' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'tags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'template' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'templates' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'terms' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'title' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'toPing' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'uri' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['Node' => class WPGraphQL\Type\WPInterfaceType { ... }, 'ContentNode' => class WPGraphQL\Type\WPInterfaceType { ... }, 'UniformResourceIdentifiable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'DatabaseIdentifier' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTemplate' => class WPGraphQL\Type\WPInterfaceType { ... }, 'Previewable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTitle' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentEditor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithAuthor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithFeaturedImage' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithExcerpt' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithComments' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTrackbacks' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithRevisions' => class WPGraphQL\Type\WPInterfaceType { ... }, 'MenuItemLinkable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentBlocks' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'post'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'An object of the post Type. '; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class WPGraphQL\Type\WPObjectType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'post'; public $returnType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'RootQuery'; public $description = 'The root entry point into the Graph'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post'], $result = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:793
[22-Feb-2023 20:30:33 UTC] PHP  20. GraphQL\Executor\ReferenceExecutor->collectAndExecuteSubfields($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = ['description' => 'The post type', 'connections' => [...], 'interfaces' => [...], 'fields' => [...], 'model' => 'WPGraphQL\\Model\\Post', 'kind' => 'object', 'name' => 'Post']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['author' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'categories' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentCount' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'comments' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'conditionalTags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentType' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentTypeName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'databaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'date' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'dateGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'desiredSlug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'editingLockedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enclosure' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedScripts' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedStylesheets' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'excerpt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImage' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'guid' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'id' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isContentNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isPreview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRestricted' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRevision' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isSticky' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isTermNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lastEditedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'link' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modified' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modifiedGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pingStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pinged' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postFormats' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'preview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisionOf' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisions' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'slug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'status' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'tags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'template' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'templates' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'terms' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'title' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'toPing' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'uri' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['Node' => class WPGraphQL\Type\WPInterfaceType { ... }, 'ContentNode' => class WPGraphQL\Type\WPInterfaceType { ... }, 'UniformResourceIdentifiable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'DatabaseIdentifier' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTemplate' => class WPGraphQL\Type\WPInterfaceType { ... }, 'Previewable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTitle' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentEditor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithAuthor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithFeaturedImage' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithExcerpt' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithComments' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTrackbacks' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithRevisions' => class WPGraphQL\Type\WPInterfaceType { ... }, 'MenuItemLinkable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentBlocks' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post'], $result = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1106
[22-Feb-2023 20:30:33 UTC] PHP  21. GraphQL\Executor\ReferenceExecutor->executeFields($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = ['description' => 'The post type', 'connections' => [...], 'interfaces' => [...], 'fields' => [...], 'model' => 'WPGraphQL\\Model\\Post', 'kind' => 'object', 'name' => 'Post']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['author' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'categories' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentCount' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'comments' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'conditionalTags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentType' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentTypeName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'databaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'date' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'dateGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'desiredSlug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'editingLockedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enclosure' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedScripts' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedStylesheets' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'excerpt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImage' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'guid' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'id' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isContentNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isPreview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRestricted' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRevision' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isSticky' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isTermNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lastEditedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'link' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modified' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modifiedGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pingStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pinged' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postFormats' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'preview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisionOf' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisions' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'slug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'status' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'tags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'template' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'templates' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'terms' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'title' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'toPing' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'uri' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['Node' => class WPGraphQL\Type\WPInterfaceType { ... }, 'ContentNode' => class WPGraphQL\Type\WPInterfaceType { ... }, 'UniformResourceIdentifiable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'DatabaseIdentifier' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTemplate' => class WPGraphQL\Type\WPInterfaceType { ... }, 'Previewable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTitle' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentEditor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithAuthor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithFeaturedImage' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithExcerpt' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithComments' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTrackbacks' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithRevisions' => class WPGraphQL\Type\WPInterfaceType { ... }, 'MenuItemLinkable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentBlocks' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }, $path = [0 => 'post'], $fields = class ArrayObject { private $storage = ['title' => class ArrayObject { ... }, 'content' => class ArrayObject { ... }, 'date' => class ArrayObject { ... }, 'author' => class ArrayObject { ... }, 'featuredImage' => class ArrayObject { ... }, '__typename' => class ArrayObject { ... }, 'contentBlocks' => class ArrayObject { ... }] }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1145
[22-Feb-2023 20:30:33 UTC] PHP  22. GraphQL\Executor\ReferenceExecutor->resolveField($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = ['description' => 'The post type', 'connections' => [...], 'interfaces' => [...], 'fields' => [...], 'model' => 'WPGraphQL\\Model\\Post', 'kind' => 'object', 'name' => 'Post']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['author' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'categories' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentCount' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'comments' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'conditionalTags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentType' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentTypeName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'databaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'date' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'dateGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'desiredSlug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'editingLockedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enclosure' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedScripts' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedStylesheets' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'excerpt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImage' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'guid' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'id' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isContentNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isPreview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRestricted' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRevision' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isSticky' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isTermNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lastEditedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'link' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modified' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modifiedGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pingStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pinged' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postFormats' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'preview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisionOf' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisions' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'slug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'status' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'tags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'template' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'templates' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'terms' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'title' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'toPing' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'uri' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['Node' => class WPGraphQL\Type\WPInterfaceType { ... }, 'ContentNode' => class WPGraphQL\Type\WPInterfaceType { ... }, 'UniformResourceIdentifiable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'DatabaseIdentifier' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTemplate' => class WPGraphQL\Type\WPInterfaceType { ... }, 'Previewable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTitle' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentEditor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithAuthor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithFeaturedImage' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithExcerpt' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithComments' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTrackbacks' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithRevisions' => class WPGraphQL\Type\WPInterfaceType { ... }, 'MenuItemLinkable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentBlocks' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post', 1 => 'contentBlocks']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1195
[22-Feb-2023 20:30:33 UTC] PHP  23. GraphQL\Executor\ReferenceExecutor->completeValueCatchingError($returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks'], $result = [0 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f67b69f0199'], 2 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f67b69f019b']]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:557
[22-Feb-2023 20:30:33 UTC] PHP  24. GraphQL\Executor\ReferenceExecutor->completeValue($returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks'], $result = [0 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f67b69f0199'], 2 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f67b69f019b']]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:654
[22-Feb-2023 20:30:33 UTC] PHP  25. GraphQL\Executor\ReferenceExecutor->completeListValue($returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks'], $results = [0 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f67b69f0199'], 2 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f67b69f019b']]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:761
[22-Feb-2023 20:30:33 UTC] PHP  26. GraphQL\Executor\ReferenceExecutor->completeValueCatchingError($returnType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = ['eagerlyLoadType' => TRUE, 'description' => 'Blocks that can be edited to create content and layouts', 'fields' => [...], 'resolveType' => class Closure { virtual $closure = "$this->WPGraphQL\Type\{closure}", ... }, 'kind' => 'interface', 'name' => 'ContentBlock']; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = []; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f67b69f0199']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:887
[22-Feb-2023 20:30:33 UTC] PHP  27. GraphQL\Executor\ReferenceExecutor->completeValue($returnType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = ['eagerlyLoadType' => TRUE, 'description' => 'Blocks that can be edited to create content and layouts', 'fields' => [...], 'resolveType' => class Closure { virtual $closure = "$this->WPGraphQL\Type\{closure}", ... }, 'kind' => 'interface', 'name' => 'ContentBlock']; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = []; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f67b69f0199']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:654
[22-Feb-2023 20:30:33 UTC] PHP  28. GraphQL\Executor\ReferenceExecutor->completeAbstractValue($returnType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = ['eagerlyLoadType' => TRUE, 'description' => 'Blocks that can be edited to create content and layouts', 'fields' => [...], 'resolveType' => class Closure { virtual $closure = "$this->WPGraphQL\Type\{closure}", ... }, 'kind' => 'interface', 'name' => 'ContentBlock']; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = []; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f67b69f0199']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:789
[22-Feb-2023 20:30:33 UTC] PHP  29. GraphQL\Executor\ReferenceExecutor->completeObjectValue($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = ['description' => 'A block used for editing the site', 'interfaces' => [...], 'eagerlyLoadType' => TRUE, 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCode']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'attributes' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['ContentBlock' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f67b69f0199']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:974
[22-Feb-2023 20:30:33 UTC] PHP  30. GraphQL\Executor\ReferenceExecutor->collectAndExecuteSubfields($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = ['description' => 'A block used for editing the site', 'interfaces' => [...], 'eagerlyLoadType' => TRUE, 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCode']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'attributes' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['ContentBlock' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f67b69f0199']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1106
[22-Feb-2023 20:30:33 UTC] PHP  31. GraphQL\Executor\ReferenceExecutor->executeFields($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = ['description' => 'A block used for editing the site', 'interfaces' => [...], 'eagerlyLoadType' => TRUE, 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCode']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'attributes' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['ContentBlock' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f67b69f0199'], $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0], $fields = class ArrayObject { private $storage = ['__typename' => class ArrayObject { ... }, 'renderedHtml' => class ArrayObject { ... }, 'id' => class ArrayObject { ... }, 'parentId' => class ArrayObject { ... }, 'attributes' => class ArrayObject { ... }] }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1145
[22-Feb-2023 20:30:33 UTC] PHP  32. GraphQL\Executor\ReferenceExecutor->resolveField($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = ['description' => 'A block used for editing the site', 'interfaces' => [...], 'eagerlyLoadType' => TRUE, 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCode']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'attributes' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['ContentBlock' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f67b69f0199'], $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1195
[22-Feb-2023 20:30:33 UTC] PHP  33. GraphQL\Executor\ReferenceExecutor->completeValueCatchingError($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'attributes'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'Attributes of the %s Block Type'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class WPGraphQL\Type\WPObjectType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'attributes'; public $returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes'], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f67b69f0199']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:557
[22-Feb-2023 20:30:33 UTC] PHP  34. GraphQL\Executor\ReferenceExecutor->completeValue($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'attributes'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'Attributes of the %s Block Type'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class WPGraphQL\Type\WPObjectType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'attributes'; public $returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes'], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f67b69f0199']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:654
[22-Feb-2023 20:30:33 UTC] PHP  35. GraphQL\Executor\ReferenceExecutor->completeObjectValue($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'attributes'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'Attributes of the %s Block Type'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class WPGraphQL\Type\WPObjectType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'attributes'; public $returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes'], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f67b69f0199']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:793
[22-Feb-2023 20:30:33 UTC] PHP  36. GraphQL\Executor\ReferenceExecutor->collectAndExecuteSubfields($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes'], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f67b69f0199']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1106
[22-Feb-2023 20:30:33 UTC] PHP  37. GraphQL\Executor\ReferenceExecutor->executeFields($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f67b69f0199'], $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes'], $fields = class ArrayObject { private $storage = ['borderColor' => class ArrayObject { ... }, 'backgroundColor' => class ArrayObject { ... }, 'content' => class ArrayObject { ... }, 'style' => class ArrayObject { ... }, 'textColor' => class ArrayObject { ... }, 'fontSize' => class ArrayObject { ... }, 'fontFamily' => class ArrayObject { ... }, '__typename' => class ArrayObject { ... }] }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1145
[22-Feb-2023 20:30:33 UTC] PHP  38. GraphQL\Executor\ReferenceExecutor->resolveField($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f67b69f0199'], $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes', 4 => 'content']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1195
[22-Feb-2023 20:30:33 UTC] PHP  39. GraphQL\Executor\ReferenceExecutor->resolveFieldValueOrError($fieldDef = class GraphQL\Type\Definition\FieldDefinition { public $name = 'content'; public $args = []; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", public $static = [...]; public $parameter = [...] }; public $mapFn = NULL; public $description = 'The &quot;content&quot; field on the &quot;CoreCode&quot; block'; public $deprecationReason = NULL; public $astNode = NULL; public $config = ['type' => class Closure { virtual $closure = "$this->WPGraphQL\Registry\{closure}", ... }, 'description' => 'The "content" field on the "CoreCode" block', 'resolve' => class Closure { virtual $closure = "$this->WPGraphQL\ContentBlocks\Blocks\{closure}", ... }, 'name' => 'content']; private $type = class GraphQL\Type\Definition\StringType { public $name = 'String'; public $description = 'The `String` scalar type represents textual data, represented as UTF-8\ncharacter sequences. The String type is most often used by GraphQL to\nrepresent free-form human-readable text.'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }, $fieldNode = class GraphQL\Language\AST\FieldNode { public $loc = class GraphQL\Language\AST\Location { public $start = 629; public $end = 636; public $startToken = class GraphQL\Language\Token { ... }; public $endToken = class GraphQL\Language\Token { ... }; public $source = class GraphQL\Language\Source { ... } }; public $kind = 'Field'; public $name = class GraphQL\Language\AST\NameNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'Name'; public $value = 'content' }; public $alias = NULL; public $arguments = class GraphQL\Language\AST\NodeList { private $nodes = [...] }; public $directives = class GraphQL\Language\AST\NodeList { private $nodes = [...] }; public $selectionSet = NULL }, $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", public $static = ['field_resolver' => class Closure { virtual $closure = "$this->WPGraphQL\ContentBlocks\Blocks\{closure}", ... }, 'type_name' => 'CoreCodeAttributes', 'field_key' => 'content', 'field' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $parameter = ['$source' => '<required>', '$args' => '<required>', '$context' => '<required>', '$info' => '<required>'] }, $rootValue = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f67b69f0199'], $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'content'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'The &quot;content&quot; field on the &quot;CoreCode&quot; block'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\StringType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'content'; public $returnType = class GraphQL\Type\Definition\StringType { public $name = 'String'; public $description = 'The `String` scalar type represents textual data, represented as UTF-8\ncharacter sequences. The String type is most often used by GraphQL to\nrepresent free-form human-readable text.'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes', 4 => 'content']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:550
[22-Feb-2023 20:30:33 UTC] PHP  40. WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure:/Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/src/Utils/InstrumentSchema.php:100-188}($source = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f67b69f0199'], $args = [], $context = class WPGraphQL\AppContext { public $root_url = 'http://localhost:10028'; public $viewer = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] }; public $request = NULL; public $config = ['registered_editor_blocks' => [...]]; public $currentConnection = NULL; public $connectionArgs = []; public $loaders = ['comment_author' => class WPGraphQL\Data\Loader\CommentAuthorLoader { ... }, 'comment' => class WPGraphQL\Data\Loader\CommentLoader { ... }, 'enqueued_script' => class WPGraphQL\Data\Loader\EnqueuedScriptLoader { ... }, 'enqueued_stylesheet' => class WPGraphQL\Data\Loader\EnqueuedStylesheetLoader { ... }, 'plugin' => class WPGraphQL\Data\Loader\PluginLoader { ... }, 'nav_menu_item' => class WPGraphQL\Data\Loader\PostObjectLoader { ... }, 'post' => class WPGraphQL\Data\Loader\PostObjectLoader { ... }, 'post_type' => class WPGraphQL\Data\Loader\PostTypeLoader { ... }, 'taxonomy' => class WPGraphQL\Data\Loader\TaxonomyLoader { ... }, 'term' => class WPGraphQL\Data\Loader\TermObjectLoader { ... }, 'theme' => class WPGraphQL\Data\Loader\ThemeLoader { ... }, 'user' => class WPGraphQL\Data\Loader\UserLoader { ... }, 'user_role' => class WPGraphQL\Data\Loader\UserRoleLoader { ... }]; public $node_resolver = class WPGraphQL\Data\NodeResolver { protected $wp = class WP { ... }; protected $context = ... }; public $connection_query_class = NULL }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'content'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'The &quot;content&quot; field on the &quot;CoreCode&quot; block'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\StringType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'content'; public $returnType = class GraphQL\Type\Definition\StringType { public $name = 'String'; public $description = 'The `String` scalar type represents textual data, represented as UTF-8\ncharacter sequences. The String type is most often used by GraphQL to\nrepresent free-form human-readable text.'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes', 4 => 'content']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:623
[22-Feb-2023 20:30:33 UTC] PHP  41. WPGraphQL\ContentBlocks\Blocks\Block->WPGraphQL\ContentBlocks\Blocks\{closure:/Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql-content-blocks-main/includes/Blocks/Block.php:161-163}($block = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f67b69f0199'], $args = [], $context = class WPGraphQL\AppContext { public $root_url = 'http://localhost:10028'; public $viewer = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] }; public $request = NULL; public $config = ['registered_editor_blocks' => [...]]; public $currentConnection = NULL; public $connectionArgs = []; public $loaders = ['comment_author' => class WPGraphQL\Data\Loader\CommentAuthorLoader { ... }, 'comment' => class WPGraphQL\Data\Loader\CommentLoader { ... }, 'enqueued_script' => class WPGraphQL\Data\Loader\EnqueuedScriptLoader { ... }, 'enqueued_stylesheet' => class WPGraphQL\Data\Loader\EnqueuedStylesheetLoader { ... }, 'plugin' => class WPGraphQL\Data\Loader\PluginLoader { ... }, 'nav_menu_item' => class WPGraphQL\Data\Loader\PostObjectLoader { ... }, 'post' => class WPGraphQL\Data\Loader\PostObjectLoader { ... }, 'post_type' => class WPGraphQL\Data\Loader\PostTypeLoader { ... }, 'taxonomy' => class WPGraphQL\Data\Loader\TaxonomyLoader { ... }, 'term' => class WPGraphQL\Data\Loader\TermObjectLoader { ... }, 'theme' => class WPGraphQL\Data\Loader\ThemeLoader { ... }, 'user' => class WPGraphQL\Data\Loader\UserLoader { ... }, 'user_role' => class WPGraphQL\Data\Loader\UserRoleLoader { ... }]; public $node_resolver = class WPGraphQL\Data\NodeResolver { protected $wp = class WP { ... }; protected $context = ... }; public $connection_query_class = NULL }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'content'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'The &quot;content&quot; field on the &quot;CoreCode&quot; block'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\StringType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'content'; public $returnType = class GraphQL\Type\Definition\StringType { public $name = 'String'; public $description = 'The `String` scalar type represents textual data, represented as UTF-8\ncharacter sequences. The String type is most often used by GraphQL to\nrepresent free-form human-readable text.'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes', 4 => 'content']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/src/Utils/InstrumentSchema.php:151
[22-Feb-2023 20:30:33 UTC] PHP  42. WPGraphQL\ContentBlocks\Blocks\Block->resolve_block_attributes($block = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f67b69f0199'], $attribute_name = 'content', $attribute_config = ['type' => 'string', 'source' => 'html', 'selector' => 'code']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql-content-blocks-main/includes/Blocks/Block.php:162
[22-Feb-2023 20:30:33 UTC] PHP Warning:  Undefined array key "default" in /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql-content-blocks-main/includes/Blocks/Block.php on line 214
[22-Feb-2023 20:30:33 UTC] PHP Stack trace:
[22-Feb-2023 20:30:33 UTC] PHP   1. {main}() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/index.php:0
[22-Feb-2023 20:30:33 UTC] PHP   2. require() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/index.php:17
[22-Feb-2023 20:30:33 UTC] PHP   3. wp($query_vars = *uninitialized*) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-blog-header.php:16
[22-Feb-2023 20:30:33 UTC] PHP   4. WP->main($query_args = '') /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/functions.php:1332
[22-Feb-2023 20:30:33 UTC] PHP   5. WP->parse_request($extra_query_vars = '') /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/class-wp.php:780
[22-Feb-2023 20:30:33 UTC] PHP   6. do_action_ref_array($hook_name = 'parse_request', $args = [0 => class WP { public $public_query_vars = [...]; public $private_query_vars = [...]; public $extra_query_vars = [...]; public $query_vars = [...]; public $query_string = ''; public $request = 'graphql'; public $matched_rule = 'graphql/?$'; public $matched_query = 'graphql=true'; public $did_permalink = TRUE }]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/class-wp.php:399
[22-Feb-2023 20:30:33 UTC] PHP   7. WP_Hook->do_action($args = [0 => class WP { public $public_query_vars = [...]; public $private_query_vars = [...]; public $extra_query_vars = [...]; public $query_vars = [...]; public $query_string = ''; public $request = 'graphql'; public $matched_rule = 'graphql/?$'; public $matched_query = 'graphql=true'; public $did_permalink = TRUE }]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/plugin.php:565
[22-Feb-2023 20:30:33 UTC] PHP   8. WP_Hook->apply_filters($value = '', $args = [0 => class WP { public $public_query_vars = [...]; public $private_query_vars = [...]; public $extra_query_vars = [...]; public $query_vars = [...]; public $query_string = ''; public $request = 'graphql'; public $matched_rule = 'graphql/?$'; public $matched_query = 'graphql=true'; public $did_permalink = TRUE }]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/class-wp-hook.php:332
[22-Feb-2023 20:30:33 UTC] PHP   9. WPGraphQL\Router::resolve_http_request(class WP { public $public_query_vars = [0 => 'm', 1 => 'p', 2 => 'posts', 3 => 'w', 4 => 'cat', 5 => 'withcomments', 6 => 'withoutcomments', 7 => 's', 8 => 'search', 9 => 'exact', 10 => 'sentence', 11 => 'calendar', 12 => 'page', 13 => 'paged', 14 => 'more', 15 => 'tb', 16 => 'pb', 17 => 'author', 18 => 'order', 19 => 'orderby', 20 => 'year', 21 => 'monthnum', 22 => 'day', 23 => 'hour', 24 => 'minute', 25 => 'second', 26 => 'name', 27 => 'category_name', 28 => 'tag', 29 => 'feed', 30 => 'author_name', 31 => 'pagename', 32 => 'page_id', 33 => 'error', 34 => 'attachment', 35 => 'attachment_id', 36 => 'subpost', 37 => 'subpost_id', 38 => 'preview', 39 => 'robots', 40 => 'favicon', 41 => 'taxonomy', 42 => 'term', 43 => 'cpage', 44 => 'post_type', 45 => 'embed', 46 => 'post_format', 47 => 'rest_route', 48 => 'sitemap', 49 => 'sitemap-subtype', 50 => 'sitemap-stylesheet', 51 => 'graphql']; public $private_query_vars = [0 => 'offset', 1 => 'posts_per_page', 2 => 'posts_per_archive_page', 3 => 'showposts', 4 => 'nopaging', 5 => 'post_type', 6 => 'post_status', 7 => 'category__in', 8 => 'category__not_in', 9 => 'category__and', 10 => 'tag__in', 11 => 'tag__not_in', 12 => 'tag__and', 13 => 'tag_slug__in', 14 => 'tag_slug__and', 15 => 'tag_id', 16 => 'post_mime_type', 17 => 'perm', 18 => 'comments_per_page', 19 => 'post__in', 20 => 'post__not_in', 21 => 'post_parent', 22 => 'post_parent__in', 23 => 'post_parent__not_in', 24 => 'title', 25 => 'fields']; public $extra_query_vars = []; public $query_vars = ['graphql' => 'true']; public $query_string = ''; public $request = 'graphql'; public $matched_rule = 'graphql/?$'; public $matched_query = 'graphql=true'; public $did_permalink = TRUE }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/class-wp-hook.php:308
[22-Feb-2023 20:30:33 UTC] PHP  10. WPGraphQL\Router::process_http_request() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/src/Router.php:275
[22-Feb-2023 20:30:33 UTC] PHP  11. WPGraphQL\Request->execute_http() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/src/Router.php:481
[22-Feb-2023 20:30:33 UTC] PHP  12. GraphQL\Server\StandardServer->executeRequest($parsedBody = class GraphQL\Server\OperationParams { public $queryId = NULL; public $query = 'fragment BlogInfoFragment on GeneralSettings {\n  title\n  description\n  __typename\n}\n\nfragment NavigationMenuItemFragment on MenuItem {\n  id\n  path\n  label\n  parentId\n  cssClasses\n  menu {\n    node {\n      name\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment FeaturedImageFragment on NodeWithFeaturedImage {\n  featuredImage {\n    node {\n      id\n      sourceUrl\n      altText\n      mediaDetails {\n        width\n        height\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }'...; public $operation = 'GetPost'; public $variables = ['asPreview' => TRUE, 'databaseId' => 5, 'headerLocation' => 'PRIMARY', 'footerLocation' => 'FOOTER']; public $extensions = NULL; private $originalInput = ['operationname' => 'GetPost', 'variables' => [...], 'query' => 'fragment BlogInfoFragment on GeneralSettings {\n  title\n  description\n  __typename\n}\n\nfragment NavigationMenuItemFragment on MenuItem {\n  id\n  path\n  label\n  parentId\n  cssClasses\n  menu {\n    node {\n      name\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment FeaturedImageFragment on NodeWithFeaturedImage {\n  featuredImage {\n    node {\n      id\n      sourceUrl\n      altText\n      mediaDetails {\n        width\n        height\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }'...]; private $readOnly = FALSE }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/src/Request.php:713
[22-Feb-2023 20:30:33 UTC] PHP  13. GraphQL\Server\Helper->executeOperation($config = class GraphQL\Server\ServerConfig { private $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; private $context = class WPGraphQL\AppContext { public $root_url = 'http://localhost:10028'; public $viewer = class WP_User { ... }; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... }; public $request = NULL; public $config = [...]; public $currentConnection = NULL; public $connectionArgs = [...]; public $loaders = [...]; public $node_resolver = class WPGraphQL\Data\NodeResolver { ... }; public $connection_query_class = NULL }; private $rootValue = NULL; private $errorFormatter = NULL; private $errorsHandler = NULL; private $debugFlag = 0; private $queryBatching = TRUE; private $validationRules = [0 => class GraphQL\Validator\Rules\ExecutableDefinitions { ... }, 1 => class GraphQL\Validator\Rules\UniqueOperationNames { ... }, 2 => class GraphQL\Validator\Rules\LoneAnonymousOperation { ... }, 3 => class GraphQL\Validator\Rules\SingleFieldSubscription { ... }, 4 => class GraphQL\Validator\Rules\KnownTypeNames { ... }, 5 => class GraphQL\Validator\Rules\FragmentsOnCompositeTypes { ... }, 6 => class GraphQL\Validator\Rules\VariablesAreInputTypes { ... }, 7 => class GraphQL\Validator\Rules\ScalarLeafs { ... }, 8 => class GraphQL\Validator\Rules\FieldsOnCorrectType { ... }, 9 => class GraphQL\Validator\Rules\UniqueFragmentNames { ... }, 10 => class GraphQL\Validator\Rules\KnownFragmentNames { ... }, 11 => class GraphQL\Validator\Rules\NoUnusedFragments { ... }, 12 => class GraphQL\Validator\Rules\PossibleFragmentSpreads { ... }, 13 => class GraphQL\Validator\Rules\NoFragmentCycles { ... }, 14 => class GraphQL\Validator\Rules\UniqueVariableNames { ... }, 15 => class GraphQL\Validator\Rules\NoUndefinedVariables { ... }, 16 => class GraphQL\Validator\Rules\NoUnusedVariables { ... }, 17 => class GraphQL\Validator\Rules\KnownDirectives { ... }, 18 => class GraphQL\Validator\Rules\UniqueDirectivesPerLocation { ... }, 19 => class GraphQL\Validator\Rules\KnownArgumentNames { ... }, 20 => class GraphQL\Validator\Rules\UniqueArgumentNames { ... }, 21 => class GraphQL\Validator\Rules\ValuesOfCorrectType { ... }, 22 => class GraphQL\Validator\Rules\ProvidedRequiredArguments { ... }, 23 => class GraphQL\Validator\Rules\VariablesInAllowedPosition { ... }, 24 => class GraphQL\Validator\Rules\OverlappingFieldsCanBeMerged { ... }, 25 => class GraphQL\Validator\Rules\UniqueInputFieldNames { ... }, 'require_authentication' => class WPGraphQL\Server\ValidationRules\RequireAuthentication { ... }, 'disable_introspection' => class WPGraphQL\Server\ValidationRules\DisableIntrospection { ... }, 'query_depth' => class WPGraphQL\Server\ValidationRules\QueryDepth { ... }]; private $fieldResolver = NULL; private $promiseAdapter = NULL; private $persistentQueryLoader = NULL }, $op = class GraphQL\Server\OperationParams { public $queryId = NULL; public $query = 'fragment BlogInfoFragment on GeneralSettings {\n  title\n  description\n  __typename\n}\n\nfragment NavigationMenuItemFragment on MenuItem {\n  id\n  path\n  label\n  parentId\n  cssClasses\n  menu {\n    node {\n      name\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment FeaturedImageFragment on NodeWithFeaturedImage {\n  featuredImage {\n    node {\n      id\n      sourceUrl\n      altText\n      mediaDetails {\n        width\n        height\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }'...; public $operation = 'GetPost'; public $variables = ['asPreview' => TRUE, 'databaseId' => 5, 'headerLocation' => 'PRIMARY', 'footerLocation' => 'FOOTER']; public $extensions = NULL; private $originalInput = ['operationname' => 'GetPost', 'variables' => [...], 'query' => 'fragment BlogInfoFragment on GeneralSettings {\n  title\n  description\n  __typename\n}\n\nfragment NavigationMenuItemFragment on MenuItem {\n  id\n  path\n  label\n  parentId\n  cssClasses\n  menu {\n    node {\n      name\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment FeaturedImageFragment on NodeWithFeaturedImage {\n  featuredImage {\n    node {\n      id\n      sourceUrl\n      altText\n      mediaDetails {\n        width\n        height\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }'...]; private $readOnly = FALSE }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Server/StandardServer.php:136
[22-Feb-2023 20:30:33 UTC] PHP  14. GraphQL\Executor\Promise\Adapter\SyncPromiseAdapter->wait($promise = class GraphQL\Executor\Promise\Promise { public $adoptedPromise = class GraphQL\Executor\Promise\Adapter\SyncPromise { public $state = 'pending'; public $result = NULL; private $waiting = [...] }; private $adapter = class GraphQL\Executor\Promise\Adapter\SyncPromiseAdapter {  } }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Server/Helper.php:214
[22-Feb-2023 20:30:33 UTC] PHP  15. GraphQL\Executor\Promise\Adapter\SyncPromise::runQueue() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/Promise/Adapter/SyncPromiseAdapter.php:149
[22-Feb-2023 20:30:33 UTC] PHP  16. GraphQL\Executor\Promise\Adapter\SyncPromise->GraphQL\Executor\Promise\Adapter\{closure:/Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/Promise/Adapter/SyncPromise.php:142-163}() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/Promise/Adapter/SyncPromise.php:53
[22-Feb-2023 20:30:33 UTC] PHP  17. GraphQL\Executor\ReferenceExecutor->GraphQL\Executor\{closure:/Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:650-652}($resolved = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/Promise/Adapter/SyncPromise.php:148
[22-Feb-2023 20:30:33 UTC] PHP  18. GraphQL\Executor\ReferenceExecutor->completeValue($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = ['description' => 'The post type', 'connections' => [...], 'interfaces' => [...], 'fields' => [...], 'model' => 'WPGraphQL\\Model\\Post', 'kind' => 'object', 'name' => 'Post']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['author' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'categories' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentCount' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'comments' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'conditionalTags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentType' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentTypeName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'databaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'date' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'dateGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'desiredSlug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'editingLockedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enclosure' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedScripts' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedStylesheets' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'excerpt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImage' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'guid' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'id' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isContentNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isPreview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRestricted' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRevision' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isSticky' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isTermNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lastEditedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'link' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modified' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modifiedGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pingStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pinged' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postFormats' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'preview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisionOf' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisions' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'slug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'status' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'tags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'template' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'templates' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'terms' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'title' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'toPing' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'uri' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['Node' => class WPGraphQL\Type\WPInterfaceType { ... }, 'ContentNode' => class WPGraphQL\Type\WPInterfaceType { ... }, 'UniformResourceIdentifiable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'DatabaseIdentifier' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTemplate' => class WPGraphQL\Type\WPInterfaceType { ... }, 'Previewable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTitle' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentEditor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithAuthor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithFeaturedImage' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithExcerpt' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithComments' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTrackbacks' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithRevisions' => class WPGraphQL\Type\WPInterfaceType { ... }, 'MenuItemLinkable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentBlocks' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'post'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'An object of the post Type. '; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class WPGraphQL\Type\WPObjectType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'post'; public $returnType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'RootQuery'; public $description = 'The root entry point into the Graph'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post'], $result = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:651
[22-Feb-2023 20:30:33 UTC] PHP  19. GraphQL\Executor\ReferenceExecutor->completeObjectValue($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = ['description' => 'The post type', 'connections' => [...], 'interfaces' => [...], 'fields' => [...], 'model' => 'WPGraphQL\\Model\\Post', 'kind' => 'object', 'name' => 'Post']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['author' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'categories' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentCount' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'comments' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'conditionalTags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentType' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentTypeName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'databaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'date' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'dateGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'desiredSlug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'editingLockedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enclosure' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedScripts' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedStylesheets' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'excerpt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImage' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'guid' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'id' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isContentNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isPreview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRestricted' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRevision' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isSticky' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isTermNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lastEditedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'link' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modified' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modifiedGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pingStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pinged' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postFormats' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'preview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisionOf' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisions' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'slug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'status' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'tags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'template' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'templates' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'terms' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'title' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'toPing' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'uri' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['Node' => class WPGraphQL\Type\WPInterfaceType { ... }, 'ContentNode' => class WPGraphQL\Type\WPInterfaceType { ... }, 'UniformResourceIdentifiable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'DatabaseIdentifier' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTemplate' => class WPGraphQL\Type\WPInterfaceType { ... }, 'Previewable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTitle' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentEditor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithAuthor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithFeaturedImage' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithExcerpt' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithComments' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTrackbacks' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithRevisions' => class WPGraphQL\Type\WPInterfaceType { ... }, 'MenuItemLinkable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentBlocks' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'post'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'An object of the post Type. '; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class WPGraphQL\Type\WPObjectType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'post'; public $returnType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'RootQuery'; public $description = 'The root entry point into the Graph'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post'], $result = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:793
[22-Feb-2023 20:30:33 UTC] PHP  20. GraphQL\Executor\ReferenceExecutor->collectAndExecuteSubfields($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = ['description' => 'The post type', 'connections' => [...], 'interfaces' => [...], 'fields' => [...], 'model' => 'WPGraphQL\\Model\\Post', 'kind' => 'object', 'name' => 'Post']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['author' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'categories' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentCount' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'comments' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'conditionalTags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentType' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentTypeName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'databaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'date' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'dateGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'desiredSlug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'editingLockedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enclosure' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedScripts' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedStylesheets' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'excerpt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImage' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'guid' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'id' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isContentNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isPreview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRestricted' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRevision' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isSticky' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isTermNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lastEditedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'link' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modified' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modifiedGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pingStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pinged' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postFormats' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'preview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisionOf' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisions' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'slug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'status' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'tags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'template' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'templates' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'terms' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'title' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'toPing' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'uri' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['Node' => class WPGraphQL\Type\WPInterfaceType { ... }, 'ContentNode' => class WPGraphQL\Type\WPInterfaceType { ... }, 'UniformResourceIdentifiable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'DatabaseIdentifier' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTemplate' => class WPGraphQL\Type\WPInterfaceType { ... }, 'Previewable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTitle' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentEditor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithAuthor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithFeaturedImage' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithExcerpt' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithComments' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTrackbacks' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithRevisions' => class WPGraphQL\Type\WPInterfaceType { ... }, 'MenuItemLinkable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentBlocks' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post'], $result = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1106
[22-Feb-2023 20:30:33 UTC] PHP  21. GraphQL\Executor\ReferenceExecutor->executeFields($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = ['description' => 'The post type', 'connections' => [...], 'interfaces' => [...], 'fields' => [...], 'model' => 'WPGraphQL\\Model\\Post', 'kind' => 'object', 'name' => 'Post']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['author' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'categories' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentCount' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'comments' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'conditionalTags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentType' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentTypeName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'databaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'date' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'dateGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'desiredSlug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'editingLockedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enclosure' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedScripts' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedStylesheets' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'excerpt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImage' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'guid' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'id' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isContentNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isPreview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRestricted' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRevision' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isSticky' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isTermNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lastEditedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'link' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modified' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modifiedGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pingStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pinged' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postFormats' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'preview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisionOf' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisions' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'slug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'status' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'tags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'template' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'templates' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'terms' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'title' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'toPing' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'uri' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['Node' => class WPGraphQL\Type\WPInterfaceType { ... }, 'ContentNode' => class WPGraphQL\Type\WPInterfaceType { ... }, 'UniformResourceIdentifiable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'DatabaseIdentifier' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTemplate' => class WPGraphQL\Type\WPInterfaceType { ... }, 'Previewable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTitle' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentEditor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithAuthor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithFeaturedImage' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithExcerpt' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithComments' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTrackbacks' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithRevisions' => class WPGraphQL\Type\WPInterfaceType { ... }, 'MenuItemLinkable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentBlocks' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }, $path = [0 => 'post'], $fields = class ArrayObject { private $storage = ['title' => class ArrayObject { ... }, 'content' => class ArrayObject { ... }, 'date' => class ArrayObject { ... }, 'author' => class ArrayObject { ... }, 'featuredImage' => class ArrayObject { ... }, '__typename' => class ArrayObject { ... }, 'contentBlocks' => class ArrayObject { ... }] }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1145
[22-Feb-2023 20:30:33 UTC] PHP  22. GraphQL\Executor\ReferenceExecutor->resolveField($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = ['description' => 'The post type', 'connections' => [...], 'interfaces' => [...], 'fields' => [...], 'model' => 'WPGraphQL\\Model\\Post', 'kind' => 'object', 'name' => 'Post']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['author' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'categories' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentCount' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'comments' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'conditionalTags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentType' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentTypeName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'databaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'date' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'dateGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'desiredSlug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'editingLockedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enclosure' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedScripts' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedStylesheets' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'excerpt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImage' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'guid' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'id' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isContentNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isPreview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRestricted' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRevision' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isSticky' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isTermNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lastEditedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'link' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modified' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modifiedGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pingStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pinged' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postFormats' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'preview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisionOf' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisions' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'slug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'status' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'tags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'template' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'templates' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'terms' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'title' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'toPing' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'uri' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['Node' => class WPGraphQL\Type\WPInterfaceType { ... }, 'ContentNode' => class WPGraphQL\Type\WPInterfaceType { ... }, 'UniformResourceIdentifiable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'DatabaseIdentifier' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTemplate' => class WPGraphQL\Type\WPInterfaceType { ... }, 'Previewable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTitle' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentEditor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithAuthor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithFeaturedImage' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithExcerpt' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithComments' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTrackbacks' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithRevisions' => class WPGraphQL\Type\WPInterfaceType { ... }, 'MenuItemLinkable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentBlocks' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post', 1 => 'contentBlocks']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1195
[22-Feb-2023 20:30:33 UTC] PHP  23. GraphQL\Executor\ReferenceExecutor->completeValueCatchingError($returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks'], $result = [0 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f67b69f0199'], 2 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f67b69f019b']]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:557
[22-Feb-2023 20:30:33 UTC] PHP  24. GraphQL\Executor\ReferenceExecutor->completeValue($returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks'], $result = [0 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f67b69f0199'], 2 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f67b69f019b']]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:654
[22-Feb-2023 20:30:33 UTC] PHP  25. GraphQL\Executor\ReferenceExecutor->completeListValue($returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks'], $results = [0 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f67b69f0199'], 2 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f67b69f019b']]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:761
[22-Feb-2023 20:30:33 UTC] PHP  26. GraphQL\Executor\ReferenceExecutor->completeValueCatchingError($returnType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = ['eagerlyLoadType' => TRUE, 'description' => 'Blocks that can be edited to create content and layouts', 'fields' => [...], 'resolveType' => class Closure { virtual $closure = "$this->WPGraphQL\Type\{closure}", ... }, 'kind' => 'interface', 'name' => 'ContentBlock']; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = []; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f67b69f019b']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:887
[22-Feb-2023 20:30:33 UTC] PHP  27. GraphQL\Executor\ReferenceExecutor->completeValue($returnType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = ['eagerlyLoadType' => TRUE, 'description' => 'Blocks that can be edited to create content and layouts', 'fields' => [...], 'resolveType' => class Closure { virtual $closure = "$this->WPGraphQL\Type\{closure}", ... }, 'kind' => 'interface', 'name' => 'ContentBlock']; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = []; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f67b69f019b']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:654
[22-Feb-2023 20:30:33 UTC] PHP  28. GraphQL\Executor\ReferenceExecutor->completeAbstractValue($returnType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = ['eagerlyLoadType' => TRUE, 'description' => 'Blocks that can be edited to create content and layouts', 'fields' => [...], 'resolveType' => class Closure { virtual $closure = "$this->WPGraphQL\Type\{closure}", ... }, 'kind' => 'interface', 'name' => 'ContentBlock']; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = []; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f67b69f019b']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:789
[22-Feb-2023 20:30:33 UTC] PHP  29. GraphQL\Executor\ReferenceExecutor->completeObjectValue($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = ['description' => 'A block used for editing the site', 'interfaces' => [...], 'eagerlyLoadType' => TRUE, 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCode']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'attributes' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['ContentBlock' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f67b69f019b']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:974
[22-Feb-2023 20:30:33 UTC] PHP  30. GraphQL\Executor\ReferenceExecutor->collectAndExecuteSubfields($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = ['description' => 'A block used for editing the site', 'interfaces' => [...], 'eagerlyLoadType' => TRUE, 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCode']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'attributes' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['ContentBlock' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f67b69f019b']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1106
[22-Feb-2023 20:30:33 UTC] PHP  31. GraphQL\Executor\ReferenceExecutor->executeFields($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = ['description' => 'A block used for editing the site', 'interfaces' => [...], 'eagerlyLoadType' => TRUE, 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCode']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'attributes' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['ContentBlock' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f67b69f019b'], $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1], $fields = class ArrayObject { private $storage = ['__typename' => class ArrayObject { ... }, 'renderedHtml' => class ArrayObject { ... }, 'id' => class ArrayObject { ... }, 'parentId' => class ArrayObject { ... }, 'attributes' => class ArrayObject { ... }] }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1145
[22-Feb-2023 20:30:33 UTC] PHP  32. GraphQL\Executor\ReferenceExecutor->resolveField($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = ['description' => 'A block used for editing the site', 'interfaces' => [...], 'eagerlyLoadType' => TRUE, 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCode']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'attributes' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['ContentBlock' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f67b69f019b'], $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1195
[22-Feb-2023 20:30:33 UTC] PHP  33. GraphQL\Executor\ReferenceExecutor->completeValueCatchingError($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'attributes'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'Attributes of the %s Block Type'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class WPGraphQL\Type\WPObjectType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'attributes'; public $returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes'], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f67b69f019b']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:557
[22-Feb-2023 20:30:33 UTC] PHP  34. GraphQL\Executor\ReferenceExecutor->completeValue($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'attributes'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'Attributes of the %s Block Type'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class WPGraphQL\Type\WPObjectType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'attributes'; public $returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes'], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f67b69f019b']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:654
[22-Feb-2023 20:30:33 UTC] PHP  35. GraphQL\Executor\ReferenceExecutor->completeObjectValue($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'attributes'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'Attributes of the %s Block Type'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class WPGraphQL\Type\WPObjectType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'attributes'; public $returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes'], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f67b69f019b']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:793
[22-Feb-2023 20:30:33 UTC] PHP  36. GraphQL\Executor\ReferenceExecutor->collectAndExecuteSubfields($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes'], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f67b69f019b']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1106
[22-Feb-2023 20:30:33 UTC] PHP  37. GraphQL\Executor\ReferenceExecutor->executeFields($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f67b69f019b'], $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes'], $fields = class ArrayObject { private $storage = ['borderColor' => class ArrayObject { ... }, 'backgroundColor' => class ArrayObject { ... }, 'content' => class ArrayObject { ... }, 'style' => class ArrayObject { ... }, 'textColor' => class ArrayObject { ... }, 'fontSize' => class ArrayObject { ... }, 'fontFamily' => class ArrayObject { ... }, '__typename' => class ArrayObject { ... }] }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1145
[22-Feb-2023 20:30:33 UTC] PHP  38. GraphQL\Executor\ReferenceExecutor->resolveField($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f67b69f019b'], $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes', 4 => 'content']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1195
[22-Feb-2023 20:30:34 UTC] PHP  39. GraphQL\Executor\ReferenceExecutor->resolveFieldValueOrError($fieldDef = class GraphQL\Type\Definition\FieldDefinition { public $name = 'content'; public $args = []; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", public $static = [...]; public $parameter = [...] }; public $mapFn = NULL; public $description = 'The &quot;content&quot; field on the &quot;CoreCode&quot; block'; public $deprecationReason = NULL; public $astNode = NULL; public $config = ['type' => class Closure { virtual $closure = "$this->WPGraphQL\Registry\{closure}", ... }, 'description' => 'The "content" field on the "CoreCode" block', 'resolve' => class Closure { virtual $closure = "$this->WPGraphQL\ContentBlocks\Blocks\{closure}", ... }, 'name' => 'content']; private $type = class GraphQL\Type\Definition\StringType { public $name = 'String'; public $description = 'The `String` scalar type represents textual data, represented as UTF-8\ncharacter sequences. The String type is most often used by GraphQL to\nrepresent free-form human-readable text.'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }, $fieldNode = class GraphQL\Language\AST\FieldNode { public $loc = class GraphQL\Language\AST\Location { public $start = 629; public $end = 636; public $startToken = class GraphQL\Language\Token { ... }; public $endToken = class GraphQL\Language\Token { ... }; public $source = class GraphQL\Language\Source { ... } }; public $kind = 'Field'; public $name = class GraphQL\Language\AST\NameNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'Name'; public $value = 'content' }; public $alias = NULL; public $arguments = class GraphQL\Language\AST\NodeList { private $nodes = [...] }; public $directives = class GraphQL\Language\AST\NodeList { private $nodes = [...] }; public $selectionSet = NULL }, $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", public $static = ['field_resolver' => class Closure { virtual $closure = "$this->WPGraphQL\ContentBlocks\Blocks\{closure}", ... }, 'type_name' => 'CoreCodeAttributes', 'field_key' => 'content', 'field' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $parameter = ['$source' => '<required>', '$args' => '<required>', '$context' => '<required>', '$info' => '<required>'] }, $rootValue = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f67b69f019b'], $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'content'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'The &quot;content&quot; field on the &quot;CoreCode&quot; block'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\StringType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'content'; public $returnType = class GraphQL\Type\Definition\StringType { public $name = 'String'; public $description = 'The `String` scalar type represents textual data, represented as UTF-8\ncharacter sequences. The String type is most often used by GraphQL to\nrepresent free-form human-readable text.'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes', 4 => 'content']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:550
[22-Feb-2023 20:30:34 UTC] PHP  40. WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure:/Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/src/Utils/InstrumentSchema.php:100-188}($source = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f67b69f019b'], $args = [], $context = class WPGraphQL\AppContext { public $root_url = 'http://localhost:10028'; public $viewer = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] }; public $request = NULL; public $config = ['registered_editor_blocks' => [...]]; public $currentConnection = NULL; public $connectionArgs = []; public $loaders = ['comment_author' => class WPGraphQL\Data\Loader\CommentAuthorLoader { ... }, 'comment' => class WPGraphQL\Data\Loader\CommentLoader { ... }, 'enqueued_script' => class WPGraphQL\Data\Loader\EnqueuedScriptLoader { ... }, 'enqueued_stylesheet' => class WPGraphQL\Data\Loader\EnqueuedStylesheetLoader { ... }, 'plugin' => class WPGraphQL\Data\Loader\PluginLoader { ... }, 'nav_menu_item' => class WPGraphQL\Data\Loader\PostObjectLoader { ... }, 'post' => class WPGraphQL\Data\Loader\PostObjectLoader { ... }, 'post_type' => class WPGraphQL\Data\Loader\PostTypeLoader { ... }, 'taxonomy' => class WPGraphQL\Data\Loader\TaxonomyLoader { ... }, 'term' => class WPGraphQL\Data\Loader\TermObjectLoader { ... }, 'theme' => class WPGraphQL\Data\Loader\ThemeLoader { ... }, 'user' => class WPGraphQL\Data\Loader\UserLoader { ... }, 'user_role' => class WPGraphQL\Data\Loader\UserRoleLoader { ... }]; public $node_resolver = class WPGraphQL\Data\NodeResolver { protected $wp = class WP { ... }; protected $context = ... }; public $connection_query_class = NULL }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'content'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'The &quot;content&quot; field on the &quot;CoreCode&quot; block'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\StringType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'content'; public $returnType = class GraphQL\Type\Definition\StringType { public $name = 'String'; public $description = 'The `String` scalar type represents textual data, represented as UTF-8\ncharacter sequences. The String type is most often used by GraphQL to\nrepresent free-form human-readable text.'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes', 4 => 'content']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:623
[22-Feb-2023 20:30:34 UTC] PHP  41. WPGraphQL\ContentBlocks\Blocks\Block->WPGraphQL\ContentBlocks\Blocks\{closure:/Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql-content-blocks-main/includes/Blocks/Block.php:161-163}($block = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f67b69f019b'], $args = [], $context = class WPGraphQL\AppContext { public $root_url = 'http://localhost:10028'; public $viewer = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] }; public $request = NULL; public $config = ['registered_editor_blocks' => [...]]; public $currentConnection = NULL; public $connectionArgs = []; public $loaders = ['comment_author' => class WPGraphQL\Data\Loader\CommentAuthorLoader { ... }, 'comment' => class WPGraphQL\Data\Loader\CommentLoader { ... }, 'enqueued_script' => class WPGraphQL\Data\Loader\EnqueuedScriptLoader { ... }, 'enqueued_stylesheet' => class WPGraphQL\Data\Loader\EnqueuedStylesheetLoader { ... }, 'plugin' => class WPGraphQL\Data\Loader\PluginLoader { ... }, 'nav_menu_item' => class WPGraphQL\Data\Loader\PostObjectLoader { ... }, 'post' => class WPGraphQL\Data\Loader\PostObjectLoader { ... }, 'post_type' => class WPGraphQL\Data\Loader\PostTypeLoader { ... }, 'taxonomy' => class WPGraphQL\Data\Loader\TaxonomyLoader { ... }, 'term' => class WPGraphQL\Data\Loader\TermObjectLoader { ... }, 'theme' => class WPGraphQL\Data\Loader\ThemeLoader { ... }, 'user' => class WPGraphQL\Data\Loader\UserLoader { ... }, 'user_role' => class WPGraphQL\Data\Loader\UserRoleLoader { ... }]; public $node_resolver = class WPGraphQL\Data\NodeResolver { protected $wp = class WP { ... }; protected $context = ... }; public $connection_query_class = NULL }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'content'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'The &quot;content&quot; field on the &quot;CoreCode&quot; block'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\StringType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'content'; public $returnType = class GraphQL\Type\Definition\StringType { public $name = 'String'; public $description = 'The `String` scalar type represents textual data, represented as UTF-8\ncharacter sequences. The String type is most often used by GraphQL to\nrepresent free-form human-readable text.'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes', 4 => 'content']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/src/Utils/InstrumentSchema.php:151
[22-Feb-2023 20:30:34 UTC] PHP  42. WPGraphQL\ContentBlocks\Blocks\Block->resolve_block_attributes($block = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f67b69f019b'], $attribute_name = 'content', $attribute_config = ['type' => 'string', 'source' => 'html', 'selector' => 'code']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql-content-blocks-main/includes/Blocks/Block.php:162
[23-Feb-2023 00:45:39 UTC] PHP Warning:  Undefined array key "default" in /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql-content-blocks-main/includes/Blocks/Block.php on line 214
[23-Feb-2023 00:45:39 UTC] PHP Stack trace:
[23-Feb-2023 00:45:39 UTC] PHP   1. {main}() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/index.php:0
[23-Feb-2023 00:45:39 UTC] PHP   2. require() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/index.php:17
[23-Feb-2023 00:45:39 UTC] PHP   3. wp($query_vars = *uninitialized*) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-blog-header.php:16
[23-Feb-2023 00:45:39 UTC] PHP   4. WP->main($query_args = '') /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/functions.php:1332
[23-Feb-2023 00:45:39 UTC] PHP   5. WP->parse_request($extra_query_vars = '') /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/class-wp.php:780
[23-Feb-2023 00:45:39 UTC] PHP   6. do_action_ref_array($hook_name = 'parse_request', $args = [0 => class WP { public $public_query_vars = [...]; public $private_query_vars = [...]; public $extra_query_vars = [...]; public $query_vars = [...]; public $query_string = ''; public $request = 'graphql'; public $matched_rule = 'graphql/?$'; public $matched_query = 'graphql=true'; public $did_permalink = TRUE }]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/class-wp.php:399
[23-Feb-2023 00:45:39 UTC] PHP   7. WP_Hook->do_action($args = [0 => class WP { public $public_query_vars = [...]; public $private_query_vars = [...]; public $extra_query_vars = [...]; public $query_vars = [...]; public $query_string = ''; public $request = 'graphql'; public $matched_rule = 'graphql/?$'; public $matched_query = 'graphql=true'; public $did_permalink = TRUE }]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/plugin.php:565
[23-Feb-2023 00:45:39 UTC] PHP   8. WP_Hook->apply_filters($value = '', $args = [0 => class WP { public $public_query_vars = [...]; public $private_query_vars = [...]; public $extra_query_vars = [...]; public $query_vars = [...]; public $query_string = ''; public $request = 'graphql'; public $matched_rule = 'graphql/?$'; public $matched_query = 'graphql=true'; public $did_permalink = TRUE }]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/class-wp-hook.php:332
[23-Feb-2023 00:45:39 UTC] PHP   9. WPGraphQL\Router::resolve_http_request(class WP { public $public_query_vars = [0 => 'm', 1 => 'p', 2 => 'posts', 3 => 'w', 4 => 'cat', 5 => 'withcomments', 6 => 'withoutcomments', 7 => 's', 8 => 'search', 9 => 'exact', 10 => 'sentence', 11 => 'calendar', 12 => 'page', 13 => 'paged', 14 => 'more', 15 => 'tb', 16 => 'pb', 17 => 'author', 18 => 'order', 19 => 'orderby', 20 => 'year', 21 => 'monthnum', 22 => 'day', 23 => 'hour', 24 => 'minute', 25 => 'second', 26 => 'name', 27 => 'category_name', 28 => 'tag', 29 => 'feed', 30 => 'author_name', 31 => 'pagename', 32 => 'page_id', 33 => 'error', 34 => 'attachment', 35 => 'attachment_id', 36 => 'subpost', 37 => 'subpost_id', 38 => 'preview', 39 => 'robots', 40 => 'favicon', 41 => 'taxonomy', 42 => 'term', 43 => 'cpage', 44 => 'post_type', 45 => 'embed', 46 => 'post_format', 47 => 'rest_route', 48 => 'sitemap', 49 => 'sitemap-subtype', 50 => 'sitemap-stylesheet', 51 => 'graphql']; public $private_query_vars = [0 => 'offset', 1 => 'posts_per_page', 2 => 'posts_per_archive_page', 3 => 'showposts', 4 => 'nopaging', 5 => 'post_type', 6 => 'post_status', 7 => 'category__in', 8 => 'category__not_in', 9 => 'category__and', 10 => 'tag__in', 11 => 'tag__not_in', 12 => 'tag__and', 13 => 'tag_slug__in', 14 => 'tag_slug__and', 15 => 'tag_id', 16 => 'post_mime_type', 17 => 'perm', 18 => 'comments_per_page', 19 => 'post__in', 20 => 'post__not_in', 21 => 'post_parent', 22 => 'post_parent__in', 23 => 'post_parent__not_in', 24 => 'title', 25 => 'fields']; public $extra_query_vars = []; public $query_vars = ['graphql' => 'true']; public $query_string = ''; public $request = 'graphql'; public $matched_rule = 'graphql/?$'; public $matched_query = 'graphql=true'; public $did_permalink = TRUE }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/class-wp-hook.php:308
[23-Feb-2023 00:45:39 UTC] PHP  10. WPGraphQL\Router::process_http_request() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/src/Router.php:275
[23-Feb-2023 00:45:39 UTC] PHP  11. WPGraphQL\Request->execute_http() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/src/Router.php:481
[23-Feb-2023 00:45:39 UTC] PHP  12. GraphQL\Server\StandardServer->executeRequest($parsedBody = class GraphQL\Server\OperationParams { public $queryId = NULL; public $query = 'fragment BlogInfoFragment on GeneralSettings {\n  title\n  description\n  __typename\n}\n\nfragment NavigationMenuItemFragment on MenuItem {\n  id\n  path\n  label\n  parentId\n  cssClasses\n  menu {\n    node {\n      name\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment FeaturedImageFragment on NodeWithFeaturedImage {\n  featuredImage {\n    node {\n      id\n      sourceUrl\n      altText\n      mediaDetails {\n        width\n        height\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }'...; public $operation = 'GetPost'; public $variables = ['asPreview' => TRUE, 'databaseId' => 5, 'headerLocation' => 'PRIMARY', 'footerLocation' => 'FOOTER']; public $extensions = NULL; private $originalInput = ['operationname' => 'GetPost', 'variables' => [...], 'query' => 'fragment BlogInfoFragment on GeneralSettings {\n  title\n  description\n  __typename\n}\n\nfragment NavigationMenuItemFragment on MenuItem {\n  id\n  path\n  label\n  parentId\n  cssClasses\n  menu {\n    node {\n      name\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment FeaturedImageFragment on NodeWithFeaturedImage {\n  featuredImage {\n    node {\n      id\n      sourceUrl\n      altText\n      mediaDetails {\n        width\n        height\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }'...]; private $readOnly = FALSE }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/src/Request.php:713
[23-Feb-2023 00:45:39 UTC] PHP  13. GraphQL\Server\Helper->executeOperation($config = class GraphQL\Server\ServerConfig { private $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; private $context = class WPGraphQL\AppContext { public $root_url = 'http://localhost:10028'; public $viewer = class WP_User { ... }; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... }; public $request = NULL; public $config = [...]; public $currentConnection = NULL; public $connectionArgs = [...]; public $loaders = [...]; public $node_resolver = class WPGraphQL\Data\NodeResolver { ... }; public $connection_query_class = NULL }; private $rootValue = NULL; private $errorFormatter = NULL; private $errorsHandler = NULL; private $debugFlag = 0; private $queryBatching = TRUE; private $validationRules = [0 => class GraphQL\Validator\Rules\ExecutableDefinitions { ... }, 1 => class GraphQL\Validator\Rules\UniqueOperationNames { ... }, 2 => class GraphQL\Validator\Rules\LoneAnonymousOperation { ... }, 3 => class GraphQL\Validator\Rules\SingleFieldSubscription { ... }, 4 => class GraphQL\Validator\Rules\KnownTypeNames { ... }, 5 => class GraphQL\Validator\Rules\FragmentsOnCompositeTypes { ... }, 6 => class GraphQL\Validator\Rules\VariablesAreInputTypes { ... }, 7 => class GraphQL\Validator\Rules\ScalarLeafs { ... }, 8 => class GraphQL\Validator\Rules\FieldsOnCorrectType { ... }, 9 => class GraphQL\Validator\Rules\UniqueFragmentNames { ... }, 10 => class GraphQL\Validator\Rules\KnownFragmentNames { ... }, 11 => class GraphQL\Validator\Rules\NoUnusedFragments { ... }, 12 => class GraphQL\Validator\Rules\PossibleFragmentSpreads { ... }, 13 => class GraphQL\Validator\Rules\NoFragmentCycles { ... }, 14 => class GraphQL\Validator\Rules\UniqueVariableNames { ... }, 15 => class GraphQL\Validator\Rules\NoUndefinedVariables { ... }, 16 => class GraphQL\Validator\Rules\NoUnusedVariables { ... }, 17 => class GraphQL\Validator\Rules\KnownDirectives { ... }, 18 => class GraphQL\Validator\Rules\UniqueDirectivesPerLocation { ... }, 19 => class GraphQL\Validator\Rules\KnownArgumentNames { ... }, 20 => class GraphQL\Validator\Rules\UniqueArgumentNames { ... }, 21 => class GraphQL\Validator\Rules\ValuesOfCorrectType { ... }, 22 => class GraphQL\Validator\Rules\ProvidedRequiredArguments { ... }, 23 => class GraphQL\Validator\Rules\VariablesInAllowedPosition { ... }, 24 => class GraphQL\Validator\Rules\OverlappingFieldsCanBeMerged { ... }, 25 => class GraphQL\Validator\Rules\UniqueInputFieldNames { ... }, 'require_authentication' => class WPGraphQL\Server\ValidationRules\RequireAuthentication { ... }, 'disable_introspection' => class WPGraphQL\Server\ValidationRules\DisableIntrospection { ... }, 'query_depth' => class WPGraphQL\Server\ValidationRules\QueryDepth { ... }]; private $fieldResolver = NULL; private $promiseAdapter = NULL; private $persistentQueryLoader = NULL }, $op = class GraphQL\Server\OperationParams { public $queryId = NULL; public $query = 'fragment BlogInfoFragment on GeneralSettings {\n  title\n  description\n  __typename\n}\n\nfragment NavigationMenuItemFragment on MenuItem {\n  id\n  path\n  label\n  parentId\n  cssClasses\n  menu {\n    node {\n      name\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment FeaturedImageFragment on NodeWithFeaturedImage {\n  featuredImage {\n    node {\n      id\n      sourceUrl\n      altText\n      mediaDetails {\n        width\n        height\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }'...; public $operation = 'GetPost'; public $variables = ['asPreview' => TRUE, 'databaseId' => 5, 'headerLocation' => 'PRIMARY', 'footerLocation' => 'FOOTER']; public $extensions = NULL; private $originalInput = ['operationname' => 'GetPost', 'variables' => [...], 'query' => 'fragment BlogInfoFragment on GeneralSettings {\n  title\n  description\n  __typename\n}\n\nfragment NavigationMenuItemFragment on MenuItem {\n  id\n  path\n  label\n  parentId\n  cssClasses\n  menu {\n    node {\n      name\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment FeaturedImageFragment on NodeWithFeaturedImage {\n  featuredImage {\n    node {\n      id\n      sourceUrl\n      altText\n      mediaDetails {\n        width\n        height\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }'...]; private $readOnly = FALSE }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Server/StandardServer.php:136
[23-Feb-2023 00:45:39 UTC] PHP  14. GraphQL\Executor\Promise\Adapter\SyncPromiseAdapter->wait($promise = class GraphQL\Executor\Promise\Promise { public $adoptedPromise = class GraphQL\Executor\Promise\Adapter\SyncPromise { public $state = 'pending'; public $result = NULL; private $waiting = [...] }; private $adapter = class GraphQL\Executor\Promise\Adapter\SyncPromiseAdapter {  } }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Server/Helper.php:214
[23-Feb-2023 00:45:39 UTC] PHP  15. GraphQL\Executor\Promise\Adapter\SyncPromise::runQueue() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/Promise/Adapter/SyncPromiseAdapter.php:149
[23-Feb-2023 00:45:39 UTC] PHP  16. GraphQL\Executor\Promise\Adapter\SyncPromise->GraphQL\Executor\Promise\Adapter\{closure:/Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/Promise/Adapter/SyncPromise.php:142-163}() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/Promise/Adapter/SyncPromise.php:53
[23-Feb-2023 00:45:39 UTC] PHP  17. GraphQL\Executor\ReferenceExecutor->GraphQL\Executor\{closure:/Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:650-652}($resolved = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/Promise/Adapter/SyncPromise.php:148
[23-Feb-2023 00:45:39 UTC] PHP  18. GraphQL\Executor\ReferenceExecutor->completeValue($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = ['description' => 'The post type', 'connections' => [...], 'interfaces' => [...], 'fields' => [...], 'model' => 'WPGraphQL\\Model\\Post', 'kind' => 'object', 'name' => 'Post']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['author' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'categories' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentCount' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'comments' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'conditionalTags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentType' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentTypeName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'databaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'date' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'dateGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'desiredSlug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'editingLockedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enclosure' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedScripts' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedStylesheets' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'excerpt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImage' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'guid' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'id' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isContentNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isPreview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRestricted' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRevision' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isSticky' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isTermNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lastEditedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'link' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modified' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modifiedGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pingStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pinged' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postFormats' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'preview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisionOf' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisions' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'slug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'status' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'tags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'template' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'templates' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'terms' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'title' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'toPing' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'uri' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['Node' => class WPGraphQL\Type\WPInterfaceType { ... }, 'ContentNode' => class WPGraphQL\Type\WPInterfaceType { ... }, 'UniformResourceIdentifiable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'DatabaseIdentifier' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTemplate' => class WPGraphQL\Type\WPInterfaceType { ... }, 'Previewable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTitle' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentEditor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithAuthor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithFeaturedImage' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithExcerpt' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithComments' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTrackbacks' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithRevisions' => class WPGraphQL\Type\WPInterfaceType { ... }, 'MenuItemLinkable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentBlocks' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'post'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'An object of the post Type. '; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class WPGraphQL\Type\WPObjectType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'post'; public $returnType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'RootQuery'; public $description = 'The root entry point into the Graph'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post'], $result = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:651
[23-Feb-2023 00:45:39 UTC] PHP  19. GraphQL\Executor\ReferenceExecutor->completeObjectValue($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = ['description' => 'The post type', 'connections' => [...], 'interfaces' => [...], 'fields' => [...], 'model' => 'WPGraphQL\\Model\\Post', 'kind' => 'object', 'name' => 'Post']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['author' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'categories' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentCount' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'comments' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'conditionalTags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentType' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentTypeName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'databaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'date' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'dateGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'desiredSlug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'editingLockedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enclosure' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedScripts' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedStylesheets' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'excerpt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImage' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'guid' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'id' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isContentNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isPreview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRestricted' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRevision' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isSticky' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isTermNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lastEditedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'link' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modified' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modifiedGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pingStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pinged' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postFormats' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'preview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisionOf' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisions' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'slug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'status' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'tags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'template' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'templates' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'terms' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'title' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'toPing' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'uri' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['Node' => class WPGraphQL\Type\WPInterfaceType { ... }, 'ContentNode' => class WPGraphQL\Type\WPInterfaceType { ... }, 'UniformResourceIdentifiable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'DatabaseIdentifier' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTemplate' => class WPGraphQL\Type\WPInterfaceType { ... }, 'Previewable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTitle' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentEditor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithAuthor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithFeaturedImage' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithExcerpt' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithComments' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTrackbacks' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithRevisions' => class WPGraphQL\Type\WPInterfaceType { ... }, 'MenuItemLinkable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentBlocks' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'post'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'An object of the post Type. '; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class WPGraphQL\Type\WPObjectType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'post'; public $returnType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'RootQuery'; public $description = 'The root entry point into the Graph'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post'], $result = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:793
[23-Feb-2023 00:45:39 UTC] PHP  20. GraphQL\Executor\ReferenceExecutor->collectAndExecuteSubfields($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = ['description' => 'The post type', 'connections' => [...], 'interfaces' => [...], 'fields' => [...], 'model' => 'WPGraphQL\\Model\\Post', 'kind' => 'object', 'name' => 'Post']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['author' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'categories' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentCount' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'comments' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'conditionalTags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentType' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentTypeName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'databaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'date' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'dateGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'desiredSlug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'editingLockedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enclosure' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedScripts' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedStylesheets' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'excerpt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImage' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'guid' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'id' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isContentNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isPreview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRestricted' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRevision' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isSticky' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isTermNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lastEditedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'link' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modified' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modifiedGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pingStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pinged' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postFormats' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'preview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisionOf' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisions' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'slug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'status' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'tags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'template' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'templates' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'terms' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'title' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'toPing' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'uri' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['Node' => class WPGraphQL\Type\WPInterfaceType { ... }, 'ContentNode' => class WPGraphQL\Type\WPInterfaceType { ... }, 'UniformResourceIdentifiable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'DatabaseIdentifier' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTemplate' => class WPGraphQL\Type\WPInterfaceType { ... }, 'Previewable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTitle' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentEditor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithAuthor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithFeaturedImage' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithExcerpt' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithComments' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTrackbacks' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithRevisions' => class WPGraphQL\Type\WPInterfaceType { ... }, 'MenuItemLinkable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentBlocks' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post'], $result = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1106
[23-Feb-2023 00:45:39 UTC] PHP  21. GraphQL\Executor\ReferenceExecutor->executeFields($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = ['description' => 'The post type', 'connections' => [...], 'interfaces' => [...], 'fields' => [...], 'model' => 'WPGraphQL\\Model\\Post', 'kind' => 'object', 'name' => 'Post']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['author' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'categories' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentCount' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'comments' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'conditionalTags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentType' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentTypeName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'databaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'date' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'dateGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'desiredSlug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'editingLockedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enclosure' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedScripts' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedStylesheets' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'excerpt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImage' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'guid' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'id' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isContentNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isPreview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRestricted' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRevision' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isSticky' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isTermNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lastEditedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'link' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modified' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modifiedGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pingStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pinged' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postFormats' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'preview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisionOf' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisions' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'slug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'status' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'tags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'template' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'templates' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'terms' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'title' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'toPing' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'uri' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['Node' => class WPGraphQL\Type\WPInterfaceType { ... }, 'ContentNode' => class WPGraphQL\Type\WPInterfaceType { ... }, 'UniformResourceIdentifiable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'DatabaseIdentifier' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTemplate' => class WPGraphQL\Type\WPInterfaceType { ... }, 'Previewable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTitle' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentEditor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithAuthor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithFeaturedImage' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithExcerpt' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithComments' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTrackbacks' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithRevisions' => class WPGraphQL\Type\WPInterfaceType { ... }, 'MenuItemLinkable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentBlocks' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }, $path = [0 => 'post'], $fields = class ArrayObject { private $storage = ['title' => class ArrayObject { ... }, 'content' => class ArrayObject { ... }, 'date' => class ArrayObject { ... }, 'author' => class ArrayObject { ... }, 'featuredImage' => class ArrayObject { ... }, '__typename' => class ArrayObject { ... }, 'contentBlocks' => class ArrayObject { ... }] }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1145
[23-Feb-2023 00:45:39 UTC] PHP  22. GraphQL\Executor\ReferenceExecutor->resolveField($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = ['description' => 'The post type', 'connections' => [...], 'interfaces' => [...], 'fields' => [...], 'model' => 'WPGraphQL\\Model\\Post', 'kind' => 'object', 'name' => 'Post']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['author' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'categories' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentCount' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'comments' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'conditionalTags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentType' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentTypeName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'databaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'date' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'dateGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'desiredSlug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'editingLockedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enclosure' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedScripts' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedStylesheets' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'excerpt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImage' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'guid' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'id' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isContentNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isPreview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRestricted' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRevision' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isSticky' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isTermNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lastEditedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'link' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modified' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modifiedGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pingStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pinged' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postFormats' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'preview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisionOf' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisions' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'slug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'status' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'tags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'template' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'templates' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'terms' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'title' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'toPing' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'uri' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['Node' => class WPGraphQL\Type\WPInterfaceType { ... }, 'ContentNode' => class WPGraphQL\Type\WPInterfaceType { ... }, 'UniformResourceIdentifiable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'DatabaseIdentifier' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTemplate' => class WPGraphQL\Type\WPInterfaceType { ... }, 'Previewable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTitle' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentEditor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithAuthor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithFeaturedImage' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithExcerpt' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithComments' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTrackbacks' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithRevisions' => class WPGraphQL\Type\WPInterfaceType { ... }, 'MenuItemLinkable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentBlocks' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post', 1 => 'contentBlocks']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1195
[23-Feb-2023 00:45:39 UTC] PHP  23. GraphQL\Executor\ReferenceExecutor->completeValueCatchingError($returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks'], $result = [0 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f6b733b5eed'], 2 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f6b733b5eef']]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:557
[23-Feb-2023 00:45:39 UTC] PHP  24. GraphQL\Executor\ReferenceExecutor->completeValue($returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks'], $result = [0 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f6b733b5eed'], 2 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f6b733b5eef']]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:654
[23-Feb-2023 00:45:39 UTC] PHP  25. GraphQL\Executor\ReferenceExecutor->completeListValue($returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks'], $results = [0 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f6b733b5eed'], 2 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f6b733b5eef']]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:761
[23-Feb-2023 00:45:39 UTC] PHP  26. GraphQL\Executor\ReferenceExecutor->completeValueCatchingError($returnType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = ['eagerlyLoadType' => TRUE, 'description' => 'Blocks that can be edited to create content and layouts', 'fields' => [...], 'resolveType' => class Closure { virtual $closure = "$this->WPGraphQL\Type\{closure}", ... }, 'kind' => 'interface', 'name' => 'ContentBlock']; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = []; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6b733b5eed']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:887
[23-Feb-2023 00:45:39 UTC] PHP  27. GraphQL\Executor\ReferenceExecutor->completeValue($returnType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = ['eagerlyLoadType' => TRUE, 'description' => 'Blocks that can be edited to create content and layouts', 'fields' => [...], 'resolveType' => class Closure { virtual $closure = "$this->WPGraphQL\Type\{closure}", ... }, 'kind' => 'interface', 'name' => 'ContentBlock']; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = []; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6b733b5eed']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:654
[23-Feb-2023 00:45:39 UTC] PHP  28. GraphQL\Executor\ReferenceExecutor->completeAbstractValue($returnType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = ['eagerlyLoadType' => TRUE, 'description' => 'Blocks that can be edited to create content and layouts', 'fields' => [...], 'resolveType' => class Closure { virtual $closure = "$this->WPGraphQL\Type\{closure}", ... }, 'kind' => 'interface', 'name' => 'ContentBlock']; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = []; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6b733b5eed']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:789
[23-Feb-2023 00:45:39 UTC] PHP  29. GraphQL\Executor\ReferenceExecutor->completeObjectValue($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = ['description' => 'A block used for editing the site', 'interfaces' => [...], 'eagerlyLoadType' => TRUE, 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCode']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'attributes' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['ContentBlock' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6b733b5eed']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:974
[23-Feb-2023 00:45:39 UTC] PHP  30. GraphQL\Executor\ReferenceExecutor->collectAndExecuteSubfields($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = ['description' => 'A block used for editing the site', 'interfaces' => [...], 'eagerlyLoadType' => TRUE, 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCode']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'attributes' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['ContentBlock' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6b733b5eed']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1106
[23-Feb-2023 00:45:39 UTC] PHP  31. GraphQL\Executor\ReferenceExecutor->executeFields($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = ['description' => 'A block used for editing the site', 'interfaces' => [...], 'eagerlyLoadType' => TRUE, 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCode']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'attributes' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['ContentBlock' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6b733b5eed'], $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0], $fields = class ArrayObject { private $storage = ['__typename' => class ArrayObject { ... }, 'renderedHtml' => class ArrayObject { ... }, 'id' => class ArrayObject { ... }, 'parentId' => class ArrayObject { ... }, 'attributes' => class ArrayObject { ... }] }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1145
[23-Feb-2023 00:45:39 UTC] PHP  32. GraphQL\Executor\ReferenceExecutor->resolveField($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = ['description' => 'A block used for editing the site', 'interfaces' => [...], 'eagerlyLoadType' => TRUE, 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCode']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'attributes' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['ContentBlock' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6b733b5eed'], $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1195
[23-Feb-2023 00:45:39 UTC] PHP  33. GraphQL\Executor\ReferenceExecutor->completeValueCatchingError($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'attributes'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'Attributes of the %s Block Type'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class WPGraphQL\Type\WPObjectType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'attributes'; public $returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes'], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6b733b5eed']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:557
[23-Feb-2023 00:45:39 UTC] PHP  34. GraphQL\Executor\ReferenceExecutor->completeValue($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'attributes'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'Attributes of the %s Block Type'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class WPGraphQL\Type\WPObjectType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'attributes'; public $returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes'], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6b733b5eed']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:654
[23-Feb-2023 00:45:39 UTC] PHP  35. GraphQL\Executor\ReferenceExecutor->completeObjectValue($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'attributes'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'Attributes of the %s Block Type'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class WPGraphQL\Type\WPObjectType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'attributes'; public $returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes'], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6b733b5eed']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:793
[23-Feb-2023 00:45:39 UTC] PHP  36. GraphQL\Executor\ReferenceExecutor->collectAndExecuteSubfields($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes'], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6b733b5eed']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1106
[23-Feb-2023 00:45:39 UTC] PHP  37. GraphQL\Executor\ReferenceExecutor->executeFields($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6b733b5eed'], $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes'], $fields = class ArrayObject { private $storage = ['borderColor' => class ArrayObject { ... }, 'backgroundColor' => class ArrayObject { ... }, 'content' => class ArrayObject { ... }, 'style' => class ArrayObject { ... }, 'textColor' => class ArrayObject { ... }, 'fontSize' => class ArrayObject { ... }, 'fontFamily' => class ArrayObject { ... }, '__typename' => class ArrayObject { ... }] }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1145
[23-Feb-2023 00:45:39 UTC] PHP  38. GraphQL\Executor\ReferenceExecutor->resolveField($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6b733b5eed'], $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes', 4 => 'content']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1195
[23-Feb-2023 00:45:39 UTC] PHP  39. GraphQL\Executor\ReferenceExecutor->resolveFieldValueOrError($fieldDef = class GraphQL\Type\Definition\FieldDefinition { public $name = 'content'; public $args = []; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", public $static = [...]; public $parameter = [...] }; public $mapFn = NULL; public $description = 'The &quot;content&quot; field on the &quot;CoreCode&quot; block'; public $deprecationReason = NULL; public $astNode = NULL; public $config = ['type' => class Closure { virtual $closure = "$this->WPGraphQL\Registry\{closure}", ... }, 'description' => 'The "content" field on the "CoreCode" block', 'resolve' => class Closure { virtual $closure = "$this->WPGraphQL\ContentBlocks\Blocks\{closure}", ... }, 'name' => 'content']; private $type = class GraphQL\Type\Definition\StringType { public $name = 'String'; public $description = 'The `String` scalar type represents textual data, represented as UTF-8\ncharacter sequences. The String type is most often used by GraphQL to\nrepresent free-form human-readable text.'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }, $fieldNode = class GraphQL\Language\AST\FieldNode { public $loc = class GraphQL\Language\AST\Location { public $start = 629; public $end = 636; public $startToken = class GraphQL\Language\Token { ... }; public $endToken = class GraphQL\Language\Token { ... }; public $source = class GraphQL\Language\Source { ... } }; public $kind = 'Field'; public $name = class GraphQL\Language\AST\NameNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'Name'; public $value = 'content' }; public $alias = NULL; public $arguments = class GraphQL\Language\AST\NodeList { private $nodes = [...] }; public $directives = class GraphQL\Language\AST\NodeList { private $nodes = [...] }; public $selectionSet = NULL }, $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", public $static = ['field_resolver' => class Closure { virtual $closure = "$this->WPGraphQL\ContentBlocks\Blocks\{closure}", ... }, 'type_name' => 'CoreCodeAttributes', 'field_key' => 'content', 'field' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $parameter = ['$source' => '<required>', '$args' => '<required>', '$context' => '<required>', '$info' => '<required>'] }, $rootValue = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6b733b5eed'], $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'content'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'The &quot;content&quot; field on the &quot;CoreCode&quot; block'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\StringType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'content'; public $returnType = class GraphQL\Type\Definition\StringType { public $name = 'String'; public $description = 'The `String` scalar type represents textual data, represented as UTF-8\ncharacter sequences. The String type is most often used by GraphQL to\nrepresent free-form human-readable text.'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes', 4 => 'content']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:550
[23-Feb-2023 00:45:39 UTC] PHP  40. WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure:/Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/src/Utils/InstrumentSchema.php:100-188}($source = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6b733b5eed'], $args = [], $context = class WPGraphQL\AppContext { public $root_url = 'http://localhost:10028'; public $viewer = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] }; public $request = NULL; public $config = ['registered_editor_blocks' => [...]]; public $currentConnection = NULL; public $connectionArgs = []; public $loaders = ['comment_author' => class WPGraphQL\Data\Loader\CommentAuthorLoader { ... }, 'comment' => class WPGraphQL\Data\Loader\CommentLoader { ... }, 'enqueued_script' => class WPGraphQL\Data\Loader\EnqueuedScriptLoader { ... }, 'enqueued_stylesheet' => class WPGraphQL\Data\Loader\EnqueuedStylesheetLoader { ... }, 'plugin' => class WPGraphQL\Data\Loader\PluginLoader { ... }, 'nav_menu_item' => class WPGraphQL\Data\Loader\PostObjectLoader { ... }, 'post' => class WPGraphQL\Data\Loader\PostObjectLoader { ... }, 'post_type' => class WPGraphQL\Data\Loader\PostTypeLoader { ... }, 'taxonomy' => class WPGraphQL\Data\Loader\TaxonomyLoader { ... }, 'term' => class WPGraphQL\Data\Loader\TermObjectLoader { ... }, 'theme' => class WPGraphQL\Data\Loader\ThemeLoader { ... }, 'user' => class WPGraphQL\Data\Loader\UserLoader { ... }, 'user_role' => class WPGraphQL\Data\Loader\UserRoleLoader { ... }]; public $node_resolver = class WPGraphQL\Data\NodeResolver { protected $wp = class WP { ... }; protected $context = ... }; public $connection_query_class = NULL }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'content'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'The &quot;content&quot; field on the &quot;CoreCode&quot; block'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\StringType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'content'; public $returnType = class GraphQL\Type\Definition\StringType { public $name = 'String'; public $description = 'The `String` scalar type represents textual data, represented as UTF-8\ncharacter sequences. The String type is most often used by GraphQL to\nrepresent free-form human-readable text.'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes', 4 => 'content']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:623
[23-Feb-2023 00:45:39 UTC] PHP  41. WPGraphQL\ContentBlocks\Blocks\Block->WPGraphQL\ContentBlocks\Blocks\{closure:/Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql-content-blocks-main/includes/Blocks/Block.php:161-163}($block = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6b733b5eed'], $args = [], $context = class WPGraphQL\AppContext { public $root_url = 'http://localhost:10028'; public $viewer = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] }; public $request = NULL; public $config = ['registered_editor_blocks' => [...]]; public $currentConnection = NULL; public $connectionArgs = []; public $loaders = ['comment_author' => class WPGraphQL\Data\Loader\CommentAuthorLoader { ... }, 'comment' => class WPGraphQL\Data\Loader\CommentLoader { ... }, 'enqueued_script' => class WPGraphQL\Data\Loader\EnqueuedScriptLoader { ... }, 'enqueued_stylesheet' => class WPGraphQL\Data\Loader\EnqueuedStylesheetLoader { ... }, 'plugin' => class WPGraphQL\Data\Loader\PluginLoader { ... }, 'nav_menu_item' => class WPGraphQL\Data\Loader\PostObjectLoader { ... }, 'post' => class WPGraphQL\Data\Loader\PostObjectLoader { ... }, 'post_type' => class WPGraphQL\Data\Loader\PostTypeLoader { ... }, 'taxonomy' => class WPGraphQL\Data\Loader\TaxonomyLoader { ... }, 'term' => class WPGraphQL\Data\Loader\TermObjectLoader { ... }, 'theme' => class WPGraphQL\Data\Loader\ThemeLoader { ... }, 'user' => class WPGraphQL\Data\Loader\UserLoader { ... }, 'user_role' => class WPGraphQL\Data\Loader\UserRoleLoader { ... }]; public $node_resolver = class WPGraphQL\Data\NodeResolver { protected $wp = class WP { ... }; protected $context = ... }; public $connection_query_class = NULL }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'content'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'The &quot;content&quot; field on the &quot;CoreCode&quot; block'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\StringType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'content'; public $returnType = class GraphQL\Type\Definition\StringType { public $name = 'String'; public $description = 'The `String` scalar type represents textual data, represented as UTF-8\ncharacter sequences. The String type is most often used by GraphQL to\nrepresent free-form human-readable text.'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes', 4 => 'content']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/src/Utils/InstrumentSchema.php:151
[23-Feb-2023 00:45:39 UTC] PHP  42. WPGraphQL\ContentBlocks\Blocks\Block->resolve_block_attributes($block = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6b733b5eed'], $attribute_name = 'content', $attribute_config = ['type' => 'string', 'source' => 'html', 'selector' => 'code']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql-content-blocks-main/includes/Blocks/Block.php:162
[23-Feb-2023 00:45:39 UTC] PHP Warning:  Undefined array key "default" in /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql-content-blocks-main/includes/Blocks/Block.php on line 214
[23-Feb-2023 00:45:39 UTC] PHP Stack trace:
[23-Feb-2023 00:45:39 UTC] PHP   1. {main}() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/index.php:0
[23-Feb-2023 00:45:39 UTC] PHP   2. require() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/index.php:17
[23-Feb-2023 00:45:39 UTC] PHP   3. wp($query_vars = *uninitialized*) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-blog-header.php:16
[23-Feb-2023 00:45:39 UTC] PHP   4. WP->main($query_args = '') /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/functions.php:1332
[23-Feb-2023 00:45:39 UTC] PHP   5. WP->parse_request($extra_query_vars = '') /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/class-wp.php:780
[23-Feb-2023 00:45:39 UTC] PHP   6. do_action_ref_array($hook_name = 'parse_request', $args = [0 => class WP { public $public_query_vars = [...]; public $private_query_vars = [...]; public $extra_query_vars = [...]; public $query_vars = [...]; public $query_string = ''; public $request = 'graphql'; public $matched_rule = 'graphql/?$'; public $matched_query = 'graphql=true'; public $did_permalink = TRUE }]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/class-wp.php:399
[23-Feb-2023 00:45:39 UTC] PHP   7. WP_Hook->do_action($args = [0 => class WP { public $public_query_vars = [...]; public $private_query_vars = [...]; public $extra_query_vars = [...]; public $query_vars = [...]; public $query_string = ''; public $request = 'graphql'; public $matched_rule = 'graphql/?$'; public $matched_query = 'graphql=true'; public $did_permalink = TRUE }]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/plugin.php:565
[23-Feb-2023 00:45:39 UTC] PHP   8. WP_Hook->apply_filters($value = '', $args = [0 => class WP { public $public_query_vars = [...]; public $private_query_vars = [...]; public $extra_query_vars = [...]; public $query_vars = [...]; public $query_string = ''; public $request = 'graphql'; public $matched_rule = 'graphql/?$'; public $matched_query = 'graphql=true'; public $did_permalink = TRUE }]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/class-wp-hook.php:332
[23-Feb-2023 00:45:39 UTC] PHP   9. WPGraphQL\Router::resolve_http_request(class WP { public $public_query_vars = [0 => 'm', 1 => 'p', 2 => 'posts', 3 => 'w', 4 => 'cat', 5 => 'withcomments', 6 => 'withoutcomments', 7 => 's', 8 => 'search', 9 => 'exact', 10 => 'sentence', 11 => 'calendar', 12 => 'page', 13 => 'paged', 14 => 'more', 15 => 'tb', 16 => 'pb', 17 => 'author', 18 => 'order', 19 => 'orderby', 20 => 'year', 21 => 'monthnum', 22 => 'day', 23 => 'hour', 24 => 'minute', 25 => 'second', 26 => 'name', 27 => 'category_name', 28 => 'tag', 29 => 'feed', 30 => 'author_name', 31 => 'pagename', 32 => 'page_id', 33 => 'error', 34 => 'attachment', 35 => 'attachment_id', 36 => 'subpost', 37 => 'subpost_id', 38 => 'preview', 39 => 'robots', 40 => 'favicon', 41 => 'taxonomy', 42 => 'term', 43 => 'cpage', 44 => 'post_type', 45 => 'embed', 46 => 'post_format', 47 => 'rest_route', 48 => 'sitemap', 49 => 'sitemap-subtype', 50 => 'sitemap-stylesheet', 51 => 'graphql']; public $private_query_vars = [0 => 'offset', 1 => 'posts_per_page', 2 => 'posts_per_archive_page', 3 => 'showposts', 4 => 'nopaging', 5 => 'post_type', 6 => 'post_status', 7 => 'category__in', 8 => 'category__not_in', 9 => 'category__and', 10 => 'tag__in', 11 => 'tag__not_in', 12 => 'tag__and', 13 => 'tag_slug__in', 14 => 'tag_slug__and', 15 => 'tag_id', 16 => 'post_mime_type', 17 => 'perm', 18 => 'comments_per_page', 19 => 'post__in', 20 => 'post__not_in', 21 => 'post_parent', 22 => 'post_parent__in', 23 => 'post_parent__not_in', 24 => 'title', 25 => 'fields']; public $extra_query_vars = []; public $query_vars = ['graphql' => 'true']; public $query_string = ''; public $request = 'graphql'; public $matched_rule = 'graphql/?$'; public $matched_query = 'graphql=true'; public $did_permalink = TRUE }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/class-wp-hook.php:308
[23-Feb-2023 00:45:39 UTC] PHP  10. WPGraphQL\Router::process_http_request() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/src/Router.php:275
[23-Feb-2023 00:45:39 UTC] PHP  11. WPGraphQL\Request->execute_http() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/src/Router.php:481
[23-Feb-2023 00:45:39 UTC] PHP  12. GraphQL\Server\StandardServer->executeRequest($parsedBody = class GraphQL\Server\OperationParams { public $queryId = NULL; public $query = 'fragment BlogInfoFragment on GeneralSettings {\n  title\n  description\n  __typename\n}\n\nfragment NavigationMenuItemFragment on MenuItem {\n  id\n  path\n  label\n  parentId\n  cssClasses\n  menu {\n    node {\n      name\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment FeaturedImageFragment on NodeWithFeaturedImage {\n  featuredImage {\n    node {\n      id\n      sourceUrl\n      altText\n      mediaDetails {\n        width\n        height\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }'...; public $operation = 'GetPost'; public $variables = ['asPreview' => TRUE, 'databaseId' => 5, 'headerLocation' => 'PRIMARY', 'footerLocation' => 'FOOTER']; public $extensions = NULL; private $originalInput = ['operationname' => 'GetPost', 'variables' => [...], 'query' => 'fragment BlogInfoFragment on GeneralSettings {\n  title\n  description\n  __typename\n}\n\nfragment NavigationMenuItemFragment on MenuItem {\n  id\n  path\n  label\n  parentId\n  cssClasses\n  menu {\n    node {\n      name\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment FeaturedImageFragment on NodeWithFeaturedImage {\n  featuredImage {\n    node {\n      id\n      sourceUrl\n      altText\n      mediaDetails {\n        width\n        height\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }'...]; private $readOnly = FALSE }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/src/Request.php:713
[23-Feb-2023 00:45:39 UTC] PHP  13. GraphQL\Server\Helper->executeOperation($config = class GraphQL\Server\ServerConfig { private $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; private $context = class WPGraphQL\AppContext { public $root_url = 'http://localhost:10028'; public $viewer = class WP_User { ... }; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... }; public $request = NULL; public $config = [...]; public $currentConnection = NULL; public $connectionArgs = [...]; public $loaders = [...]; public $node_resolver = class WPGraphQL\Data\NodeResolver { ... }; public $connection_query_class = NULL }; private $rootValue = NULL; private $errorFormatter = NULL; private $errorsHandler = NULL; private $debugFlag = 0; private $queryBatching = TRUE; private $validationRules = [0 => class GraphQL\Validator\Rules\ExecutableDefinitions { ... }, 1 => class GraphQL\Validator\Rules\UniqueOperationNames { ... }, 2 => class GraphQL\Validator\Rules\LoneAnonymousOperation { ... }, 3 => class GraphQL\Validator\Rules\SingleFieldSubscription { ... }, 4 => class GraphQL\Validator\Rules\KnownTypeNames { ... }, 5 => class GraphQL\Validator\Rules\FragmentsOnCompositeTypes { ... }, 6 => class GraphQL\Validator\Rules\VariablesAreInputTypes { ... }, 7 => class GraphQL\Validator\Rules\ScalarLeafs { ... }, 8 => class GraphQL\Validator\Rules\FieldsOnCorrectType { ... }, 9 => class GraphQL\Validator\Rules\UniqueFragmentNames { ... }, 10 => class GraphQL\Validator\Rules\KnownFragmentNames { ... }, 11 => class GraphQL\Validator\Rules\NoUnusedFragments { ... }, 12 => class GraphQL\Validator\Rules\PossibleFragmentSpreads { ... }, 13 => class GraphQL\Validator\Rules\NoFragmentCycles { ... }, 14 => class GraphQL\Validator\Rules\UniqueVariableNames { ... }, 15 => class GraphQL\Validator\Rules\NoUndefinedVariables { ... }, 16 => class GraphQL\Validator\Rules\NoUnusedVariables { ... }, 17 => class GraphQL\Validator\Rules\KnownDirectives { ... }, 18 => class GraphQL\Validator\Rules\UniqueDirectivesPerLocation { ... }, 19 => class GraphQL\Validator\Rules\KnownArgumentNames { ... }, 20 => class GraphQL\Validator\Rules\UniqueArgumentNames { ... }, 21 => class GraphQL\Validator\Rules\ValuesOfCorrectType { ... }, 22 => class GraphQL\Validator\Rules\ProvidedRequiredArguments { ... }, 23 => class GraphQL\Validator\Rules\VariablesInAllowedPosition { ... }, 24 => class GraphQL\Validator\Rules\OverlappingFieldsCanBeMerged { ... }, 25 => class GraphQL\Validator\Rules\UniqueInputFieldNames { ... }, 'require_authentication' => class WPGraphQL\Server\ValidationRules\RequireAuthentication { ... }, 'disable_introspection' => class WPGraphQL\Server\ValidationRules\DisableIntrospection { ... }, 'query_depth' => class WPGraphQL\Server\ValidationRules\QueryDepth { ... }]; private $fieldResolver = NULL; private $promiseAdapter = NULL; private $persistentQueryLoader = NULL }, $op = class GraphQL\Server\OperationParams { public $queryId = NULL; public $query = 'fragment BlogInfoFragment on GeneralSettings {\n  title\n  description\n  __typename\n}\n\nfragment NavigationMenuItemFragment on MenuItem {\n  id\n  path\n  label\n  parentId\n  cssClasses\n  menu {\n    node {\n      name\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment FeaturedImageFragment on NodeWithFeaturedImage {\n  featuredImage {\n    node {\n      id\n      sourceUrl\n      altText\n      mediaDetails {\n        width\n        height\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }'...; public $operation = 'GetPost'; public $variables = ['asPreview' => TRUE, 'databaseId' => 5, 'headerLocation' => 'PRIMARY', 'footerLocation' => 'FOOTER']; public $extensions = NULL; private $originalInput = ['operationname' => 'GetPost', 'variables' => [...], 'query' => 'fragment BlogInfoFragment on GeneralSettings {\n  title\n  description\n  __typename\n}\n\nfragment NavigationMenuItemFragment on MenuItem {\n  id\n  path\n  label\n  parentId\n  cssClasses\n  menu {\n    node {\n      name\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment FeaturedImageFragment on NodeWithFeaturedImage {\n  featuredImage {\n    node {\n      id\n      sourceUrl\n      altText\n      mediaDetails {\n        width\n        height\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }'...]; private $readOnly = FALSE }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Server/StandardServer.php:136
[23-Feb-2023 00:45:39 UTC] PHP  14. GraphQL\Executor\Promise\Adapter\SyncPromiseAdapter->wait($promise = class GraphQL\Executor\Promise\Promise { public $adoptedPromise = class GraphQL\Executor\Promise\Adapter\SyncPromise { public $state = 'pending'; public $result = NULL; private $waiting = [...] }; private $adapter = class GraphQL\Executor\Promise\Adapter\SyncPromiseAdapter {  } }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Server/Helper.php:214
[23-Feb-2023 00:45:39 UTC] PHP  15. GraphQL\Executor\Promise\Adapter\SyncPromise::runQueue() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/Promise/Adapter/SyncPromiseAdapter.php:149
[23-Feb-2023 00:45:39 UTC] PHP  16. GraphQL\Executor\Promise\Adapter\SyncPromise->GraphQL\Executor\Promise\Adapter\{closure:/Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/Promise/Adapter/SyncPromise.php:142-163}() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/Promise/Adapter/SyncPromise.php:53
[23-Feb-2023 00:45:39 UTC] PHP  17. GraphQL\Executor\ReferenceExecutor->GraphQL\Executor\{closure:/Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:650-652}($resolved = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/Promise/Adapter/SyncPromise.php:148
[23-Feb-2023 00:45:39 UTC] PHP  18. GraphQL\Executor\ReferenceExecutor->completeValue($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = ['description' => 'The post type', 'connections' => [...], 'interfaces' => [...], 'fields' => [...], 'model' => 'WPGraphQL\\Model\\Post', 'kind' => 'object', 'name' => 'Post']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['author' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'categories' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentCount' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'comments' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'conditionalTags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentType' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentTypeName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'databaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'date' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'dateGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'desiredSlug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'editingLockedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enclosure' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedScripts' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedStylesheets' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'excerpt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImage' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'guid' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'id' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isContentNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isPreview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRestricted' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRevision' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isSticky' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isTermNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lastEditedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'link' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modified' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modifiedGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pingStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pinged' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postFormats' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'preview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisionOf' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisions' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'slug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'status' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'tags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'template' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'templates' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'terms' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'title' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'toPing' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'uri' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['Node' => class WPGraphQL\Type\WPInterfaceType { ... }, 'ContentNode' => class WPGraphQL\Type\WPInterfaceType { ... }, 'UniformResourceIdentifiable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'DatabaseIdentifier' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTemplate' => class WPGraphQL\Type\WPInterfaceType { ... }, 'Previewable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTitle' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentEditor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithAuthor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithFeaturedImage' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithExcerpt' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithComments' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTrackbacks' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithRevisions' => class WPGraphQL\Type\WPInterfaceType { ... }, 'MenuItemLinkable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentBlocks' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'post'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'An object of the post Type. '; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class WPGraphQL\Type\WPObjectType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'post'; public $returnType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'RootQuery'; public $description = 'The root entry point into the Graph'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post'], $result = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:651
[23-Feb-2023 00:45:39 UTC] PHP  19. GraphQL\Executor\ReferenceExecutor->completeObjectValue($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = ['description' => 'The post type', 'connections' => [...], 'interfaces' => [...], 'fields' => [...], 'model' => 'WPGraphQL\\Model\\Post', 'kind' => 'object', 'name' => 'Post']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['author' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'categories' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentCount' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'comments' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'conditionalTags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentType' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentTypeName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'databaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'date' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'dateGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'desiredSlug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'editingLockedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enclosure' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedScripts' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedStylesheets' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'excerpt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImage' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'guid' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'id' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isContentNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isPreview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRestricted' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRevision' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isSticky' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isTermNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lastEditedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'link' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modified' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modifiedGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pingStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pinged' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postFormats' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'preview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisionOf' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisions' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'slug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'status' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'tags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'template' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'templates' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'terms' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'title' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'toPing' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'uri' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['Node' => class WPGraphQL\Type\WPInterfaceType { ... }, 'ContentNode' => class WPGraphQL\Type\WPInterfaceType { ... }, 'UniformResourceIdentifiable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'DatabaseIdentifier' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTemplate' => class WPGraphQL\Type\WPInterfaceType { ... }, 'Previewable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTitle' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentEditor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithAuthor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithFeaturedImage' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithExcerpt' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithComments' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTrackbacks' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithRevisions' => class WPGraphQL\Type\WPInterfaceType { ... }, 'MenuItemLinkable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentBlocks' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'post'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'An object of the post Type. '; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class WPGraphQL\Type\WPObjectType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'post'; public $returnType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'RootQuery'; public $description = 'The root entry point into the Graph'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post'], $result = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:793
[23-Feb-2023 00:45:39 UTC] PHP  20. GraphQL\Executor\ReferenceExecutor->collectAndExecuteSubfields($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = ['description' => 'The post type', 'connections' => [...], 'interfaces' => [...], 'fields' => [...], 'model' => 'WPGraphQL\\Model\\Post', 'kind' => 'object', 'name' => 'Post']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['author' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'categories' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentCount' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'comments' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'conditionalTags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentType' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentTypeName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'databaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'date' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'dateGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'desiredSlug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'editingLockedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enclosure' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedScripts' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedStylesheets' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'excerpt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImage' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'guid' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'id' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isContentNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isPreview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRestricted' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRevision' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isSticky' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isTermNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lastEditedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'link' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modified' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modifiedGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pingStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pinged' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postFormats' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'preview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisionOf' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisions' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'slug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'status' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'tags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'template' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'templates' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'terms' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'title' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'toPing' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'uri' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['Node' => class WPGraphQL\Type\WPInterfaceType { ... }, 'ContentNode' => class WPGraphQL\Type\WPInterfaceType { ... }, 'UniformResourceIdentifiable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'DatabaseIdentifier' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTemplate' => class WPGraphQL\Type\WPInterfaceType { ... }, 'Previewable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTitle' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentEditor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithAuthor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithFeaturedImage' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithExcerpt' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithComments' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTrackbacks' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithRevisions' => class WPGraphQL\Type\WPInterfaceType { ... }, 'MenuItemLinkable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentBlocks' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post'], $result = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1106
[23-Feb-2023 00:45:39 UTC] PHP  21. GraphQL\Executor\ReferenceExecutor->executeFields($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = ['description' => 'The post type', 'connections' => [...], 'interfaces' => [...], 'fields' => [...], 'model' => 'WPGraphQL\\Model\\Post', 'kind' => 'object', 'name' => 'Post']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['author' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'categories' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentCount' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'comments' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'conditionalTags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentType' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentTypeName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'databaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'date' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'dateGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'desiredSlug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'editingLockedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enclosure' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedScripts' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedStylesheets' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'excerpt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImage' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'guid' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'id' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isContentNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isPreview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRestricted' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRevision' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isSticky' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isTermNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lastEditedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'link' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modified' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modifiedGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pingStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pinged' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postFormats' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'preview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisionOf' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisions' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'slug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'status' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'tags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'template' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'templates' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'terms' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'title' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'toPing' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'uri' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['Node' => class WPGraphQL\Type\WPInterfaceType { ... }, 'ContentNode' => class WPGraphQL\Type\WPInterfaceType { ... }, 'UniformResourceIdentifiable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'DatabaseIdentifier' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTemplate' => class WPGraphQL\Type\WPInterfaceType { ... }, 'Previewable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTitle' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentEditor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithAuthor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithFeaturedImage' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithExcerpt' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithComments' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTrackbacks' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithRevisions' => class WPGraphQL\Type\WPInterfaceType { ... }, 'MenuItemLinkable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentBlocks' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }, $path = [0 => 'post'], $fields = class ArrayObject { private $storage = ['title' => class ArrayObject { ... }, 'content' => class ArrayObject { ... }, 'date' => class ArrayObject { ... }, 'author' => class ArrayObject { ... }, 'featuredImage' => class ArrayObject { ... }, '__typename' => class ArrayObject { ... }, 'contentBlocks' => class ArrayObject { ... }] }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1145
[23-Feb-2023 00:45:39 UTC] PHP  22. GraphQL\Executor\ReferenceExecutor->resolveField($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = ['description' => 'The post type', 'connections' => [...], 'interfaces' => [...], 'fields' => [...], 'model' => 'WPGraphQL\\Model\\Post', 'kind' => 'object', 'name' => 'Post']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['author' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'categories' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentCount' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'comments' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'conditionalTags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentType' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentTypeName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'databaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'date' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'dateGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'desiredSlug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'editingLockedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enclosure' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedScripts' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedStylesheets' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'excerpt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImage' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'guid' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'id' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isContentNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isPreview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRestricted' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRevision' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isSticky' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isTermNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lastEditedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'link' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modified' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modifiedGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pingStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pinged' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postFormats' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'preview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisionOf' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisions' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'slug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'status' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'tags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'template' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'templates' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'terms' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'title' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'toPing' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'uri' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['Node' => class WPGraphQL\Type\WPInterfaceType { ... }, 'ContentNode' => class WPGraphQL\Type\WPInterfaceType { ... }, 'UniformResourceIdentifiable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'DatabaseIdentifier' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTemplate' => class WPGraphQL\Type\WPInterfaceType { ... }, 'Previewable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTitle' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentEditor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithAuthor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithFeaturedImage' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithExcerpt' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithComments' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTrackbacks' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithRevisions' => class WPGraphQL\Type\WPInterfaceType { ... }, 'MenuItemLinkable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentBlocks' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post', 1 => 'contentBlocks']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1195
[23-Feb-2023 00:45:39 UTC] PHP  23. GraphQL\Executor\ReferenceExecutor->completeValueCatchingError($returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks'], $result = [0 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f6b733b5eed'], 2 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f6b733b5eef']]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:557
[23-Feb-2023 00:45:39 UTC] PHP  24. GraphQL\Executor\ReferenceExecutor->completeValue($returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks'], $result = [0 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f6b733b5eed'], 2 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f6b733b5eef']]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:654
[23-Feb-2023 00:45:39 UTC] PHP  25. GraphQL\Executor\ReferenceExecutor->completeListValue($returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks'], $results = [0 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f6b733b5eed'], 2 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f6b733b5eef']]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:761
[23-Feb-2023 00:45:39 UTC] PHP  26. GraphQL\Executor\ReferenceExecutor->completeValueCatchingError($returnType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = ['eagerlyLoadType' => TRUE, 'description' => 'Blocks that can be edited to create content and layouts', 'fields' => [...], 'resolveType' => class Closure { virtual $closure = "$this->WPGraphQL\Type\{closure}", ... }, 'kind' => 'interface', 'name' => 'ContentBlock']; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = []; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6b733b5eef']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:887
[23-Feb-2023 00:45:39 UTC] PHP  27. GraphQL\Executor\ReferenceExecutor->completeValue($returnType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = ['eagerlyLoadType' => TRUE, 'description' => 'Blocks that can be edited to create content and layouts', 'fields' => [...], 'resolveType' => class Closure { virtual $closure = "$this->WPGraphQL\Type\{closure}", ... }, 'kind' => 'interface', 'name' => 'ContentBlock']; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = []; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6b733b5eef']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:654
[23-Feb-2023 00:45:39 UTC] PHP  28. GraphQL\Executor\ReferenceExecutor->completeAbstractValue($returnType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = ['eagerlyLoadType' => TRUE, 'description' => 'Blocks that can be edited to create content and layouts', 'fields' => [...], 'resolveType' => class Closure { virtual $closure = "$this->WPGraphQL\Type\{closure}", ... }, 'kind' => 'interface', 'name' => 'ContentBlock']; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = []; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6b733b5eef']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:789
[23-Feb-2023 00:45:39 UTC] PHP  29. GraphQL\Executor\ReferenceExecutor->completeObjectValue($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = ['description' => 'A block used for editing the site', 'interfaces' => [...], 'eagerlyLoadType' => TRUE, 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCode']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'attributes' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['ContentBlock' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6b733b5eef']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:974
[23-Feb-2023 00:45:39 UTC] PHP  30. GraphQL\Executor\ReferenceExecutor->collectAndExecuteSubfields($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = ['description' => 'A block used for editing the site', 'interfaces' => [...], 'eagerlyLoadType' => TRUE, 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCode']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'attributes' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['ContentBlock' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6b733b5eef']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1106
[23-Feb-2023 00:45:39 UTC] PHP  31. GraphQL\Executor\ReferenceExecutor->executeFields($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = ['description' => 'A block used for editing the site', 'interfaces' => [...], 'eagerlyLoadType' => TRUE, 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCode']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'attributes' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['ContentBlock' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6b733b5eef'], $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1], $fields = class ArrayObject { private $storage = ['__typename' => class ArrayObject { ... }, 'renderedHtml' => class ArrayObject { ... }, 'id' => class ArrayObject { ... }, 'parentId' => class ArrayObject { ... }, 'attributes' => class ArrayObject { ... }] }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1145
[23-Feb-2023 00:45:39 UTC] PHP  32. GraphQL\Executor\ReferenceExecutor->resolveField($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = ['description' => 'A block used for editing the site', 'interfaces' => [...], 'eagerlyLoadType' => TRUE, 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCode']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'attributes' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['ContentBlock' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6b733b5eef'], $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1195
[23-Feb-2023 00:45:39 UTC] PHP  33. GraphQL\Executor\ReferenceExecutor->completeValueCatchingError($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'attributes'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'Attributes of the %s Block Type'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class WPGraphQL\Type\WPObjectType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'attributes'; public $returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes'], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6b733b5eef']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:557
[23-Feb-2023 00:45:39 UTC] PHP  34. GraphQL\Executor\ReferenceExecutor->completeValue($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'attributes'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'Attributes of the %s Block Type'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class WPGraphQL\Type\WPObjectType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'attributes'; public $returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes'], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6b733b5eef']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:654
[23-Feb-2023 00:45:39 UTC] PHP  35. GraphQL\Executor\ReferenceExecutor->completeObjectValue($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'attributes'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'Attributes of the %s Block Type'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class WPGraphQL\Type\WPObjectType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'attributes'; public $returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes'], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6b733b5eef']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:793
[23-Feb-2023 00:45:39 UTC] PHP  36. GraphQL\Executor\ReferenceExecutor->collectAndExecuteSubfields($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes'], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6b733b5eef']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1106
[23-Feb-2023 00:45:39 UTC] PHP  37. GraphQL\Executor\ReferenceExecutor->executeFields($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6b733b5eef'], $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes'], $fields = class ArrayObject { private $storage = ['borderColor' => class ArrayObject { ... }, 'backgroundColor' => class ArrayObject { ... }, 'content' => class ArrayObject { ... }, 'style' => class ArrayObject { ... }, 'textColor' => class ArrayObject { ... }, 'fontSize' => class ArrayObject { ... }, 'fontFamily' => class ArrayObject { ... }, '__typename' => class ArrayObject { ... }] }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1145
[23-Feb-2023 00:45:39 UTC] PHP  38. GraphQL\Executor\ReferenceExecutor->resolveField($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6b733b5eef'], $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes', 4 => 'content']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1195
[23-Feb-2023 00:45:39 UTC] PHP  39. GraphQL\Executor\ReferenceExecutor->resolveFieldValueOrError($fieldDef = class GraphQL\Type\Definition\FieldDefinition { public $name = 'content'; public $args = []; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", public $static = [...]; public $parameter = [...] }; public $mapFn = NULL; public $description = 'The &quot;content&quot; field on the &quot;CoreCode&quot; block'; public $deprecationReason = NULL; public $astNode = NULL; public $config = ['type' => class Closure { virtual $closure = "$this->WPGraphQL\Registry\{closure}", ... }, 'description' => 'The "content" field on the "CoreCode" block', 'resolve' => class Closure { virtual $closure = "$this->WPGraphQL\ContentBlocks\Blocks\{closure}", ... }, 'name' => 'content']; private $type = class GraphQL\Type\Definition\StringType { public $name = 'String'; public $description = 'The `String` scalar type represents textual data, represented as UTF-8\ncharacter sequences. The String type is most often used by GraphQL to\nrepresent free-form human-readable text.'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }, $fieldNode = class GraphQL\Language\AST\FieldNode { public $loc = class GraphQL\Language\AST\Location { public $start = 629; public $end = 636; public $startToken = class GraphQL\Language\Token { ... }; public $endToken = class GraphQL\Language\Token { ... }; public $source = class GraphQL\Language\Source { ... } }; public $kind = 'Field'; public $name = class GraphQL\Language\AST\NameNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'Name'; public $value = 'content' }; public $alias = NULL; public $arguments = class GraphQL\Language\AST\NodeList { private $nodes = [...] }; public $directives = class GraphQL\Language\AST\NodeList { private $nodes = [...] }; public $selectionSet = NULL }, $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", public $static = ['field_resolver' => class Closure { virtual $closure = "$this->WPGraphQL\ContentBlocks\Blocks\{closure}", ... }, 'type_name' => 'CoreCodeAttributes', 'field_key' => 'content', 'field' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $parameter = ['$source' => '<required>', '$args' => '<required>', '$context' => '<required>', '$info' => '<required>'] }, $rootValue = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6b733b5eef'], $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'content'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'The &quot;content&quot; field on the &quot;CoreCode&quot; block'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\StringType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'content'; public $returnType = class GraphQL\Type\Definition\StringType { public $name = 'String'; public $description = 'The `String` scalar type represents textual data, represented as UTF-8\ncharacter sequences. The String type is most often used by GraphQL to\nrepresent free-form human-readable text.'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes', 4 => 'content']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:550
[23-Feb-2023 00:45:39 UTC] PHP  40. WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure:/Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/src/Utils/InstrumentSchema.php:100-188}($source = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6b733b5eef'], $args = [], $context = class WPGraphQL\AppContext { public $root_url = 'http://localhost:10028'; public $viewer = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] }; public $request = NULL; public $config = ['registered_editor_blocks' => [...]]; public $currentConnection = NULL; public $connectionArgs = []; public $loaders = ['comment_author' => class WPGraphQL\Data\Loader\CommentAuthorLoader { ... }, 'comment' => class WPGraphQL\Data\Loader\CommentLoader { ... }, 'enqueued_script' => class WPGraphQL\Data\Loader\EnqueuedScriptLoader { ... }, 'enqueued_stylesheet' => class WPGraphQL\Data\Loader\EnqueuedStylesheetLoader { ... }, 'plugin' => class WPGraphQL\Data\Loader\PluginLoader { ... }, 'nav_menu_item' => class WPGraphQL\Data\Loader\PostObjectLoader { ... }, 'post' => class WPGraphQL\Data\Loader\PostObjectLoader { ... }, 'post_type' => class WPGraphQL\Data\Loader\PostTypeLoader { ... }, 'taxonomy' => class WPGraphQL\Data\Loader\TaxonomyLoader { ... }, 'term' => class WPGraphQL\Data\Loader\TermObjectLoader { ... }, 'theme' => class WPGraphQL\Data\Loader\ThemeLoader { ... }, 'user' => class WPGraphQL\Data\Loader\UserLoader { ... }, 'user_role' => class WPGraphQL\Data\Loader\UserRoleLoader { ... }]; public $node_resolver = class WPGraphQL\Data\NodeResolver { protected $wp = class WP { ... }; protected $context = ... }; public $connection_query_class = NULL }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'content'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'The &quot;content&quot; field on the &quot;CoreCode&quot; block'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\StringType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'content'; public $returnType = class GraphQL\Type\Definition\StringType { public $name = 'String'; public $description = 'The `String` scalar type represents textual data, represented as UTF-8\ncharacter sequences. The String type is most often used by GraphQL to\nrepresent free-form human-readable text.'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes', 4 => 'content']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:623
[23-Feb-2023 00:45:39 UTC] PHP  41. WPGraphQL\ContentBlocks\Blocks\Block->WPGraphQL\ContentBlocks\Blocks\{closure:/Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql-content-blocks-main/includes/Blocks/Block.php:161-163}($block = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6b733b5eef'], $args = [], $context = class WPGraphQL\AppContext { public $root_url = 'http://localhost:10028'; public $viewer = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] }; public $request = NULL; public $config = ['registered_editor_blocks' => [...]]; public $currentConnection = NULL; public $connectionArgs = []; public $loaders = ['comment_author' => class WPGraphQL\Data\Loader\CommentAuthorLoader { ... }, 'comment' => class WPGraphQL\Data\Loader\CommentLoader { ... }, 'enqueued_script' => class WPGraphQL\Data\Loader\EnqueuedScriptLoader { ... }, 'enqueued_stylesheet' => class WPGraphQL\Data\Loader\EnqueuedStylesheetLoader { ... }, 'plugin' => class WPGraphQL\Data\Loader\PluginLoader { ... }, 'nav_menu_item' => class WPGraphQL\Data\Loader\PostObjectLoader { ... }, 'post' => class WPGraphQL\Data\Loader\PostObjectLoader { ... }, 'post_type' => class WPGraphQL\Data\Loader\PostTypeLoader { ... }, 'taxonomy' => class WPGraphQL\Data\Loader\TaxonomyLoader { ... }, 'term' => class WPGraphQL\Data\Loader\TermObjectLoader { ... }, 'theme' => class WPGraphQL\Data\Loader\ThemeLoader { ... }, 'user' => class WPGraphQL\Data\Loader\UserLoader { ... }, 'user_role' => class WPGraphQL\Data\Loader\UserRoleLoader { ... }]; public $node_resolver = class WPGraphQL\Data\NodeResolver { protected $wp = class WP { ... }; protected $context = ... }; public $connection_query_class = NULL }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'content'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'The &quot;content&quot; field on the &quot;CoreCode&quot; block'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\StringType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'content'; public $returnType = class GraphQL\Type\Definition\StringType { public $name = 'String'; public $description = 'The `String` scalar type represents textual data, represented as UTF-8\ncharacter sequences. The String type is most often used by GraphQL to\nrepresent free-form human-readable text.'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes', 4 => 'content']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/src/Utils/InstrumentSchema.php:151
[23-Feb-2023 00:45:39 UTC] PHP  42. WPGraphQL\ContentBlocks\Blocks\Block->resolve_block_attributes($block = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6b733b5eef'], $attribute_name = 'content', $attribute_config = ['type' => 'string', 'source' => 'html', 'selector' => 'code']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql-content-blocks-main/includes/Blocks/Block.php:162
[23-Feb-2023 00:47:28 UTC] PHP Warning:  Undefined array key "default" in /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql-content-blocks-main/includes/Blocks/Block.php on line 214
[23-Feb-2023 00:47:28 UTC] PHP Stack trace:
[23-Feb-2023 00:47:28 UTC] PHP   1. {main}() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/index.php:0
[23-Feb-2023 00:47:28 UTC] PHP   2. require() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/index.php:17
[23-Feb-2023 00:47:28 UTC] PHP   3. wp($query_vars = *uninitialized*) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-blog-header.php:16
[23-Feb-2023 00:47:28 UTC] PHP   4. WP->main($query_args = '') /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/functions.php:1332
[23-Feb-2023 00:47:28 UTC] PHP   5. WP->parse_request($extra_query_vars = '') /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/class-wp.php:780
[23-Feb-2023 00:47:28 UTC] PHP   6. do_action_ref_array($hook_name = 'parse_request', $args = [0 => class WP { public $public_query_vars = [...]; public $private_query_vars = [...]; public $extra_query_vars = [...]; public $query_vars = [...]; public $query_string = ''; public $request = 'graphql'; public $matched_rule = 'graphql/?$'; public $matched_query = 'graphql=true'; public $did_permalink = TRUE }]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/class-wp.php:399
[23-Feb-2023 00:47:28 UTC] PHP   7. WP_Hook->do_action($args = [0 => class WP { public $public_query_vars = [...]; public $private_query_vars = [...]; public $extra_query_vars = [...]; public $query_vars = [...]; public $query_string = ''; public $request = 'graphql'; public $matched_rule = 'graphql/?$'; public $matched_query = 'graphql=true'; public $did_permalink = TRUE }]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/plugin.php:565
[23-Feb-2023 00:47:28 UTC] PHP   8. WP_Hook->apply_filters($value = '', $args = [0 => class WP { public $public_query_vars = [...]; public $private_query_vars = [...]; public $extra_query_vars = [...]; public $query_vars = [...]; public $query_string = ''; public $request = 'graphql'; public $matched_rule = 'graphql/?$'; public $matched_query = 'graphql=true'; public $did_permalink = TRUE }]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/class-wp-hook.php:332
[23-Feb-2023 00:47:28 UTC] PHP   9. WPGraphQL\Router::resolve_http_request(class WP { public $public_query_vars = [0 => 'm', 1 => 'p', 2 => 'posts', 3 => 'w', 4 => 'cat', 5 => 'withcomments', 6 => 'withoutcomments', 7 => 's', 8 => 'search', 9 => 'exact', 10 => 'sentence', 11 => 'calendar', 12 => 'page', 13 => 'paged', 14 => 'more', 15 => 'tb', 16 => 'pb', 17 => 'author', 18 => 'order', 19 => 'orderby', 20 => 'year', 21 => 'monthnum', 22 => 'day', 23 => 'hour', 24 => 'minute', 25 => 'second', 26 => 'name', 27 => 'category_name', 28 => 'tag', 29 => 'feed', 30 => 'author_name', 31 => 'pagename', 32 => 'page_id', 33 => 'error', 34 => 'attachment', 35 => 'attachment_id', 36 => 'subpost', 37 => 'subpost_id', 38 => 'preview', 39 => 'robots', 40 => 'favicon', 41 => 'taxonomy', 42 => 'term', 43 => 'cpage', 44 => 'post_type', 45 => 'embed', 46 => 'post_format', 47 => 'rest_route', 48 => 'sitemap', 49 => 'sitemap-subtype', 50 => 'sitemap-stylesheet', 51 => 'graphql']; public $private_query_vars = [0 => 'offset', 1 => 'posts_per_page', 2 => 'posts_per_archive_page', 3 => 'showposts', 4 => 'nopaging', 5 => 'post_type', 6 => 'post_status', 7 => 'category__in', 8 => 'category__not_in', 9 => 'category__and', 10 => 'tag__in', 11 => 'tag__not_in', 12 => 'tag__and', 13 => 'tag_slug__in', 14 => 'tag_slug__and', 15 => 'tag_id', 16 => 'post_mime_type', 17 => 'perm', 18 => 'comments_per_page', 19 => 'post__in', 20 => 'post__not_in', 21 => 'post_parent', 22 => 'post_parent__in', 23 => 'post_parent__not_in', 24 => 'title', 25 => 'fields']; public $extra_query_vars = []; public $query_vars = ['graphql' => 'true']; public $query_string = ''; public $request = 'graphql'; public $matched_rule = 'graphql/?$'; public $matched_query = 'graphql=true'; public $did_permalink = TRUE }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/class-wp-hook.php:308
[23-Feb-2023 00:47:28 UTC] PHP  10. WPGraphQL\Router::process_http_request() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/src/Router.php:275
[23-Feb-2023 00:47:28 UTC] PHP  11. WPGraphQL\Request->execute_http() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/src/Router.php:481
[23-Feb-2023 00:47:28 UTC] PHP  12. GraphQL\Server\StandardServer->executeRequest($parsedBody = class GraphQL\Server\OperationParams { public $queryId = NULL; public $query = 'fragment BlogInfoFragment on GeneralSettings {\n  title\n  description\n  __typename\n}\n\nfragment NavigationMenuItemFragment on MenuItem {\n  id\n  path\n  label\n  parentId\n  cssClasses\n  menu {\n    node {\n      name\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment FeaturedImageFragment on NodeWithFeaturedImage {\n  featuredImage {\n    node {\n      id\n      sourceUrl\n      altText\n      mediaDetails {\n        width\n        height\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }'...; public $operation = 'GetPost'; public $variables = ['asPreview' => TRUE, 'databaseId' => 5, 'headerLocation' => 'PRIMARY', 'footerLocation' => 'FOOTER']; public $extensions = NULL; private $originalInput = ['operationname' => 'GetPost', 'variables' => [...], 'query' => 'fragment BlogInfoFragment on GeneralSettings {\n  title\n  description\n  __typename\n}\n\nfragment NavigationMenuItemFragment on MenuItem {\n  id\n  path\n  label\n  parentId\n  cssClasses\n  menu {\n    node {\n      name\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment FeaturedImageFragment on NodeWithFeaturedImage {\n  featuredImage {\n    node {\n      id\n      sourceUrl\n      altText\n      mediaDetails {\n        width\n        height\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }'...]; private $readOnly = FALSE }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/src/Request.php:713
[23-Feb-2023 00:47:28 UTC] PHP  13. GraphQL\Server\Helper->executeOperation($config = class GraphQL\Server\ServerConfig { private $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; private $context = class WPGraphQL\AppContext { public $root_url = 'http://localhost:10028'; public $viewer = class WP_User { ... }; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... }; public $request = NULL; public $config = [...]; public $currentConnection = NULL; public $connectionArgs = [...]; public $loaders = [...]; public $node_resolver = class WPGraphQL\Data\NodeResolver { ... }; public $connection_query_class = NULL }; private $rootValue = NULL; private $errorFormatter = NULL; private $errorsHandler = NULL; private $debugFlag = 0; private $queryBatching = TRUE; private $validationRules = [0 => class GraphQL\Validator\Rules\ExecutableDefinitions { ... }, 1 => class GraphQL\Validator\Rules\UniqueOperationNames { ... }, 2 => class GraphQL\Validator\Rules\LoneAnonymousOperation { ... }, 3 => class GraphQL\Validator\Rules\SingleFieldSubscription { ... }, 4 => class GraphQL\Validator\Rules\KnownTypeNames { ... }, 5 => class GraphQL\Validator\Rules\FragmentsOnCompositeTypes { ... }, 6 => class GraphQL\Validator\Rules\VariablesAreInputTypes { ... }, 7 => class GraphQL\Validator\Rules\ScalarLeafs { ... }, 8 => class GraphQL\Validator\Rules\FieldsOnCorrectType { ... }, 9 => class GraphQL\Validator\Rules\UniqueFragmentNames { ... }, 10 => class GraphQL\Validator\Rules\KnownFragmentNames { ... }, 11 => class GraphQL\Validator\Rules\NoUnusedFragments { ... }, 12 => class GraphQL\Validator\Rules\PossibleFragmentSpreads { ... }, 13 => class GraphQL\Validator\Rules\NoFragmentCycles { ... }, 14 => class GraphQL\Validator\Rules\UniqueVariableNames { ... }, 15 => class GraphQL\Validator\Rules\NoUndefinedVariables { ... }, 16 => class GraphQL\Validator\Rules\NoUnusedVariables { ... }, 17 => class GraphQL\Validator\Rules\KnownDirectives { ... }, 18 => class GraphQL\Validator\Rules\UniqueDirectivesPerLocation { ... }, 19 => class GraphQL\Validator\Rules\KnownArgumentNames { ... }, 20 => class GraphQL\Validator\Rules\UniqueArgumentNames { ... }, 21 => class GraphQL\Validator\Rules\ValuesOfCorrectType { ... }, 22 => class GraphQL\Validator\Rules\ProvidedRequiredArguments { ... }, 23 => class GraphQL\Validator\Rules\VariablesInAllowedPosition { ... }, 24 => class GraphQL\Validator\Rules\OverlappingFieldsCanBeMerged { ... }, 25 => class GraphQL\Validator\Rules\UniqueInputFieldNames { ... }, 'require_authentication' => class WPGraphQL\Server\ValidationRules\RequireAuthentication { ... }, 'disable_introspection' => class WPGraphQL\Server\ValidationRules\DisableIntrospection { ... }, 'query_depth' => class WPGraphQL\Server\ValidationRules\QueryDepth { ... }]; private $fieldResolver = NULL; private $promiseAdapter = NULL; private $persistentQueryLoader = NULL }, $op = class GraphQL\Server\OperationParams { public $queryId = NULL; public $query = 'fragment BlogInfoFragment on GeneralSettings {\n  title\n  description\n  __typename\n}\n\nfragment NavigationMenuItemFragment on MenuItem {\n  id\n  path\n  label\n  parentId\n  cssClasses\n  menu {\n    node {\n      name\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment FeaturedImageFragment on NodeWithFeaturedImage {\n  featuredImage {\n    node {\n      id\n      sourceUrl\n      altText\n      mediaDetails {\n        width\n        height\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }'...; public $operation = 'GetPost'; public $variables = ['asPreview' => TRUE, 'databaseId' => 5, 'headerLocation' => 'PRIMARY', 'footerLocation' => 'FOOTER']; public $extensions = NULL; private $originalInput = ['operationname' => 'GetPost', 'variables' => [...], 'query' => 'fragment BlogInfoFragment on GeneralSettings {\n  title\n  description\n  __typename\n}\n\nfragment NavigationMenuItemFragment on MenuItem {\n  id\n  path\n  label\n  parentId\n  cssClasses\n  menu {\n    node {\n      name\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment FeaturedImageFragment on NodeWithFeaturedImage {\n  featuredImage {\n    node {\n      id\n      sourceUrl\n      altText\n      mediaDetails {\n        width\n        height\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }'...]; private $readOnly = FALSE }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Server/StandardServer.php:136
[23-Feb-2023 00:47:28 UTC] PHP  14. GraphQL\Executor\Promise\Adapter\SyncPromiseAdapter->wait($promise = class GraphQL\Executor\Promise\Promise { public $adoptedPromise = class GraphQL\Executor\Promise\Adapter\SyncPromise { public $state = 'pending'; public $result = NULL; private $waiting = [...] }; private $adapter = class GraphQL\Executor\Promise\Adapter\SyncPromiseAdapter {  } }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Server/Helper.php:214
[23-Feb-2023 00:47:28 UTC] PHP  15. GraphQL\Executor\Promise\Adapter\SyncPromise::runQueue() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/Promise/Adapter/SyncPromiseAdapter.php:149
[23-Feb-2023 00:47:28 UTC] PHP  16. GraphQL\Executor\Promise\Adapter\SyncPromise->GraphQL\Executor\Promise\Adapter\{closure:/Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/Promise/Adapter/SyncPromise.php:142-163}() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/Promise/Adapter/SyncPromise.php:53
[23-Feb-2023 00:47:28 UTC] PHP  17. GraphQL\Executor\ReferenceExecutor->GraphQL\Executor\{closure:/Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:650-652}($resolved = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/Promise/Adapter/SyncPromise.php:148
[23-Feb-2023 00:47:28 UTC] PHP  18. GraphQL\Executor\ReferenceExecutor->completeValue($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = ['description' => 'The post type', 'connections' => [...], 'interfaces' => [...], 'fields' => [...], 'model' => 'WPGraphQL\\Model\\Post', 'kind' => 'object', 'name' => 'Post']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['author' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'categories' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentCount' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'comments' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'conditionalTags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentType' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentTypeName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'databaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'date' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'dateGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'desiredSlug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'editingLockedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enclosure' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedScripts' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedStylesheets' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'excerpt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImage' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'guid' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'id' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isContentNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isPreview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRestricted' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRevision' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isSticky' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isTermNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lastEditedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'link' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modified' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modifiedGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pingStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pinged' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postFormats' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'preview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisionOf' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisions' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'slug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'status' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'tags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'template' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'templates' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'terms' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'title' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'toPing' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'uri' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['Node' => class WPGraphQL\Type\WPInterfaceType { ... }, 'ContentNode' => class WPGraphQL\Type\WPInterfaceType { ... }, 'UniformResourceIdentifiable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'DatabaseIdentifier' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTemplate' => class WPGraphQL\Type\WPInterfaceType { ... }, 'Previewable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTitle' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentEditor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithAuthor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithFeaturedImage' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithExcerpt' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithComments' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTrackbacks' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithRevisions' => class WPGraphQL\Type\WPInterfaceType { ... }, 'MenuItemLinkable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentBlocks' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'post'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'An object of the post Type. '; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class WPGraphQL\Type\WPObjectType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'post'; public $returnType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'RootQuery'; public $description = 'The root entry point into the Graph'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post'], $result = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:651
[23-Feb-2023 00:47:28 UTC] PHP  19. GraphQL\Executor\ReferenceExecutor->completeObjectValue($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = ['description' => 'The post type', 'connections' => [...], 'interfaces' => [...], 'fields' => [...], 'model' => 'WPGraphQL\\Model\\Post', 'kind' => 'object', 'name' => 'Post']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['author' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'categories' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentCount' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'comments' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'conditionalTags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentType' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentTypeName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'databaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'date' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'dateGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'desiredSlug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'editingLockedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enclosure' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedScripts' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedStylesheets' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'excerpt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImage' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'guid' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'id' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isContentNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isPreview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRestricted' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRevision' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isSticky' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isTermNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lastEditedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'link' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modified' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modifiedGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pingStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pinged' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postFormats' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'preview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisionOf' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisions' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'slug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'status' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'tags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'template' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'templates' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'terms' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'title' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'toPing' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'uri' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['Node' => class WPGraphQL\Type\WPInterfaceType { ... }, 'ContentNode' => class WPGraphQL\Type\WPInterfaceType { ... }, 'UniformResourceIdentifiable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'DatabaseIdentifier' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTemplate' => class WPGraphQL\Type\WPInterfaceType { ... }, 'Previewable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTitle' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentEditor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithAuthor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithFeaturedImage' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithExcerpt' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithComments' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTrackbacks' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithRevisions' => class WPGraphQL\Type\WPInterfaceType { ... }, 'MenuItemLinkable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentBlocks' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'post'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'An object of the post Type. '; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class WPGraphQL\Type\WPObjectType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'post'; public $returnType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'RootQuery'; public $description = 'The root entry point into the Graph'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post'], $result = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:793
[23-Feb-2023 00:47:28 UTC] PHP  20. GraphQL\Executor\ReferenceExecutor->collectAndExecuteSubfields($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = ['description' => 'The post type', 'connections' => [...], 'interfaces' => [...], 'fields' => [...], 'model' => 'WPGraphQL\\Model\\Post', 'kind' => 'object', 'name' => 'Post']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['author' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'categories' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentCount' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'comments' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'conditionalTags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentType' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentTypeName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'databaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'date' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'dateGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'desiredSlug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'editingLockedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enclosure' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedScripts' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedStylesheets' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'excerpt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImage' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'guid' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'id' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isContentNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isPreview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRestricted' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRevision' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isSticky' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isTermNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lastEditedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'link' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modified' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modifiedGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pingStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pinged' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postFormats' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'preview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisionOf' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisions' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'slug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'status' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'tags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'template' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'templates' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'terms' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'title' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'toPing' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'uri' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['Node' => class WPGraphQL\Type\WPInterfaceType { ... }, 'ContentNode' => class WPGraphQL\Type\WPInterfaceType { ... }, 'UniformResourceIdentifiable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'DatabaseIdentifier' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTemplate' => class WPGraphQL\Type\WPInterfaceType { ... }, 'Previewable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTitle' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentEditor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithAuthor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithFeaturedImage' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithExcerpt' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithComments' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTrackbacks' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithRevisions' => class WPGraphQL\Type\WPInterfaceType { ... }, 'MenuItemLinkable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentBlocks' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post'], $result = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1106
[23-Feb-2023 00:47:28 UTC] PHP  21. GraphQL\Executor\ReferenceExecutor->executeFields($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = ['description' => 'The post type', 'connections' => [...], 'interfaces' => [...], 'fields' => [...], 'model' => 'WPGraphQL\\Model\\Post', 'kind' => 'object', 'name' => 'Post']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['author' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'categories' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentCount' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'comments' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'conditionalTags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentType' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentTypeName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'databaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'date' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'dateGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'desiredSlug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'editingLockedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enclosure' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedScripts' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedStylesheets' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'excerpt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImage' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'guid' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'id' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isContentNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isPreview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRestricted' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRevision' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isSticky' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isTermNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lastEditedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'link' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modified' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modifiedGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pingStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pinged' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postFormats' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'preview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisionOf' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisions' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'slug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'status' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'tags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'template' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'templates' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'terms' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'title' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'toPing' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'uri' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['Node' => class WPGraphQL\Type\WPInterfaceType { ... }, 'ContentNode' => class WPGraphQL\Type\WPInterfaceType { ... }, 'UniformResourceIdentifiable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'DatabaseIdentifier' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTemplate' => class WPGraphQL\Type\WPInterfaceType { ... }, 'Previewable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTitle' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentEditor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithAuthor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithFeaturedImage' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithExcerpt' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithComments' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTrackbacks' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithRevisions' => class WPGraphQL\Type\WPInterfaceType { ... }, 'MenuItemLinkable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentBlocks' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }, $path = [0 => 'post'], $fields = class ArrayObject { private $storage = ['title' => class ArrayObject { ... }, 'content' => class ArrayObject { ... }, 'date' => class ArrayObject { ... }, 'author' => class ArrayObject { ... }, 'featuredImage' => class ArrayObject { ... }, '__typename' => class ArrayObject { ... }, 'contentBlocks' => class ArrayObject { ... }] }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1145
[23-Feb-2023 00:47:28 UTC] PHP  22. GraphQL\Executor\ReferenceExecutor->resolveField($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = ['description' => 'The post type', 'connections' => [...], 'interfaces' => [...], 'fields' => [...], 'model' => 'WPGraphQL\\Model\\Post', 'kind' => 'object', 'name' => 'Post']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['author' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'categories' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentCount' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'comments' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'conditionalTags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentType' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentTypeName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'databaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'date' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'dateGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'desiredSlug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'editingLockedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enclosure' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedScripts' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedStylesheets' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'excerpt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImage' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'guid' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'id' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isContentNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isPreview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRestricted' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRevision' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isSticky' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isTermNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lastEditedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'link' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modified' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modifiedGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pingStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pinged' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postFormats' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'preview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisionOf' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisions' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'slug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'status' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'tags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'template' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'templates' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'terms' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'title' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'toPing' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'uri' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['Node' => class WPGraphQL\Type\WPInterfaceType { ... }, 'ContentNode' => class WPGraphQL\Type\WPInterfaceType { ... }, 'UniformResourceIdentifiable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'DatabaseIdentifier' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTemplate' => class WPGraphQL\Type\WPInterfaceType { ... }, 'Previewable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTitle' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentEditor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithAuthor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithFeaturedImage' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithExcerpt' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithComments' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTrackbacks' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithRevisions' => class WPGraphQL\Type\WPInterfaceType { ... }, 'MenuItemLinkable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentBlocks' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post', 1 => 'contentBlocks']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1195
[23-Feb-2023 00:47:28 UTC] PHP  23. GraphQL\Executor\ReferenceExecutor->completeValueCatchingError($returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks'], $result = [0 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f6b7a0dffcf'], 2 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f6b7a0dffd1']]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:557
[23-Feb-2023 00:47:28 UTC] PHP  24. GraphQL\Executor\ReferenceExecutor->completeValue($returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks'], $result = [0 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f6b7a0dffcf'], 2 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f6b7a0dffd1']]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:654
[23-Feb-2023 00:47:28 UTC] PHP  25. GraphQL\Executor\ReferenceExecutor->completeListValue($returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks'], $results = [0 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f6b7a0dffcf'], 2 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f6b7a0dffd1']]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:761
[23-Feb-2023 00:47:28 UTC] PHP  26. GraphQL\Executor\ReferenceExecutor->completeValueCatchingError($returnType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = ['eagerlyLoadType' => TRUE, 'description' => 'Blocks that can be edited to create content and layouts', 'fields' => [...], 'resolveType' => class Closure { virtual $closure = "$this->WPGraphQL\Type\{closure}", ... }, 'kind' => 'interface', 'name' => 'ContentBlock']; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = []; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6b7a0dffcf']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:887
[23-Feb-2023 00:47:28 UTC] PHP  27. GraphQL\Executor\ReferenceExecutor->completeValue($returnType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = ['eagerlyLoadType' => TRUE, 'description' => 'Blocks that can be edited to create content and layouts', 'fields' => [...], 'resolveType' => class Closure { virtual $closure = "$this->WPGraphQL\Type\{closure}", ... }, 'kind' => 'interface', 'name' => 'ContentBlock']; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = []; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6b7a0dffcf']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:654
[23-Feb-2023 00:47:28 UTC] PHP  28. GraphQL\Executor\ReferenceExecutor->completeAbstractValue($returnType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = ['eagerlyLoadType' => TRUE, 'description' => 'Blocks that can be edited to create content and layouts', 'fields' => [...], 'resolveType' => class Closure { virtual $closure = "$this->WPGraphQL\Type\{closure}", ... }, 'kind' => 'interface', 'name' => 'ContentBlock']; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = []; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6b7a0dffcf']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:789
[23-Feb-2023 00:47:28 UTC] PHP  29. GraphQL\Executor\ReferenceExecutor->completeObjectValue($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = ['description' => 'A block used for editing the site', 'interfaces' => [...], 'eagerlyLoadType' => TRUE, 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCode']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'attributes' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['ContentBlock' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6b7a0dffcf']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:974
[23-Feb-2023 00:47:28 UTC] PHP  30. GraphQL\Executor\ReferenceExecutor->collectAndExecuteSubfields($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = ['description' => 'A block used for editing the site', 'interfaces' => [...], 'eagerlyLoadType' => TRUE, 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCode']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'attributes' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['ContentBlock' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6b7a0dffcf']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1106
[23-Feb-2023 00:47:28 UTC] PHP  31. GraphQL\Executor\ReferenceExecutor->executeFields($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = ['description' => 'A block used for editing the site', 'interfaces' => [...], 'eagerlyLoadType' => TRUE, 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCode']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'attributes' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['ContentBlock' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6b7a0dffcf'], $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0], $fields = class ArrayObject { private $storage = ['__typename' => class ArrayObject { ... }, 'renderedHtml' => class ArrayObject { ... }, 'id' => class ArrayObject { ... }, 'parentId' => class ArrayObject { ... }, 'attributes' => class ArrayObject { ... }] }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1145
[23-Feb-2023 00:47:28 UTC] PHP  32. GraphQL\Executor\ReferenceExecutor->resolveField($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = ['description' => 'A block used for editing the site', 'interfaces' => [...], 'eagerlyLoadType' => TRUE, 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCode']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'attributes' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['ContentBlock' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6b7a0dffcf'], $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1195
[23-Feb-2023 00:47:28 UTC] PHP  33. GraphQL\Executor\ReferenceExecutor->completeValueCatchingError($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'attributes'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'Attributes of the %s Block Type'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class WPGraphQL\Type\WPObjectType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'attributes'; public $returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes'], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6b7a0dffcf']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:557
[23-Feb-2023 00:47:28 UTC] PHP  34. GraphQL\Executor\ReferenceExecutor->completeValue($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'attributes'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'Attributes of the %s Block Type'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class WPGraphQL\Type\WPObjectType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'attributes'; public $returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes'], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6b7a0dffcf']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:654
[23-Feb-2023 00:47:28 UTC] PHP  35. GraphQL\Executor\ReferenceExecutor->completeObjectValue($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'attributes'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'Attributes of the %s Block Type'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class WPGraphQL\Type\WPObjectType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'attributes'; public $returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes'], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6b7a0dffcf']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:793
[23-Feb-2023 00:47:28 UTC] PHP  36. GraphQL\Executor\ReferenceExecutor->collectAndExecuteSubfields($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes'], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6b7a0dffcf']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1106
[23-Feb-2023 00:47:28 UTC] PHP  37. GraphQL\Executor\ReferenceExecutor->executeFields($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6b7a0dffcf'], $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes'], $fields = class ArrayObject { private $storage = ['borderColor' => class ArrayObject { ... }, 'backgroundColor' => class ArrayObject { ... }, 'content' => class ArrayObject { ... }, 'style' => class ArrayObject { ... }, 'textColor' => class ArrayObject { ... }, 'fontSize' => class ArrayObject { ... }, 'fontFamily' => class ArrayObject { ... }, '__typename' => class ArrayObject { ... }] }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1145
[23-Feb-2023 00:47:28 UTC] PHP  38. GraphQL\Executor\ReferenceExecutor->resolveField($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6b7a0dffcf'], $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes', 4 => 'content']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1195
[23-Feb-2023 00:47:28 UTC] PHP  39. GraphQL\Executor\ReferenceExecutor->resolveFieldValueOrError($fieldDef = class GraphQL\Type\Definition\FieldDefinition { public $name = 'content'; public $args = []; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", public $static = [...]; public $parameter = [...] }; public $mapFn = NULL; public $description = 'The &quot;content&quot; field on the &quot;CoreCode&quot; block'; public $deprecationReason = NULL; public $astNode = NULL; public $config = ['type' => class Closure { virtual $closure = "$this->WPGraphQL\Registry\{closure}", ... }, 'description' => 'The "content" field on the "CoreCode" block', 'resolve' => class Closure { virtual $closure = "$this->WPGraphQL\ContentBlocks\Blocks\{closure}", ... }, 'name' => 'content']; private $type = class GraphQL\Type\Definition\StringType { public $name = 'String'; public $description = 'The `String` scalar type represents textual data, represented as UTF-8\ncharacter sequences. The String type is most often used by GraphQL to\nrepresent free-form human-readable text.'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }, $fieldNode = class GraphQL\Language\AST\FieldNode { public $loc = class GraphQL\Language\AST\Location { public $start = 629; public $end = 636; public $startToken = class GraphQL\Language\Token { ... }; public $endToken = class GraphQL\Language\Token { ... }; public $source = class GraphQL\Language\Source { ... } }; public $kind = 'Field'; public $name = class GraphQL\Language\AST\NameNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'Name'; public $value = 'content' }; public $alias = NULL; public $arguments = class GraphQL\Language\AST\NodeList { private $nodes = [...] }; public $directives = class GraphQL\Language\AST\NodeList { private $nodes = [...] }; public $selectionSet = NULL }, $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", public $static = ['field_resolver' => class Closure { virtual $closure = "$this->WPGraphQL\ContentBlocks\Blocks\{closure}", ... }, 'type_name' => 'CoreCodeAttributes', 'field_key' => 'content', 'field' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $parameter = ['$source' => '<required>', '$args' => '<required>', '$context' => '<required>', '$info' => '<required>'] }, $rootValue = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6b7a0dffcf'], $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'content'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'The &quot;content&quot; field on the &quot;CoreCode&quot; block'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\StringType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'content'; public $returnType = class GraphQL\Type\Definition\StringType { public $name = 'String'; public $description = 'The `String` scalar type represents textual data, represented as UTF-8\ncharacter sequences. The String type is most often used by GraphQL to\nrepresent free-form human-readable text.'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes', 4 => 'content']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:550
[23-Feb-2023 00:47:28 UTC] PHP  40. WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure:/Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/src/Utils/InstrumentSchema.php:100-188}($source = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6b7a0dffcf'], $args = [], $context = class WPGraphQL\AppContext { public $root_url = 'http://localhost:10028'; public $viewer = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] }; public $request = NULL; public $config = ['registered_editor_blocks' => [...]]; public $currentConnection = NULL; public $connectionArgs = []; public $loaders = ['comment_author' => class WPGraphQL\Data\Loader\CommentAuthorLoader { ... }, 'comment' => class WPGraphQL\Data\Loader\CommentLoader { ... }, 'enqueued_script' => class WPGraphQL\Data\Loader\EnqueuedScriptLoader { ... }, 'enqueued_stylesheet' => class WPGraphQL\Data\Loader\EnqueuedStylesheetLoader { ... }, 'plugin' => class WPGraphQL\Data\Loader\PluginLoader { ... }, 'nav_menu_item' => class WPGraphQL\Data\Loader\PostObjectLoader { ... }, 'post' => class WPGraphQL\Data\Loader\PostObjectLoader { ... }, 'post_type' => class WPGraphQL\Data\Loader\PostTypeLoader { ... }, 'taxonomy' => class WPGraphQL\Data\Loader\TaxonomyLoader { ... }, 'term' => class WPGraphQL\Data\Loader\TermObjectLoader { ... }, 'theme' => class WPGraphQL\Data\Loader\ThemeLoader { ... }, 'user' => class WPGraphQL\Data\Loader\UserLoader { ... }, 'user_role' => class WPGraphQL\Data\Loader\UserRoleLoader { ... }]; public $node_resolver = class WPGraphQL\Data\NodeResolver { protected $wp = class WP { ... }; protected $context = ... }; public $connection_query_class = NULL }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'content'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'The &quot;content&quot; field on the &quot;CoreCode&quot; block'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\StringType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'content'; public $returnType = class GraphQL\Type\Definition\StringType { public $name = 'String'; public $description = 'The `String` scalar type represents textual data, represented as UTF-8\ncharacter sequences. The String type is most often used by GraphQL to\nrepresent free-form human-readable text.'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes', 4 => 'content']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:623
[23-Feb-2023 00:47:28 UTC] PHP  41. WPGraphQL\ContentBlocks\Blocks\Block->WPGraphQL\ContentBlocks\Blocks\{closure:/Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql-content-blocks-main/includes/Blocks/Block.php:161-163}($block = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6b7a0dffcf'], $args = [], $context = class WPGraphQL\AppContext { public $root_url = 'http://localhost:10028'; public $viewer = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] }; public $request = NULL; public $config = ['registered_editor_blocks' => [...]]; public $currentConnection = NULL; public $connectionArgs = []; public $loaders = ['comment_author' => class WPGraphQL\Data\Loader\CommentAuthorLoader { ... }, 'comment' => class WPGraphQL\Data\Loader\CommentLoader { ... }, 'enqueued_script' => class WPGraphQL\Data\Loader\EnqueuedScriptLoader { ... }, 'enqueued_stylesheet' => class WPGraphQL\Data\Loader\EnqueuedStylesheetLoader { ... }, 'plugin' => class WPGraphQL\Data\Loader\PluginLoader { ... }, 'nav_menu_item' => class WPGraphQL\Data\Loader\PostObjectLoader { ... }, 'post' => class WPGraphQL\Data\Loader\PostObjectLoader { ... }, 'post_type' => class WPGraphQL\Data\Loader\PostTypeLoader { ... }, 'taxonomy' => class WPGraphQL\Data\Loader\TaxonomyLoader { ... }, 'term' => class WPGraphQL\Data\Loader\TermObjectLoader { ... }, 'theme' => class WPGraphQL\Data\Loader\ThemeLoader { ... }, 'user' => class WPGraphQL\Data\Loader\UserLoader { ... }, 'user_role' => class WPGraphQL\Data\Loader\UserRoleLoader { ... }]; public $node_resolver = class WPGraphQL\Data\NodeResolver { protected $wp = class WP { ... }; protected $context = ... }; public $connection_query_class = NULL }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'content'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'The &quot;content&quot; field on the &quot;CoreCode&quot; block'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\StringType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'content'; public $returnType = class GraphQL\Type\Definition\StringType { public $name = 'String'; public $description = 'The `String` scalar type represents textual data, represented as UTF-8\ncharacter sequences. The String type is most often used by GraphQL to\nrepresent free-form human-readable text.'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes', 4 => 'content']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/src/Utils/InstrumentSchema.php:151
[23-Feb-2023 00:47:28 UTC] PHP  42. WPGraphQL\ContentBlocks\Blocks\Block->resolve_block_attributes($block = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6b7a0dffcf'], $attribute_name = 'content', $attribute_config = ['type' => 'string', 'source' => 'html', 'selector' => 'code']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql-content-blocks-main/includes/Blocks/Block.php:162
[23-Feb-2023 00:47:28 UTC] PHP Warning:  Undefined array key "default" in /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql-content-blocks-main/includes/Blocks/Block.php on line 214
[23-Feb-2023 00:47:28 UTC] PHP Stack trace:
[23-Feb-2023 00:47:28 UTC] PHP   1. {main}() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/index.php:0
[23-Feb-2023 00:47:28 UTC] PHP   2. require() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/index.php:17
[23-Feb-2023 00:47:28 UTC] PHP   3. wp($query_vars = *uninitialized*) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-blog-header.php:16
[23-Feb-2023 00:47:28 UTC] PHP   4. WP->main($query_args = '') /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/functions.php:1332
[23-Feb-2023 00:47:28 UTC] PHP   5. WP->parse_request($extra_query_vars = '') /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/class-wp.php:780
[23-Feb-2023 00:47:28 UTC] PHP   6. do_action_ref_array($hook_name = 'parse_request', $args = [0 => class WP { public $public_query_vars = [...]; public $private_query_vars = [...]; public $extra_query_vars = [...]; public $query_vars = [...]; public $query_string = ''; public $request = 'graphql'; public $matched_rule = 'graphql/?$'; public $matched_query = 'graphql=true'; public $did_permalink = TRUE }]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/class-wp.php:399
[23-Feb-2023 00:47:28 UTC] PHP   7. WP_Hook->do_action($args = [0 => class WP { public $public_query_vars = [...]; public $private_query_vars = [...]; public $extra_query_vars = [...]; public $query_vars = [...]; public $query_string = ''; public $request = 'graphql'; public $matched_rule = 'graphql/?$'; public $matched_query = 'graphql=true'; public $did_permalink = TRUE }]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/plugin.php:565
[23-Feb-2023 00:47:28 UTC] PHP   8. WP_Hook->apply_filters($value = '', $args = [0 => class WP { public $public_query_vars = [...]; public $private_query_vars = [...]; public $extra_query_vars = [...]; public $query_vars = [...]; public $query_string = ''; public $request = 'graphql'; public $matched_rule = 'graphql/?$'; public $matched_query = 'graphql=true'; public $did_permalink = TRUE }]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/class-wp-hook.php:332
[23-Feb-2023 00:47:28 UTC] PHP   9. WPGraphQL\Router::resolve_http_request(class WP { public $public_query_vars = [0 => 'm', 1 => 'p', 2 => 'posts', 3 => 'w', 4 => 'cat', 5 => 'withcomments', 6 => 'withoutcomments', 7 => 's', 8 => 'search', 9 => 'exact', 10 => 'sentence', 11 => 'calendar', 12 => 'page', 13 => 'paged', 14 => 'more', 15 => 'tb', 16 => 'pb', 17 => 'author', 18 => 'order', 19 => 'orderby', 20 => 'year', 21 => 'monthnum', 22 => 'day', 23 => 'hour', 24 => 'minute', 25 => 'second', 26 => 'name', 27 => 'category_name', 28 => 'tag', 29 => 'feed', 30 => 'author_name', 31 => 'pagename', 32 => 'page_id', 33 => 'error', 34 => 'attachment', 35 => 'attachment_id', 36 => 'subpost', 37 => 'subpost_id', 38 => 'preview', 39 => 'robots', 40 => 'favicon', 41 => 'taxonomy', 42 => 'term', 43 => 'cpage', 44 => 'post_type', 45 => 'embed', 46 => 'post_format', 47 => 'rest_route', 48 => 'sitemap', 49 => 'sitemap-subtype', 50 => 'sitemap-stylesheet', 51 => 'graphql']; public $private_query_vars = [0 => 'offset', 1 => 'posts_per_page', 2 => 'posts_per_archive_page', 3 => 'showposts', 4 => 'nopaging', 5 => 'post_type', 6 => 'post_status', 7 => 'category__in', 8 => 'category__not_in', 9 => 'category__and', 10 => 'tag__in', 11 => 'tag__not_in', 12 => 'tag__and', 13 => 'tag_slug__in', 14 => 'tag_slug__and', 15 => 'tag_id', 16 => 'post_mime_type', 17 => 'perm', 18 => 'comments_per_page', 19 => 'post__in', 20 => 'post__not_in', 21 => 'post_parent', 22 => 'post_parent__in', 23 => 'post_parent__not_in', 24 => 'title', 25 => 'fields']; public $extra_query_vars = []; public $query_vars = ['graphql' => 'true']; public $query_string = ''; public $request = 'graphql'; public $matched_rule = 'graphql/?$'; public $matched_query = 'graphql=true'; public $did_permalink = TRUE }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/class-wp-hook.php:308
[23-Feb-2023 00:47:28 UTC] PHP  10. WPGraphQL\Router::process_http_request() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/src/Router.php:275
[23-Feb-2023 00:47:28 UTC] PHP  11. WPGraphQL\Request->execute_http() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/src/Router.php:481
[23-Feb-2023 00:47:28 UTC] PHP  12. GraphQL\Server\StandardServer->executeRequest($parsedBody = class GraphQL\Server\OperationParams { public $queryId = NULL; public $query = 'fragment BlogInfoFragment on GeneralSettings {\n  title\n  description\n  __typename\n}\n\nfragment NavigationMenuItemFragment on MenuItem {\n  id\n  path\n  label\n  parentId\n  cssClasses\n  menu {\n    node {\n      name\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment FeaturedImageFragment on NodeWithFeaturedImage {\n  featuredImage {\n    node {\n      id\n      sourceUrl\n      altText\n      mediaDetails {\n        width\n        height\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }'...; public $operation = 'GetPost'; public $variables = ['asPreview' => TRUE, 'databaseId' => 5, 'headerLocation' => 'PRIMARY', 'footerLocation' => 'FOOTER']; public $extensions = NULL; private $originalInput = ['operationname' => 'GetPost', 'variables' => [...], 'query' => 'fragment BlogInfoFragment on GeneralSettings {\n  title\n  description\n  __typename\n}\n\nfragment NavigationMenuItemFragment on MenuItem {\n  id\n  path\n  label\n  parentId\n  cssClasses\n  menu {\n    node {\n      name\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment FeaturedImageFragment on NodeWithFeaturedImage {\n  featuredImage {\n    node {\n      id\n      sourceUrl\n      altText\n      mediaDetails {\n        width\n        height\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }'...]; private $readOnly = FALSE }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/src/Request.php:713
[23-Feb-2023 00:47:28 UTC] PHP  13. GraphQL\Server\Helper->executeOperation($config = class GraphQL\Server\ServerConfig { private $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; private $context = class WPGraphQL\AppContext { public $root_url = 'http://localhost:10028'; public $viewer = class WP_User { ... }; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... }; public $request = NULL; public $config = [...]; public $currentConnection = NULL; public $connectionArgs = [...]; public $loaders = [...]; public $node_resolver = class WPGraphQL\Data\NodeResolver { ... }; public $connection_query_class = NULL }; private $rootValue = NULL; private $errorFormatter = NULL; private $errorsHandler = NULL; private $debugFlag = 0; private $queryBatching = TRUE; private $validationRules = [0 => class GraphQL\Validator\Rules\ExecutableDefinitions { ... }, 1 => class GraphQL\Validator\Rules\UniqueOperationNames { ... }, 2 => class GraphQL\Validator\Rules\LoneAnonymousOperation { ... }, 3 => class GraphQL\Validator\Rules\SingleFieldSubscription { ... }, 4 => class GraphQL\Validator\Rules\KnownTypeNames { ... }, 5 => class GraphQL\Validator\Rules\FragmentsOnCompositeTypes { ... }, 6 => class GraphQL\Validator\Rules\VariablesAreInputTypes { ... }, 7 => class GraphQL\Validator\Rules\ScalarLeafs { ... }, 8 => class GraphQL\Validator\Rules\FieldsOnCorrectType { ... }, 9 => class GraphQL\Validator\Rules\UniqueFragmentNames { ... }, 10 => class GraphQL\Validator\Rules\KnownFragmentNames { ... }, 11 => class GraphQL\Validator\Rules\NoUnusedFragments { ... }, 12 => class GraphQL\Validator\Rules\PossibleFragmentSpreads { ... }, 13 => class GraphQL\Validator\Rules\NoFragmentCycles { ... }, 14 => class GraphQL\Validator\Rules\UniqueVariableNames { ... }, 15 => class GraphQL\Validator\Rules\NoUndefinedVariables { ... }, 16 => class GraphQL\Validator\Rules\NoUnusedVariables { ... }, 17 => class GraphQL\Validator\Rules\KnownDirectives { ... }, 18 => class GraphQL\Validator\Rules\UniqueDirectivesPerLocation { ... }, 19 => class GraphQL\Validator\Rules\KnownArgumentNames { ... }, 20 => class GraphQL\Validator\Rules\UniqueArgumentNames { ... }, 21 => class GraphQL\Validator\Rules\ValuesOfCorrectType { ... }, 22 => class GraphQL\Validator\Rules\ProvidedRequiredArguments { ... }, 23 => class GraphQL\Validator\Rules\VariablesInAllowedPosition { ... }, 24 => class GraphQL\Validator\Rules\OverlappingFieldsCanBeMerged { ... }, 25 => class GraphQL\Validator\Rules\UniqueInputFieldNames { ... }, 'require_authentication' => class WPGraphQL\Server\ValidationRules\RequireAuthentication { ... }, 'disable_introspection' => class WPGraphQL\Server\ValidationRules\DisableIntrospection { ... }, 'query_depth' => class WPGraphQL\Server\ValidationRules\QueryDepth { ... }]; private $fieldResolver = NULL; private $promiseAdapter = NULL; private $persistentQueryLoader = NULL }, $op = class GraphQL\Server\OperationParams { public $queryId = NULL; public $query = 'fragment BlogInfoFragment on GeneralSettings {\n  title\n  description\n  __typename\n}\n\nfragment NavigationMenuItemFragment on MenuItem {\n  id\n  path\n  label\n  parentId\n  cssClasses\n  menu {\n    node {\n      name\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment FeaturedImageFragment on NodeWithFeaturedImage {\n  featuredImage {\n    node {\n      id\n      sourceUrl\n      altText\n      mediaDetails {\n        width\n        height\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }'...; public $operation = 'GetPost'; public $variables = ['asPreview' => TRUE, 'databaseId' => 5, 'headerLocation' => 'PRIMARY', 'footerLocation' => 'FOOTER']; public $extensions = NULL; private $originalInput = ['operationname' => 'GetPost', 'variables' => [...], 'query' => 'fragment BlogInfoFragment on GeneralSettings {\n  title\n  description\n  __typename\n}\n\nfragment NavigationMenuItemFragment on MenuItem {\n  id\n  path\n  label\n  parentId\n  cssClasses\n  menu {\n    node {\n      name\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment FeaturedImageFragment on NodeWithFeaturedImage {\n  featuredImage {\n    node {\n      id\n      sourceUrl\n      altText\n      mediaDetails {\n        width\n        height\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }'...]; private $readOnly = FALSE }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Server/StandardServer.php:136
[23-Feb-2023 00:47:28 UTC] PHP  14. GraphQL\Executor\Promise\Adapter\SyncPromiseAdapter->wait($promise = class GraphQL\Executor\Promise\Promise { public $adoptedPromise = class GraphQL\Executor\Promise\Adapter\SyncPromise { public $state = 'pending'; public $result = NULL; private $waiting = [...] }; private $adapter = class GraphQL\Executor\Promise\Adapter\SyncPromiseAdapter {  } }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Server/Helper.php:214
[23-Feb-2023 00:47:28 UTC] PHP  15. GraphQL\Executor\Promise\Adapter\SyncPromise::runQueue() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/Promise/Adapter/SyncPromiseAdapter.php:149
[23-Feb-2023 00:47:28 UTC] PHP  16. GraphQL\Executor\Promise\Adapter\SyncPromise->GraphQL\Executor\Promise\Adapter\{closure:/Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/Promise/Adapter/SyncPromise.php:142-163}() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/Promise/Adapter/SyncPromise.php:53
[23-Feb-2023 00:47:28 UTC] PHP  17. GraphQL\Executor\ReferenceExecutor->GraphQL\Executor\{closure:/Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:650-652}($resolved = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/Promise/Adapter/SyncPromise.php:148
[23-Feb-2023 00:47:28 UTC] PHP  18. GraphQL\Executor\ReferenceExecutor->completeValue($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = ['description' => 'The post type', 'connections' => [...], 'interfaces' => [...], 'fields' => [...], 'model' => 'WPGraphQL\\Model\\Post', 'kind' => 'object', 'name' => 'Post']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['author' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'categories' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentCount' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'comments' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'conditionalTags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentType' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentTypeName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'databaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'date' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'dateGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'desiredSlug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'editingLockedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enclosure' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedScripts' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedStylesheets' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'excerpt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImage' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'guid' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'id' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isContentNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isPreview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRestricted' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRevision' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isSticky' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isTermNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lastEditedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'link' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modified' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modifiedGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pingStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pinged' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postFormats' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'preview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisionOf' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisions' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'slug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'status' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'tags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'template' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'templates' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'terms' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'title' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'toPing' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'uri' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['Node' => class WPGraphQL\Type\WPInterfaceType { ... }, 'ContentNode' => class WPGraphQL\Type\WPInterfaceType { ... }, 'UniformResourceIdentifiable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'DatabaseIdentifier' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTemplate' => class WPGraphQL\Type\WPInterfaceType { ... }, 'Previewable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTitle' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentEditor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithAuthor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithFeaturedImage' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithExcerpt' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithComments' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTrackbacks' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithRevisions' => class WPGraphQL\Type\WPInterfaceType { ... }, 'MenuItemLinkable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentBlocks' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'post'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'An object of the post Type. '; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class WPGraphQL\Type\WPObjectType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'post'; public $returnType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'RootQuery'; public $description = 'The root entry point into the Graph'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post'], $result = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:651
[23-Feb-2023 00:47:28 UTC] PHP  19. GraphQL\Executor\ReferenceExecutor->completeObjectValue($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = ['description' => 'The post type', 'connections' => [...], 'interfaces' => [...], 'fields' => [...], 'model' => 'WPGraphQL\\Model\\Post', 'kind' => 'object', 'name' => 'Post']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['author' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'categories' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentCount' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'comments' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'conditionalTags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentType' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentTypeName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'databaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'date' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'dateGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'desiredSlug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'editingLockedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enclosure' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedScripts' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedStylesheets' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'excerpt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImage' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'guid' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'id' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isContentNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isPreview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRestricted' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRevision' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isSticky' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isTermNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lastEditedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'link' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modified' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modifiedGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pingStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pinged' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postFormats' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'preview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisionOf' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisions' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'slug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'status' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'tags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'template' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'templates' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'terms' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'title' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'toPing' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'uri' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['Node' => class WPGraphQL\Type\WPInterfaceType { ... }, 'ContentNode' => class WPGraphQL\Type\WPInterfaceType { ... }, 'UniformResourceIdentifiable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'DatabaseIdentifier' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTemplate' => class WPGraphQL\Type\WPInterfaceType { ... }, 'Previewable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTitle' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentEditor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithAuthor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithFeaturedImage' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithExcerpt' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithComments' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTrackbacks' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithRevisions' => class WPGraphQL\Type\WPInterfaceType { ... }, 'MenuItemLinkable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentBlocks' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'post'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'An object of the post Type. '; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class WPGraphQL\Type\WPObjectType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'post'; public $returnType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'RootQuery'; public $description = 'The root entry point into the Graph'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post'], $result = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:793
[23-Feb-2023 00:47:28 UTC] PHP  20. GraphQL\Executor\ReferenceExecutor->collectAndExecuteSubfields($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = ['description' => 'The post type', 'connections' => [...], 'interfaces' => [...], 'fields' => [...], 'model' => 'WPGraphQL\\Model\\Post', 'kind' => 'object', 'name' => 'Post']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['author' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'categories' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentCount' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'comments' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'conditionalTags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentType' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentTypeName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'databaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'date' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'dateGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'desiredSlug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'editingLockedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enclosure' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedScripts' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedStylesheets' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'excerpt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImage' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'guid' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'id' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isContentNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isPreview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRestricted' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRevision' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isSticky' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isTermNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lastEditedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'link' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modified' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modifiedGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pingStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pinged' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postFormats' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'preview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisionOf' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisions' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'slug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'status' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'tags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'template' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'templates' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'terms' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'title' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'toPing' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'uri' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['Node' => class WPGraphQL\Type\WPInterfaceType { ... }, 'ContentNode' => class WPGraphQL\Type\WPInterfaceType { ... }, 'UniformResourceIdentifiable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'DatabaseIdentifier' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTemplate' => class WPGraphQL\Type\WPInterfaceType { ... }, 'Previewable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTitle' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentEditor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithAuthor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithFeaturedImage' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithExcerpt' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithComments' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTrackbacks' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithRevisions' => class WPGraphQL\Type\WPInterfaceType { ... }, 'MenuItemLinkable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentBlocks' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post'], $result = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1106
[23-Feb-2023 00:47:28 UTC] PHP  21. GraphQL\Executor\ReferenceExecutor->executeFields($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = ['description' => 'The post type', 'connections' => [...], 'interfaces' => [...], 'fields' => [...], 'model' => 'WPGraphQL\\Model\\Post', 'kind' => 'object', 'name' => 'Post']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['author' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'categories' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentCount' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'comments' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'conditionalTags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentType' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentTypeName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'databaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'date' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'dateGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'desiredSlug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'editingLockedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enclosure' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedScripts' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedStylesheets' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'excerpt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImage' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'guid' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'id' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isContentNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isPreview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRestricted' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRevision' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isSticky' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isTermNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lastEditedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'link' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modified' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modifiedGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pingStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pinged' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postFormats' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'preview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisionOf' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisions' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'slug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'status' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'tags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'template' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'templates' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'terms' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'title' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'toPing' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'uri' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['Node' => class WPGraphQL\Type\WPInterfaceType { ... }, 'ContentNode' => class WPGraphQL\Type\WPInterfaceType { ... }, 'UniformResourceIdentifiable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'DatabaseIdentifier' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTemplate' => class WPGraphQL\Type\WPInterfaceType { ... }, 'Previewable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTitle' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentEditor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithAuthor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithFeaturedImage' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithExcerpt' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithComments' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTrackbacks' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithRevisions' => class WPGraphQL\Type\WPInterfaceType { ... }, 'MenuItemLinkable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentBlocks' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }, $path = [0 => 'post'], $fields = class ArrayObject { private $storage = ['title' => class ArrayObject { ... }, 'content' => class ArrayObject { ... }, 'date' => class ArrayObject { ... }, 'author' => class ArrayObject { ... }, 'featuredImage' => class ArrayObject { ... }, '__typename' => class ArrayObject { ... }, 'contentBlocks' => class ArrayObject { ... }] }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1145
[23-Feb-2023 00:47:28 UTC] PHP  22. GraphQL\Executor\ReferenceExecutor->resolveField($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = ['description' => 'The post type', 'connections' => [...], 'interfaces' => [...], 'fields' => [...], 'model' => 'WPGraphQL\\Model\\Post', 'kind' => 'object', 'name' => 'Post']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['author' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'categories' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentCount' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'comments' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'conditionalTags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentType' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentTypeName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'databaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'date' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'dateGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'desiredSlug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'editingLockedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enclosure' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedScripts' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedStylesheets' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'excerpt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImage' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'guid' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'id' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isContentNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isPreview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRestricted' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRevision' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isSticky' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isTermNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lastEditedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'link' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modified' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modifiedGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pingStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pinged' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postFormats' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'preview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisionOf' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisions' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'slug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'status' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'tags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'template' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'templates' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'terms' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'title' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'toPing' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'uri' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['Node' => class WPGraphQL\Type\WPInterfaceType { ... }, 'ContentNode' => class WPGraphQL\Type\WPInterfaceType { ... }, 'UniformResourceIdentifiable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'DatabaseIdentifier' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTemplate' => class WPGraphQL\Type\WPInterfaceType { ... }, 'Previewable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTitle' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentEditor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithAuthor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithFeaturedImage' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithExcerpt' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithComments' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTrackbacks' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithRevisions' => class WPGraphQL\Type\WPInterfaceType { ... }, 'MenuItemLinkable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentBlocks' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post', 1 => 'contentBlocks']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1195
[23-Feb-2023 00:47:28 UTC] PHP  23. GraphQL\Executor\ReferenceExecutor->completeValueCatchingError($returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks'], $result = [0 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f6b7a0dffcf'], 2 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f6b7a0dffd1']]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:557
[23-Feb-2023 00:47:28 UTC] PHP  24. GraphQL\Executor\ReferenceExecutor->completeValue($returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks'], $result = [0 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f6b7a0dffcf'], 2 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f6b7a0dffd1']]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:654
[23-Feb-2023 00:47:28 UTC] PHP  25. GraphQL\Executor\ReferenceExecutor->completeListValue($returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks'], $results = [0 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f6b7a0dffcf'], 2 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f6b7a0dffd1']]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:761
[23-Feb-2023 00:47:28 UTC] PHP  26. GraphQL\Executor\ReferenceExecutor->completeValueCatchingError($returnType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = ['eagerlyLoadType' => TRUE, 'description' => 'Blocks that can be edited to create content and layouts', 'fields' => [...], 'resolveType' => class Closure { virtual $closure = "$this->WPGraphQL\Type\{closure}", ... }, 'kind' => 'interface', 'name' => 'ContentBlock']; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = []; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6b7a0dffd1']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:887
[23-Feb-2023 00:47:28 UTC] PHP  27. GraphQL\Executor\ReferenceExecutor->completeValue($returnType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = ['eagerlyLoadType' => TRUE, 'description' => 'Blocks that can be edited to create content and layouts', 'fields' => [...], 'resolveType' => class Closure { virtual $closure = "$this->WPGraphQL\Type\{closure}", ... }, 'kind' => 'interface', 'name' => 'ContentBlock']; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = []; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6b7a0dffd1']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:654
[23-Feb-2023 00:47:28 UTC] PHP  28. GraphQL\Executor\ReferenceExecutor->completeAbstractValue($returnType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = ['eagerlyLoadType' => TRUE, 'description' => 'Blocks that can be edited to create content and layouts', 'fields' => [...], 'resolveType' => class Closure { virtual $closure = "$this->WPGraphQL\Type\{closure}", ... }, 'kind' => 'interface', 'name' => 'ContentBlock']; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = []; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6b7a0dffd1']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:789
[23-Feb-2023 00:47:28 UTC] PHP  29. GraphQL\Executor\ReferenceExecutor->completeObjectValue($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = ['description' => 'A block used for editing the site', 'interfaces' => [...], 'eagerlyLoadType' => TRUE, 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCode']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'attributes' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['ContentBlock' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6b7a0dffd1']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:974
[23-Feb-2023 00:47:28 UTC] PHP  30. GraphQL\Executor\ReferenceExecutor->collectAndExecuteSubfields($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = ['description' => 'A block used for editing the site', 'interfaces' => [...], 'eagerlyLoadType' => TRUE, 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCode']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'attributes' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['ContentBlock' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6b7a0dffd1']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1106
[23-Feb-2023 00:47:28 UTC] PHP  31. GraphQL\Executor\ReferenceExecutor->executeFields($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = ['description' => 'A block used for editing the site', 'interfaces' => [...], 'eagerlyLoadType' => TRUE, 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCode']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'attributes' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['ContentBlock' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6b7a0dffd1'], $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1], $fields = class ArrayObject { private $storage = ['__typename' => class ArrayObject { ... }, 'renderedHtml' => class ArrayObject { ... }, 'id' => class ArrayObject { ... }, 'parentId' => class ArrayObject { ... }, 'attributes' => class ArrayObject { ... }] }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1145
[23-Feb-2023 00:47:28 UTC] PHP  32. GraphQL\Executor\ReferenceExecutor->resolveField($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = ['description' => 'A block used for editing the site', 'interfaces' => [...], 'eagerlyLoadType' => TRUE, 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCode']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'attributes' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['ContentBlock' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6b7a0dffd1'], $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1195
[23-Feb-2023 00:47:28 UTC] PHP  33. GraphQL\Executor\ReferenceExecutor->completeValueCatchingError($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'attributes'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'Attributes of the %s Block Type'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class WPGraphQL\Type\WPObjectType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'attributes'; public $returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes'], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6b7a0dffd1']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:557
[23-Feb-2023 00:47:28 UTC] PHP  34. GraphQL\Executor\ReferenceExecutor->completeValue($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'attributes'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'Attributes of the %s Block Type'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class WPGraphQL\Type\WPObjectType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'attributes'; public $returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes'], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6b7a0dffd1']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:654
[23-Feb-2023 00:47:28 UTC] PHP  35. GraphQL\Executor\ReferenceExecutor->completeObjectValue($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'attributes'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'Attributes of the %s Block Type'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class WPGraphQL\Type\WPObjectType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'attributes'; public $returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes'], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6b7a0dffd1']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:793
[23-Feb-2023 00:47:28 UTC] PHP  36. GraphQL\Executor\ReferenceExecutor->collectAndExecuteSubfields($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes'], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6b7a0dffd1']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1106
[23-Feb-2023 00:47:28 UTC] PHP  37. GraphQL\Executor\ReferenceExecutor->executeFields($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6b7a0dffd1'], $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes'], $fields = class ArrayObject { private $storage = ['borderColor' => class ArrayObject { ... }, 'backgroundColor' => class ArrayObject { ... }, 'content' => class ArrayObject { ... }, 'style' => class ArrayObject { ... }, 'textColor' => class ArrayObject { ... }, 'fontSize' => class ArrayObject { ... }, 'fontFamily' => class ArrayObject { ... }, '__typename' => class ArrayObject { ... }] }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1145
[23-Feb-2023 00:47:28 UTC] PHP  38. GraphQL\Executor\ReferenceExecutor->resolveField($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6b7a0dffd1'], $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes', 4 => 'content']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1195
[23-Feb-2023 00:47:28 UTC] PHP  39. GraphQL\Executor\ReferenceExecutor->resolveFieldValueOrError($fieldDef = class GraphQL\Type\Definition\FieldDefinition { public $name = 'content'; public $args = []; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", public $static = [...]; public $parameter = [...] }; public $mapFn = NULL; public $description = 'The &quot;content&quot; field on the &quot;CoreCode&quot; block'; public $deprecationReason = NULL; public $astNode = NULL; public $config = ['type' => class Closure { virtual $closure = "$this->WPGraphQL\Registry\{closure}", ... }, 'description' => 'The "content" field on the "CoreCode" block', 'resolve' => class Closure { virtual $closure = "$this->WPGraphQL\ContentBlocks\Blocks\{closure}", ... }, 'name' => 'content']; private $type = class GraphQL\Type\Definition\StringType { public $name = 'String'; public $description = 'The `String` scalar type represents textual data, represented as UTF-8\ncharacter sequences. The String type is most often used by GraphQL to\nrepresent free-form human-readable text.'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }, $fieldNode = class GraphQL\Language\AST\FieldNode { public $loc = class GraphQL\Language\AST\Location { public $start = 629; public $end = 636; public $startToken = class GraphQL\Language\Token { ... }; public $endToken = class GraphQL\Language\Token { ... }; public $source = class GraphQL\Language\Source { ... } }; public $kind = 'Field'; public $name = class GraphQL\Language\AST\NameNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'Name'; public $value = 'content' }; public $alias = NULL; public $arguments = class GraphQL\Language\AST\NodeList { private $nodes = [...] }; public $directives = class GraphQL\Language\AST\NodeList { private $nodes = [...] }; public $selectionSet = NULL }, $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", public $static = ['field_resolver' => class Closure { virtual $closure = "$this->WPGraphQL\ContentBlocks\Blocks\{closure}", ... }, 'type_name' => 'CoreCodeAttributes', 'field_key' => 'content', 'field' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $parameter = ['$source' => '<required>', '$args' => '<required>', '$context' => '<required>', '$info' => '<required>'] }, $rootValue = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6b7a0dffd1'], $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'content'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'The &quot;content&quot; field on the &quot;CoreCode&quot; block'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\StringType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'content'; public $returnType = class GraphQL\Type\Definition\StringType { public $name = 'String'; public $description = 'The `String` scalar type represents textual data, represented as UTF-8\ncharacter sequences. The String type is most often used by GraphQL to\nrepresent free-form human-readable text.'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes', 4 => 'content']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:550
[23-Feb-2023 00:47:28 UTC] PHP  40. WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure:/Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/src/Utils/InstrumentSchema.php:100-188}($source = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6b7a0dffd1'], $args = [], $context = class WPGraphQL\AppContext { public $root_url = 'http://localhost:10028'; public $viewer = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] }; public $request = NULL; public $config = ['registered_editor_blocks' => [...]]; public $currentConnection = NULL; public $connectionArgs = []; public $loaders = ['comment_author' => class WPGraphQL\Data\Loader\CommentAuthorLoader { ... }, 'comment' => class WPGraphQL\Data\Loader\CommentLoader { ... }, 'enqueued_script' => class WPGraphQL\Data\Loader\EnqueuedScriptLoader { ... }, 'enqueued_stylesheet' => class WPGraphQL\Data\Loader\EnqueuedStylesheetLoader { ... }, 'plugin' => class WPGraphQL\Data\Loader\PluginLoader { ... }, 'nav_menu_item' => class WPGraphQL\Data\Loader\PostObjectLoader { ... }, 'post' => class WPGraphQL\Data\Loader\PostObjectLoader { ... }, 'post_type' => class WPGraphQL\Data\Loader\PostTypeLoader { ... }, 'taxonomy' => class WPGraphQL\Data\Loader\TaxonomyLoader { ... }, 'term' => class WPGraphQL\Data\Loader\TermObjectLoader { ... }, 'theme' => class WPGraphQL\Data\Loader\ThemeLoader { ... }, 'user' => class WPGraphQL\Data\Loader\UserLoader { ... }, 'user_role' => class WPGraphQL\Data\Loader\UserRoleLoader { ... }]; public $node_resolver = class WPGraphQL\Data\NodeResolver { protected $wp = class WP { ... }; protected $context = ... }; public $connection_query_class = NULL }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'content'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'The &quot;content&quot; field on the &quot;CoreCode&quot; block'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\StringType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'content'; public $returnType = class GraphQL\Type\Definition\StringType { public $name = 'String'; public $description = 'The `String` scalar type represents textual data, represented as UTF-8\ncharacter sequences. The String type is most often used by GraphQL to\nrepresent free-form human-readable text.'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes', 4 => 'content']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:623
[23-Feb-2023 00:47:28 UTC] PHP  41. WPGraphQL\ContentBlocks\Blocks\Block->WPGraphQL\ContentBlocks\Blocks\{closure:/Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql-content-blocks-main/includes/Blocks/Block.php:161-163}($block = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6b7a0dffd1'], $args = [], $context = class WPGraphQL\AppContext { public $root_url = 'http://localhost:10028'; public $viewer = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] }; public $request = NULL; public $config = ['registered_editor_blocks' => [...]]; public $currentConnection = NULL; public $connectionArgs = []; public $loaders = ['comment_author' => class WPGraphQL\Data\Loader\CommentAuthorLoader { ... }, 'comment' => class WPGraphQL\Data\Loader\CommentLoader { ... }, 'enqueued_script' => class WPGraphQL\Data\Loader\EnqueuedScriptLoader { ... }, 'enqueued_stylesheet' => class WPGraphQL\Data\Loader\EnqueuedStylesheetLoader { ... }, 'plugin' => class WPGraphQL\Data\Loader\PluginLoader { ... }, 'nav_menu_item' => class WPGraphQL\Data\Loader\PostObjectLoader { ... }, 'post' => class WPGraphQL\Data\Loader\PostObjectLoader { ... }, 'post_type' => class WPGraphQL\Data\Loader\PostTypeLoader { ... }, 'taxonomy' => class WPGraphQL\Data\Loader\TaxonomyLoader { ... }, 'term' => class WPGraphQL\Data\Loader\TermObjectLoader { ... }, 'theme' => class WPGraphQL\Data\Loader\ThemeLoader { ... }, 'user' => class WPGraphQL\Data\Loader\UserLoader { ... }, 'user_role' => class WPGraphQL\Data\Loader\UserRoleLoader { ... }]; public $node_resolver = class WPGraphQL\Data\NodeResolver { protected $wp = class WP { ... }; protected $context = ... }; public $connection_query_class = NULL }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'content'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'The &quot;content&quot; field on the &quot;CoreCode&quot; block'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\StringType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'content'; public $returnType = class GraphQL\Type\Definition\StringType { public $name = 'String'; public $description = 'The `String` scalar type represents textual data, represented as UTF-8\ncharacter sequences. The String type is most often used by GraphQL to\nrepresent free-form human-readable text.'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes', 4 => 'content']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/src/Utils/InstrumentSchema.php:151
[23-Feb-2023 00:47:28 UTC] PHP  42. WPGraphQL\ContentBlocks\Blocks\Block->resolve_block_attributes($block = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6b7a0dffd1'], $attribute_name = 'content', $attribute_config = ['type' => 'string', 'source' => 'html', 'selector' => 'code']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql-content-blocks-main/includes/Blocks/Block.php:162
[23-Feb-2023 01:00:23 UTC] PHP Warning:  Undefined array key "default" in /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql-content-blocks-main/includes/Blocks/Block.php on line 214
[23-Feb-2023 01:00:23 UTC] PHP Stack trace:
[23-Feb-2023 01:00:23 UTC] PHP   1. {main}() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/index.php:0
[23-Feb-2023 01:00:23 UTC] PHP   2. require() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/index.php:17
[23-Feb-2023 01:00:23 UTC] PHP   3. wp($query_vars = *uninitialized*) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-blog-header.php:16
[23-Feb-2023 01:00:23 UTC] PHP   4. WP->main($query_args = '') /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/functions.php:1332
[23-Feb-2023 01:00:23 UTC] PHP   5. WP->parse_request($extra_query_vars = '') /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/class-wp.php:780
[23-Feb-2023 01:00:23 UTC] PHP   6. do_action_ref_array($hook_name = 'parse_request', $args = [0 => class WP { public $public_query_vars = [...]; public $private_query_vars = [...]; public $extra_query_vars = [...]; public $query_vars = [...]; public $query_string = ''; public $request = 'graphql'; public $matched_rule = 'graphql/?$'; public $matched_query = 'graphql=true'; public $did_permalink = TRUE }]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/class-wp.php:399
[23-Feb-2023 01:00:23 UTC] PHP   7. WP_Hook->do_action($args = [0 => class WP { public $public_query_vars = [...]; public $private_query_vars = [...]; public $extra_query_vars = [...]; public $query_vars = [...]; public $query_string = ''; public $request = 'graphql'; public $matched_rule = 'graphql/?$'; public $matched_query = 'graphql=true'; public $did_permalink = TRUE }]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/plugin.php:565
[23-Feb-2023 01:00:23 UTC] PHP   8. WP_Hook->apply_filters($value = '', $args = [0 => class WP { public $public_query_vars = [...]; public $private_query_vars = [...]; public $extra_query_vars = [...]; public $query_vars = [...]; public $query_string = ''; public $request = 'graphql'; public $matched_rule = 'graphql/?$'; public $matched_query = 'graphql=true'; public $did_permalink = TRUE }]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/class-wp-hook.php:332
[23-Feb-2023 01:00:23 UTC] PHP   9. WPGraphQL\Router::resolve_http_request(class WP { public $public_query_vars = [0 => 'm', 1 => 'p', 2 => 'posts', 3 => 'w', 4 => 'cat', 5 => 'withcomments', 6 => 'withoutcomments', 7 => 's', 8 => 'search', 9 => 'exact', 10 => 'sentence', 11 => 'calendar', 12 => 'page', 13 => 'paged', 14 => 'more', 15 => 'tb', 16 => 'pb', 17 => 'author', 18 => 'order', 19 => 'orderby', 20 => 'year', 21 => 'monthnum', 22 => 'day', 23 => 'hour', 24 => 'minute', 25 => 'second', 26 => 'name', 27 => 'category_name', 28 => 'tag', 29 => 'feed', 30 => 'author_name', 31 => 'pagename', 32 => 'page_id', 33 => 'error', 34 => 'attachment', 35 => 'attachment_id', 36 => 'subpost', 37 => 'subpost_id', 38 => 'preview', 39 => 'robots', 40 => 'favicon', 41 => 'taxonomy', 42 => 'term', 43 => 'cpage', 44 => 'post_type', 45 => 'embed', 46 => 'post_format', 47 => 'rest_route', 48 => 'sitemap', 49 => 'sitemap-subtype', 50 => 'sitemap-stylesheet', 51 => 'graphql']; public $private_query_vars = [0 => 'offset', 1 => 'posts_per_page', 2 => 'posts_per_archive_page', 3 => 'showposts', 4 => 'nopaging', 5 => 'post_type', 6 => 'post_status', 7 => 'category__in', 8 => 'category__not_in', 9 => 'category__and', 10 => 'tag__in', 11 => 'tag__not_in', 12 => 'tag__and', 13 => 'tag_slug__in', 14 => 'tag_slug__and', 15 => 'tag_id', 16 => 'post_mime_type', 17 => 'perm', 18 => 'comments_per_page', 19 => 'post__in', 20 => 'post__not_in', 21 => 'post_parent', 22 => 'post_parent__in', 23 => 'post_parent__not_in', 24 => 'title', 25 => 'fields']; public $extra_query_vars = []; public $query_vars = ['graphql' => 'true']; public $query_string = ''; public $request = 'graphql'; public $matched_rule = 'graphql/?$'; public $matched_query = 'graphql=true'; public $did_permalink = TRUE }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/class-wp-hook.php:308
[23-Feb-2023 01:00:23 UTC] PHP  10. WPGraphQL\Router::process_http_request() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/src/Router.php:275
[23-Feb-2023 01:00:23 UTC] PHP  11. WPGraphQL\Request->execute_http() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/src/Router.php:481
[23-Feb-2023 01:00:23 UTC] PHP  12. GraphQL\Server\StandardServer->executeRequest($parsedBody = class GraphQL\Server\OperationParams { public $queryId = NULL; public $query = 'fragment BlogInfoFragment on GeneralSettings {\n  title\n  description\n  __typename\n}\n\nfragment NavigationMenuItemFragment on MenuItem {\n  id\n  path\n  label\n  parentId\n  cssClasses\n  menu {\n    node {\n      name\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment FeaturedImageFragment on NodeWithFeaturedImage {\n  featuredImage {\n    node {\n      id\n      sourceUrl\n      altText\n      mediaDetails {\n        width\n        height\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }'...; public $operation = 'GetPost'; public $variables = ['asPreview' => TRUE, 'databaseId' => 5, 'headerLocation' => 'PRIMARY', 'footerLocation' => 'FOOTER']; public $extensions = NULL; private $originalInput = ['operationname' => 'GetPost', 'variables' => [...], 'query' => 'fragment BlogInfoFragment on GeneralSettings {\n  title\n  description\n  __typename\n}\n\nfragment NavigationMenuItemFragment on MenuItem {\n  id\n  path\n  label\n  parentId\n  cssClasses\n  menu {\n    node {\n      name\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment FeaturedImageFragment on NodeWithFeaturedImage {\n  featuredImage {\n    node {\n      id\n      sourceUrl\n      altText\n      mediaDetails {\n        width\n        height\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }'...]; private $readOnly = FALSE }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/src/Request.php:713
[23-Feb-2023 01:00:23 UTC] PHP  13. GraphQL\Server\Helper->executeOperation($config = class GraphQL\Server\ServerConfig { private $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; private $context = class WPGraphQL\AppContext { public $root_url = 'http://localhost:10028'; public $viewer = class WP_User { ... }; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... }; public $request = NULL; public $config = [...]; public $currentConnection = NULL; public $connectionArgs = [...]; public $loaders = [...]; public $node_resolver = class WPGraphQL\Data\NodeResolver { ... }; public $connection_query_class = NULL }; private $rootValue = NULL; private $errorFormatter = NULL; private $errorsHandler = NULL; private $debugFlag = 0; private $queryBatching = TRUE; private $validationRules = [0 => class GraphQL\Validator\Rules\ExecutableDefinitions { ... }, 1 => class GraphQL\Validator\Rules\UniqueOperationNames { ... }, 2 => class GraphQL\Validator\Rules\LoneAnonymousOperation { ... }, 3 => class GraphQL\Validator\Rules\SingleFieldSubscription { ... }, 4 => class GraphQL\Validator\Rules\KnownTypeNames { ... }, 5 => class GraphQL\Validator\Rules\FragmentsOnCompositeTypes { ... }, 6 => class GraphQL\Validator\Rules\VariablesAreInputTypes { ... }, 7 => class GraphQL\Validator\Rules\ScalarLeafs { ... }, 8 => class GraphQL\Validator\Rules\FieldsOnCorrectType { ... }, 9 => class GraphQL\Validator\Rules\UniqueFragmentNames { ... }, 10 => class GraphQL\Validator\Rules\KnownFragmentNames { ... }, 11 => class GraphQL\Validator\Rules\NoUnusedFragments { ... }, 12 => class GraphQL\Validator\Rules\PossibleFragmentSpreads { ... }, 13 => class GraphQL\Validator\Rules\NoFragmentCycles { ... }, 14 => class GraphQL\Validator\Rules\UniqueVariableNames { ... }, 15 => class GraphQL\Validator\Rules\NoUndefinedVariables { ... }, 16 => class GraphQL\Validator\Rules\NoUnusedVariables { ... }, 17 => class GraphQL\Validator\Rules\KnownDirectives { ... }, 18 => class GraphQL\Validator\Rules\UniqueDirectivesPerLocation { ... }, 19 => class GraphQL\Validator\Rules\KnownArgumentNames { ... }, 20 => class GraphQL\Validator\Rules\UniqueArgumentNames { ... }, 21 => class GraphQL\Validator\Rules\ValuesOfCorrectType { ... }, 22 => class GraphQL\Validator\Rules\ProvidedRequiredArguments { ... }, 23 => class GraphQL\Validator\Rules\VariablesInAllowedPosition { ... }, 24 => class GraphQL\Validator\Rules\OverlappingFieldsCanBeMerged { ... }, 25 => class GraphQL\Validator\Rules\UniqueInputFieldNames { ... }, 'require_authentication' => class WPGraphQL\Server\ValidationRules\RequireAuthentication { ... }, 'disable_introspection' => class WPGraphQL\Server\ValidationRules\DisableIntrospection { ... }, 'query_depth' => class WPGraphQL\Server\ValidationRules\QueryDepth { ... }]; private $fieldResolver = NULL; private $promiseAdapter = NULL; private $persistentQueryLoader = NULL }, $op = class GraphQL\Server\OperationParams { public $queryId = NULL; public $query = 'fragment BlogInfoFragment on GeneralSettings {\n  title\n  description\n  __typename\n}\n\nfragment NavigationMenuItemFragment on MenuItem {\n  id\n  path\n  label\n  parentId\n  cssClasses\n  menu {\n    node {\n      name\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment FeaturedImageFragment on NodeWithFeaturedImage {\n  featuredImage {\n    node {\n      id\n      sourceUrl\n      altText\n      mediaDetails {\n        width\n        height\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }'...; public $operation = 'GetPost'; public $variables = ['asPreview' => TRUE, 'databaseId' => 5, 'headerLocation' => 'PRIMARY', 'footerLocation' => 'FOOTER']; public $extensions = NULL; private $originalInput = ['operationname' => 'GetPost', 'variables' => [...], 'query' => 'fragment BlogInfoFragment on GeneralSettings {\n  title\n  description\n  __typename\n}\n\nfragment NavigationMenuItemFragment on MenuItem {\n  id\n  path\n  label\n  parentId\n  cssClasses\n  menu {\n    node {\n      name\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment FeaturedImageFragment on NodeWithFeaturedImage {\n  featuredImage {\n    node {\n      id\n      sourceUrl\n      altText\n      mediaDetails {\n        width\n        height\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }'...]; private $readOnly = FALSE }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Server/StandardServer.php:136
[23-Feb-2023 01:00:23 UTC] PHP  14. GraphQL\Executor\Promise\Adapter\SyncPromiseAdapter->wait($promise = class GraphQL\Executor\Promise\Promise { public $adoptedPromise = class GraphQL\Executor\Promise\Adapter\SyncPromise { public $state = 'pending'; public $result = NULL; private $waiting = [...] }; private $adapter = class GraphQL\Executor\Promise\Adapter\SyncPromiseAdapter {  } }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Server/Helper.php:214
[23-Feb-2023 01:00:23 UTC] PHP  15. GraphQL\Executor\Promise\Adapter\SyncPromise::runQueue() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/Promise/Adapter/SyncPromiseAdapter.php:149
[23-Feb-2023 01:00:23 UTC] PHP  16. GraphQL\Executor\Promise\Adapter\SyncPromise->GraphQL\Executor\Promise\Adapter\{closure:/Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/Promise/Adapter/SyncPromise.php:142-163}() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/Promise/Adapter/SyncPromise.php:53
[23-Feb-2023 01:00:23 UTC] PHP  17. GraphQL\Executor\ReferenceExecutor->GraphQL\Executor\{closure:/Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:650-652}($resolved = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/Promise/Adapter/SyncPromise.php:148
[23-Feb-2023 01:00:23 UTC] PHP  18. GraphQL\Executor\ReferenceExecutor->completeValue($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = ['description' => 'The post type', 'connections' => [...], 'interfaces' => [...], 'fields' => [...], 'model' => 'WPGraphQL\\Model\\Post', 'kind' => 'object', 'name' => 'Post']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['author' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'categories' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentCount' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'comments' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'conditionalTags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentType' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentTypeName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'databaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'date' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'dateGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'desiredSlug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'editingLockedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enclosure' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedScripts' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedStylesheets' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'excerpt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImage' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'guid' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'id' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isContentNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isPreview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRestricted' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRevision' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isSticky' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isTermNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lastEditedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'link' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modified' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modifiedGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pingStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pinged' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postFormats' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'preview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisionOf' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisions' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'slug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'status' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'tags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'template' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'templates' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'terms' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'title' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'toPing' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'uri' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['Node' => class WPGraphQL\Type\WPInterfaceType { ... }, 'ContentNode' => class WPGraphQL\Type\WPInterfaceType { ... }, 'UniformResourceIdentifiable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'DatabaseIdentifier' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTemplate' => class WPGraphQL\Type\WPInterfaceType { ... }, 'Previewable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTitle' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentEditor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithAuthor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithFeaturedImage' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithExcerpt' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithComments' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTrackbacks' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithRevisions' => class WPGraphQL\Type\WPInterfaceType { ... }, 'MenuItemLinkable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentBlocks' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'post'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'An object of the post Type. '; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class WPGraphQL\Type\WPObjectType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'post'; public $returnType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'RootQuery'; public $description = 'The root entry point into the Graph'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post'], $result = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:651
[23-Feb-2023 01:00:23 UTC] PHP  19. GraphQL\Executor\ReferenceExecutor->completeObjectValue($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = ['description' => 'The post type', 'connections' => [...], 'interfaces' => [...], 'fields' => [...], 'model' => 'WPGraphQL\\Model\\Post', 'kind' => 'object', 'name' => 'Post']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['author' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'categories' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentCount' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'comments' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'conditionalTags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentType' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentTypeName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'databaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'date' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'dateGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'desiredSlug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'editingLockedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enclosure' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedScripts' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedStylesheets' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'excerpt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImage' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'guid' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'id' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isContentNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isPreview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRestricted' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRevision' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isSticky' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isTermNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lastEditedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'link' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modified' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modifiedGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pingStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pinged' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postFormats' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'preview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisionOf' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisions' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'slug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'status' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'tags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'template' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'templates' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'terms' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'title' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'toPing' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'uri' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['Node' => class WPGraphQL\Type\WPInterfaceType { ... }, 'ContentNode' => class WPGraphQL\Type\WPInterfaceType { ... }, 'UniformResourceIdentifiable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'DatabaseIdentifier' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTemplate' => class WPGraphQL\Type\WPInterfaceType { ... }, 'Previewable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTitle' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentEditor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithAuthor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithFeaturedImage' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithExcerpt' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithComments' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTrackbacks' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithRevisions' => class WPGraphQL\Type\WPInterfaceType { ... }, 'MenuItemLinkable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentBlocks' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'post'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'An object of the post Type. '; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class WPGraphQL\Type\WPObjectType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'post'; public $returnType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'RootQuery'; public $description = 'The root entry point into the Graph'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post'], $result = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:793
[23-Feb-2023 01:00:23 UTC] PHP  20. GraphQL\Executor\ReferenceExecutor->collectAndExecuteSubfields($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = ['description' => 'The post type', 'connections' => [...], 'interfaces' => [...], 'fields' => [...], 'model' => 'WPGraphQL\\Model\\Post', 'kind' => 'object', 'name' => 'Post']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['author' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'categories' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentCount' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'comments' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'conditionalTags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentType' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentTypeName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'databaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'date' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'dateGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'desiredSlug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'editingLockedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enclosure' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedScripts' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedStylesheets' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'excerpt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImage' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'guid' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'id' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isContentNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isPreview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRestricted' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRevision' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isSticky' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isTermNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lastEditedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'link' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modified' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modifiedGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pingStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pinged' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postFormats' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'preview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisionOf' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisions' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'slug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'status' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'tags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'template' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'templates' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'terms' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'title' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'toPing' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'uri' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['Node' => class WPGraphQL\Type\WPInterfaceType { ... }, 'ContentNode' => class WPGraphQL\Type\WPInterfaceType { ... }, 'UniformResourceIdentifiable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'DatabaseIdentifier' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTemplate' => class WPGraphQL\Type\WPInterfaceType { ... }, 'Previewable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTitle' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentEditor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithAuthor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithFeaturedImage' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithExcerpt' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithComments' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTrackbacks' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithRevisions' => class WPGraphQL\Type\WPInterfaceType { ... }, 'MenuItemLinkable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentBlocks' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post'], $result = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1106
[23-Feb-2023 01:00:23 UTC] PHP  21. GraphQL\Executor\ReferenceExecutor->executeFields($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = ['description' => 'The post type', 'connections' => [...], 'interfaces' => [...], 'fields' => [...], 'model' => 'WPGraphQL\\Model\\Post', 'kind' => 'object', 'name' => 'Post']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['author' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'categories' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentCount' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'comments' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'conditionalTags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentType' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentTypeName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'databaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'date' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'dateGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'desiredSlug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'editingLockedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enclosure' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedScripts' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedStylesheets' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'excerpt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImage' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'guid' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'id' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isContentNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isPreview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRestricted' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRevision' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isSticky' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isTermNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lastEditedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'link' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modified' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modifiedGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pingStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pinged' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postFormats' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'preview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisionOf' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisions' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'slug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'status' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'tags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'template' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'templates' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'terms' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'title' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'toPing' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'uri' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['Node' => class WPGraphQL\Type\WPInterfaceType { ... }, 'ContentNode' => class WPGraphQL\Type\WPInterfaceType { ... }, 'UniformResourceIdentifiable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'DatabaseIdentifier' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTemplate' => class WPGraphQL\Type\WPInterfaceType { ... }, 'Previewable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTitle' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentEditor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithAuthor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithFeaturedImage' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithExcerpt' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithComments' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTrackbacks' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithRevisions' => class WPGraphQL\Type\WPInterfaceType { ... }, 'MenuItemLinkable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentBlocks' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }, $path = [0 => 'post'], $fields = class ArrayObject { private $storage = ['title' => class ArrayObject { ... }, 'content' => class ArrayObject { ... }, 'date' => class ArrayObject { ... }, 'author' => class ArrayObject { ... }, 'featuredImage' => class ArrayObject { ... }, '__typename' => class ArrayObject { ... }, 'contentBlocks' => class ArrayObject { ... }] }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1145
[23-Feb-2023 01:00:23 UTC] PHP  22. GraphQL\Executor\ReferenceExecutor->resolveField($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = ['description' => 'The post type', 'connections' => [...], 'interfaces' => [...], 'fields' => [...], 'model' => 'WPGraphQL\\Model\\Post', 'kind' => 'object', 'name' => 'Post']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['author' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'categories' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentCount' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'comments' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'conditionalTags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentType' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentTypeName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'databaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'date' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'dateGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'desiredSlug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'editingLockedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enclosure' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedScripts' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedStylesheets' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'excerpt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImage' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'guid' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'id' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isContentNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isPreview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRestricted' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRevision' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isSticky' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isTermNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lastEditedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'link' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modified' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modifiedGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pingStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pinged' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postFormats' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'preview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisionOf' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisions' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'slug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'status' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'tags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'template' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'templates' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'terms' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'title' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'toPing' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'uri' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['Node' => class WPGraphQL\Type\WPInterfaceType { ... }, 'ContentNode' => class WPGraphQL\Type\WPInterfaceType { ... }, 'UniformResourceIdentifiable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'DatabaseIdentifier' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTemplate' => class WPGraphQL\Type\WPInterfaceType { ... }, 'Previewable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTitle' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentEditor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithAuthor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithFeaturedImage' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithExcerpt' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithComments' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTrackbacks' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithRevisions' => class WPGraphQL\Type\WPInterfaceType { ... }, 'MenuItemLinkable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentBlocks' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post', 1 => 'contentBlocks']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1195
[23-Feb-2023 01:00:23 UTC] PHP  23. GraphQL\Executor\ReferenceExecutor->completeValueCatchingError($returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks'], $result = [0 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f6baa795cc8'], 2 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f6baa795ccb']]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:557
[23-Feb-2023 01:00:23 UTC] PHP  24. GraphQL\Executor\ReferenceExecutor->completeValue($returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks'], $result = [0 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f6baa795cc8'], 2 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f6baa795ccb']]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:654
[23-Feb-2023 01:00:23 UTC] PHP  25. GraphQL\Executor\ReferenceExecutor->completeListValue($returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks'], $results = [0 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f6baa795cc8'], 2 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f6baa795ccb']]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:761
[23-Feb-2023 01:00:23 UTC] PHP  26. GraphQL\Executor\ReferenceExecutor->completeValueCatchingError($returnType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = ['eagerlyLoadType' => TRUE, 'description' => 'Blocks that can be edited to create content and layouts', 'fields' => [...], 'resolveType' => class Closure { virtual $closure = "$this->WPGraphQL\Type\{closure}", ... }, 'kind' => 'interface', 'name' => 'ContentBlock']; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = []; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6baa795cc8']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:887
[23-Feb-2023 01:00:23 UTC] PHP  27. GraphQL\Executor\ReferenceExecutor->completeValue($returnType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = ['eagerlyLoadType' => TRUE, 'description' => 'Blocks that can be edited to create content and layouts', 'fields' => [...], 'resolveType' => class Closure { virtual $closure = "$this->WPGraphQL\Type\{closure}", ... }, 'kind' => 'interface', 'name' => 'ContentBlock']; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = []; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6baa795cc8']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:654
[23-Feb-2023 01:00:23 UTC] PHP  28. GraphQL\Executor\ReferenceExecutor->completeAbstractValue($returnType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = ['eagerlyLoadType' => TRUE, 'description' => 'Blocks that can be edited to create content and layouts', 'fields' => [...], 'resolveType' => class Closure { virtual $closure = "$this->WPGraphQL\Type\{closure}", ... }, 'kind' => 'interface', 'name' => 'ContentBlock']; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = []; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6baa795cc8']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:789
[23-Feb-2023 01:00:23 UTC] PHP  29. GraphQL\Executor\ReferenceExecutor->completeObjectValue($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = ['description' => 'A block used for editing the site', 'interfaces' => [...], 'eagerlyLoadType' => TRUE, 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCode']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'attributes' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['ContentBlock' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6baa795cc8']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:974
[23-Feb-2023 01:00:23 UTC] PHP  30. GraphQL\Executor\ReferenceExecutor->collectAndExecuteSubfields($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = ['description' => 'A block used for editing the site', 'interfaces' => [...], 'eagerlyLoadType' => TRUE, 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCode']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'attributes' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['ContentBlock' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6baa795cc8']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1106
[23-Feb-2023 01:00:23 UTC] PHP  31. GraphQL\Executor\ReferenceExecutor->executeFields($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = ['description' => 'A block used for editing the site', 'interfaces' => [...], 'eagerlyLoadType' => TRUE, 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCode']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'attributes' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['ContentBlock' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6baa795cc8'], $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0], $fields = class ArrayObject { private $storage = ['__typename' => class ArrayObject { ... }, 'renderedHtml' => class ArrayObject { ... }, 'id' => class ArrayObject { ... }, 'parentId' => class ArrayObject { ... }, 'attributes' => class ArrayObject { ... }] }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1145
[23-Feb-2023 01:00:23 UTC] PHP  32. GraphQL\Executor\ReferenceExecutor->resolveField($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = ['description' => 'A block used for editing the site', 'interfaces' => [...], 'eagerlyLoadType' => TRUE, 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCode']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'attributes' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['ContentBlock' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6baa795cc8'], $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1195
[23-Feb-2023 01:00:23 UTC] PHP  33. GraphQL\Executor\ReferenceExecutor->completeValueCatchingError($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'attributes'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'Attributes of the %s Block Type'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class WPGraphQL\Type\WPObjectType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'attributes'; public $returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes'], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6baa795cc8']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:557
[23-Feb-2023 01:00:23 UTC] PHP  34. GraphQL\Executor\ReferenceExecutor->completeValue($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'attributes'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'Attributes of the %s Block Type'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class WPGraphQL\Type\WPObjectType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'attributes'; public $returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes'], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6baa795cc8']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:654
[23-Feb-2023 01:00:23 UTC] PHP  35. GraphQL\Executor\ReferenceExecutor->completeObjectValue($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'attributes'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'Attributes of the %s Block Type'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class WPGraphQL\Type\WPObjectType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'attributes'; public $returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes'], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6baa795cc8']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:793
[23-Feb-2023 01:00:23 UTC] PHP  36. GraphQL\Executor\ReferenceExecutor->collectAndExecuteSubfields($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes'], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6baa795cc8']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1106
[23-Feb-2023 01:00:23 UTC] PHP  37. GraphQL\Executor\ReferenceExecutor->executeFields($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6baa795cc8'], $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes'], $fields = class ArrayObject { private $storage = ['borderColor' => class ArrayObject { ... }, 'backgroundColor' => class ArrayObject { ... }, 'content' => class ArrayObject { ... }, 'style' => class ArrayObject { ... }, 'textColor' => class ArrayObject { ... }, 'fontSize' => class ArrayObject { ... }, 'fontFamily' => class ArrayObject { ... }, '__typename' => class ArrayObject { ... }] }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1145
[23-Feb-2023 01:00:23 UTC] PHP  38. GraphQL\Executor\ReferenceExecutor->resolveField($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6baa795cc8'], $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes', 4 => 'content']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1195
[23-Feb-2023 01:00:23 UTC] PHP  39. GraphQL\Executor\ReferenceExecutor->resolveFieldValueOrError($fieldDef = class GraphQL\Type\Definition\FieldDefinition { public $name = 'content'; public $args = []; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", public $static = [...]; public $parameter = [...] }; public $mapFn = NULL; public $description = 'The &quot;content&quot; field on the &quot;CoreCode&quot; block'; public $deprecationReason = NULL; public $astNode = NULL; public $config = ['type' => class Closure { virtual $closure = "$this->WPGraphQL\Registry\{closure}", ... }, 'description' => 'The "content" field on the "CoreCode" block', 'resolve' => class Closure { virtual $closure = "$this->WPGraphQL\ContentBlocks\Blocks\{closure}", ... }, 'name' => 'content']; private $type = class GraphQL\Type\Definition\StringType { public $name = 'String'; public $description = 'The `String` scalar type represents textual data, represented as UTF-8\ncharacter sequences. The String type is most often used by GraphQL to\nrepresent free-form human-readable text.'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }, $fieldNode = class GraphQL\Language\AST\FieldNode { public $loc = class GraphQL\Language\AST\Location { public $start = 629; public $end = 636; public $startToken = class GraphQL\Language\Token { ... }; public $endToken = class GraphQL\Language\Token { ... }; public $source = class GraphQL\Language\Source { ... } }; public $kind = 'Field'; public $name = class GraphQL\Language\AST\NameNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'Name'; public $value = 'content' }; public $alias = NULL; public $arguments = class GraphQL\Language\AST\NodeList { private $nodes = [...] }; public $directives = class GraphQL\Language\AST\NodeList { private $nodes = [...] }; public $selectionSet = NULL }, $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", public $static = ['field_resolver' => class Closure { virtual $closure = "$this->WPGraphQL\ContentBlocks\Blocks\{closure}", ... }, 'type_name' => 'CoreCodeAttributes', 'field_key' => 'content', 'field' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $parameter = ['$source' => '<required>', '$args' => '<required>', '$context' => '<required>', '$info' => '<required>'] }, $rootValue = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6baa795cc8'], $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'content'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'The &quot;content&quot; field on the &quot;CoreCode&quot; block'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\StringType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'content'; public $returnType = class GraphQL\Type\Definition\StringType { public $name = 'String'; public $description = 'The `String` scalar type represents textual data, represented as UTF-8\ncharacter sequences. The String type is most often used by GraphQL to\nrepresent free-form human-readable text.'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes', 4 => 'content']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:550
[23-Feb-2023 01:00:23 UTC] PHP  40. WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure:/Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/src/Utils/InstrumentSchema.php:100-188}($source = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6baa795cc8'], $args = [], $context = class WPGraphQL\AppContext { public $root_url = 'http://localhost:10028'; public $viewer = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] }; public $request = NULL; public $config = ['registered_editor_blocks' => [...]]; public $currentConnection = NULL; public $connectionArgs = []; public $loaders = ['comment_author' => class WPGraphQL\Data\Loader\CommentAuthorLoader { ... }, 'comment' => class WPGraphQL\Data\Loader\CommentLoader { ... }, 'enqueued_script' => class WPGraphQL\Data\Loader\EnqueuedScriptLoader { ... }, 'enqueued_stylesheet' => class WPGraphQL\Data\Loader\EnqueuedStylesheetLoader { ... }, 'plugin' => class WPGraphQL\Data\Loader\PluginLoader { ... }, 'nav_menu_item' => class WPGraphQL\Data\Loader\PostObjectLoader { ... }, 'post' => class WPGraphQL\Data\Loader\PostObjectLoader { ... }, 'post_type' => class WPGraphQL\Data\Loader\PostTypeLoader { ... }, 'taxonomy' => class WPGraphQL\Data\Loader\TaxonomyLoader { ... }, 'term' => class WPGraphQL\Data\Loader\TermObjectLoader { ... }, 'theme' => class WPGraphQL\Data\Loader\ThemeLoader { ... }, 'user' => class WPGraphQL\Data\Loader\UserLoader { ... }, 'user_role' => class WPGraphQL\Data\Loader\UserRoleLoader { ... }]; public $node_resolver = class WPGraphQL\Data\NodeResolver { protected $wp = class WP { ... }; protected $context = ... }; public $connection_query_class = NULL }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'content'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'The &quot;content&quot; field on the &quot;CoreCode&quot; block'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\StringType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'content'; public $returnType = class GraphQL\Type\Definition\StringType { public $name = 'String'; public $description = 'The `String` scalar type represents textual data, represented as UTF-8\ncharacter sequences. The String type is most often used by GraphQL to\nrepresent free-form human-readable text.'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes', 4 => 'content']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:623
[23-Feb-2023 01:00:23 UTC] PHP  41. WPGraphQL\ContentBlocks\Blocks\Block->WPGraphQL\ContentBlocks\Blocks\{closure:/Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql-content-blocks-main/includes/Blocks/Block.php:161-163}($block = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6baa795cc8'], $args = [], $context = class WPGraphQL\AppContext { public $root_url = 'http://localhost:10028'; public $viewer = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] }; public $request = NULL; public $config = ['registered_editor_blocks' => [...]]; public $currentConnection = NULL; public $connectionArgs = []; public $loaders = ['comment_author' => class WPGraphQL\Data\Loader\CommentAuthorLoader { ... }, 'comment' => class WPGraphQL\Data\Loader\CommentLoader { ... }, 'enqueued_script' => class WPGraphQL\Data\Loader\EnqueuedScriptLoader { ... }, 'enqueued_stylesheet' => class WPGraphQL\Data\Loader\EnqueuedStylesheetLoader { ... }, 'plugin' => class WPGraphQL\Data\Loader\PluginLoader { ... }, 'nav_menu_item' => class WPGraphQL\Data\Loader\PostObjectLoader { ... }, 'post' => class WPGraphQL\Data\Loader\PostObjectLoader { ... }, 'post_type' => class WPGraphQL\Data\Loader\PostTypeLoader { ... }, 'taxonomy' => class WPGraphQL\Data\Loader\TaxonomyLoader { ... }, 'term' => class WPGraphQL\Data\Loader\TermObjectLoader { ... }, 'theme' => class WPGraphQL\Data\Loader\ThemeLoader { ... }, 'user' => class WPGraphQL\Data\Loader\UserLoader { ... }, 'user_role' => class WPGraphQL\Data\Loader\UserRoleLoader { ... }]; public $node_resolver = class WPGraphQL\Data\NodeResolver { protected $wp = class WP { ... }; protected $context = ... }; public $connection_query_class = NULL }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'content'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'The &quot;content&quot; field on the &quot;CoreCode&quot; block'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\StringType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'content'; public $returnType = class GraphQL\Type\Definition\StringType { public $name = 'String'; public $description = 'The `String` scalar type represents textual data, represented as UTF-8\ncharacter sequences. The String type is most often used by GraphQL to\nrepresent free-form human-readable text.'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes', 4 => 'content']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/src/Utils/InstrumentSchema.php:151
[23-Feb-2023 01:00:23 UTC] PHP  42. WPGraphQL\ContentBlocks\Blocks\Block->resolve_block_attributes($block = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6baa795cc8'], $attribute_name = 'content', $attribute_config = ['type' => 'string', 'source' => 'html', 'selector' => 'code']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql-content-blocks-main/includes/Blocks/Block.php:162
[23-Feb-2023 01:00:23 UTC] PHP Warning:  Undefined array key "default" in /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql-content-blocks-main/includes/Blocks/Block.php on line 214
[23-Feb-2023 01:00:23 UTC] PHP Stack trace:
[23-Feb-2023 01:00:23 UTC] PHP   1. {main}() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/index.php:0
[23-Feb-2023 01:00:23 UTC] PHP   2. require() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/index.php:17
[23-Feb-2023 01:00:23 UTC] PHP   3. wp($query_vars = *uninitialized*) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-blog-header.php:16
[23-Feb-2023 01:00:23 UTC] PHP   4. WP->main($query_args = '') /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/functions.php:1332
[23-Feb-2023 01:00:23 UTC] PHP   5. WP->parse_request($extra_query_vars = '') /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/class-wp.php:780
[23-Feb-2023 01:00:23 UTC] PHP   6. do_action_ref_array($hook_name = 'parse_request', $args = [0 => class WP { public $public_query_vars = [...]; public $private_query_vars = [...]; public $extra_query_vars = [...]; public $query_vars = [...]; public $query_string = ''; public $request = 'graphql'; public $matched_rule = 'graphql/?$'; public $matched_query = 'graphql=true'; public $did_permalink = TRUE }]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/class-wp.php:399
[23-Feb-2023 01:00:23 UTC] PHP   7. WP_Hook->do_action($args = [0 => class WP { public $public_query_vars = [...]; public $private_query_vars = [...]; public $extra_query_vars = [...]; public $query_vars = [...]; public $query_string = ''; public $request = 'graphql'; public $matched_rule = 'graphql/?$'; public $matched_query = 'graphql=true'; public $did_permalink = TRUE }]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/plugin.php:565
[23-Feb-2023 01:00:23 UTC] PHP   8. WP_Hook->apply_filters($value = '', $args = [0 => class WP { public $public_query_vars = [...]; public $private_query_vars = [...]; public $extra_query_vars = [...]; public $query_vars = [...]; public $query_string = ''; public $request = 'graphql'; public $matched_rule = 'graphql/?$'; public $matched_query = 'graphql=true'; public $did_permalink = TRUE }]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/class-wp-hook.php:332
[23-Feb-2023 01:00:23 UTC] PHP   9. WPGraphQL\Router::resolve_http_request(class WP { public $public_query_vars = [0 => 'm', 1 => 'p', 2 => 'posts', 3 => 'w', 4 => 'cat', 5 => 'withcomments', 6 => 'withoutcomments', 7 => 's', 8 => 'search', 9 => 'exact', 10 => 'sentence', 11 => 'calendar', 12 => 'page', 13 => 'paged', 14 => 'more', 15 => 'tb', 16 => 'pb', 17 => 'author', 18 => 'order', 19 => 'orderby', 20 => 'year', 21 => 'monthnum', 22 => 'day', 23 => 'hour', 24 => 'minute', 25 => 'second', 26 => 'name', 27 => 'category_name', 28 => 'tag', 29 => 'feed', 30 => 'author_name', 31 => 'pagename', 32 => 'page_id', 33 => 'error', 34 => 'attachment', 35 => 'attachment_id', 36 => 'subpost', 37 => 'subpost_id', 38 => 'preview', 39 => 'robots', 40 => 'favicon', 41 => 'taxonomy', 42 => 'term', 43 => 'cpage', 44 => 'post_type', 45 => 'embed', 46 => 'post_format', 47 => 'rest_route', 48 => 'sitemap', 49 => 'sitemap-subtype', 50 => 'sitemap-stylesheet', 51 => 'graphql']; public $private_query_vars = [0 => 'offset', 1 => 'posts_per_page', 2 => 'posts_per_archive_page', 3 => 'showposts', 4 => 'nopaging', 5 => 'post_type', 6 => 'post_status', 7 => 'category__in', 8 => 'category__not_in', 9 => 'category__and', 10 => 'tag__in', 11 => 'tag__not_in', 12 => 'tag__and', 13 => 'tag_slug__in', 14 => 'tag_slug__and', 15 => 'tag_id', 16 => 'post_mime_type', 17 => 'perm', 18 => 'comments_per_page', 19 => 'post__in', 20 => 'post__not_in', 21 => 'post_parent', 22 => 'post_parent__in', 23 => 'post_parent__not_in', 24 => 'title', 25 => 'fields']; public $extra_query_vars = []; public $query_vars = ['graphql' => 'true']; public $query_string = ''; public $request = 'graphql'; public $matched_rule = 'graphql/?$'; public $matched_query = 'graphql=true'; public $did_permalink = TRUE }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/class-wp-hook.php:308
[23-Feb-2023 01:00:23 UTC] PHP  10. WPGraphQL\Router::process_http_request() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/src/Router.php:275
[23-Feb-2023 01:00:23 UTC] PHP  11. WPGraphQL\Request->execute_http() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/src/Router.php:481
[23-Feb-2023 01:00:23 UTC] PHP  12. GraphQL\Server\StandardServer->executeRequest($parsedBody = class GraphQL\Server\OperationParams { public $queryId = NULL; public $query = 'fragment BlogInfoFragment on GeneralSettings {\n  title\n  description\n  __typename\n}\n\nfragment NavigationMenuItemFragment on MenuItem {\n  id\n  path\n  label\n  parentId\n  cssClasses\n  menu {\n    node {\n      name\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment FeaturedImageFragment on NodeWithFeaturedImage {\n  featuredImage {\n    node {\n      id\n      sourceUrl\n      altText\n      mediaDetails {\n        width\n        height\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }'...; public $operation = 'GetPost'; public $variables = ['asPreview' => TRUE, 'databaseId' => 5, 'headerLocation' => 'PRIMARY', 'footerLocation' => 'FOOTER']; public $extensions = NULL; private $originalInput = ['operationname' => 'GetPost', 'variables' => [...], 'query' => 'fragment BlogInfoFragment on GeneralSettings {\n  title\n  description\n  __typename\n}\n\nfragment NavigationMenuItemFragment on MenuItem {\n  id\n  path\n  label\n  parentId\n  cssClasses\n  menu {\n    node {\n      name\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment FeaturedImageFragment on NodeWithFeaturedImage {\n  featuredImage {\n    node {\n      id\n      sourceUrl\n      altText\n      mediaDetails {\n        width\n        height\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }'...]; private $readOnly = FALSE }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/src/Request.php:713
[23-Feb-2023 01:00:23 UTC] PHP  13. GraphQL\Server\Helper->executeOperation($config = class GraphQL\Server\ServerConfig { private $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; private $context = class WPGraphQL\AppContext { public $root_url = 'http://localhost:10028'; public $viewer = class WP_User { ... }; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... }; public $request = NULL; public $config = [...]; public $currentConnection = NULL; public $connectionArgs = [...]; public $loaders = [...]; public $node_resolver = class WPGraphQL\Data\NodeResolver { ... }; public $connection_query_class = NULL }; private $rootValue = NULL; private $errorFormatter = NULL; private $errorsHandler = NULL; private $debugFlag = 0; private $queryBatching = TRUE; private $validationRules = [0 => class GraphQL\Validator\Rules\ExecutableDefinitions { ... }, 1 => class GraphQL\Validator\Rules\UniqueOperationNames { ... }, 2 => class GraphQL\Validator\Rules\LoneAnonymousOperation { ... }, 3 => class GraphQL\Validator\Rules\SingleFieldSubscription { ... }, 4 => class GraphQL\Validator\Rules\KnownTypeNames { ... }, 5 => class GraphQL\Validator\Rules\FragmentsOnCompositeTypes { ... }, 6 => class GraphQL\Validator\Rules\VariablesAreInputTypes { ... }, 7 => class GraphQL\Validator\Rules\ScalarLeafs { ... }, 8 => class GraphQL\Validator\Rules\FieldsOnCorrectType { ... }, 9 => class GraphQL\Validator\Rules\UniqueFragmentNames { ... }, 10 => class GraphQL\Validator\Rules\KnownFragmentNames { ... }, 11 => class GraphQL\Validator\Rules\NoUnusedFragments { ... }, 12 => class GraphQL\Validator\Rules\PossibleFragmentSpreads { ... }, 13 => class GraphQL\Validator\Rules\NoFragmentCycles { ... }, 14 => class GraphQL\Validator\Rules\UniqueVariableNames { ... }, 15 => class GraphQL\Validator\Rules\NoUndefinedVariables { ... }, 16 => class GraphQL\Validator\Rules\NoUnusedVariables { ... }, 17 => class GraphQL\Validator\Rules\KnownDirectives { ... }, 18 => class GraphQL\Validator\Rules\UniqueDirectivesPerLocation { ... }, 19 => class GraphQL\Validator\Rules\KnownArgumentNames { ... }, 20 => class GraphQL\Validator\Rules\UniqueArgumentNames { ... }, 21 => class GraphQL\Validator\Rules\ValuesOfCorrectType { ... }, 22 => class GraphQL\Validator\Rules\ProvidedRequiredArguments { ... }, 23 => class GraphQL\Validator\Rules\VariablesInAllowedPosition { ... }, 24 => class GraphQL\Validator\Rules\OverlappingFieldsCanBeMerged { ... }, 25 => class GraphQL\Validator\Rules\UniqueInputFieldNames { ... }, 'require_authentication' => class WPGraphQL\Server\ValidationRules\RequireAuthentication { ... }, 'disable_introspection' => class WPGraphQL\Server\ValidationRules\DisableIntrospection { ... }, 'query_depth' => class WPGraphQL\Server\ValidationRules\QueryDepth { ... }]; private $fieldResolver = NULL; private $promiseAdapter = NULL; private $persistentQueryLoader = NULL }, $op = class GraphQL\Server\OperationParams { public $queryId = NULL; public $query = 'fragment BlogInfoFragment on GeneralSettings {\n  title\n  description\n  __typename\n}\n\nfragment NavigationMenuItemFragment on MenuItem {\n  id\n  path\n  label\n  parentId\n  cssClasses\n  menu {\n    node {\n      name\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment FeaturedImageFragment on NodeWithFeaturedImage {\n  featuredImage {\n    node {\n      id\n      sourceUrl\n      altText\n      mediaDetails {\n        width\n        height\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }'...; public $operation = 'GetPost'; public $variables = ['asPreview' => TRUE, 'databaseId' => 5, 'headerLocation' => 'PRIMARY', 'footerLocation' => 'FOOTER']; public $extensions = NULL; private $originalInput = ['operationname' => 'GetPost', 'variables' => [...], 'query' => 'fragment BlogInfoFragment on GeneralSettings {\n  title\n  description\n  __typename\n}\n\nfragment NavigationMenuItemFragment on MenuItem {\n  id\n  path\n  label\n  parentId\n  cssClasses\n  menu {\n    node {\n      name\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment FeaturedImageFragment on NodeWithFeaturedImage {\n  featuredImage {\n    node {\n      id\n      sourceUrl\n      altText\n      mediaDetails {\n        width\n        height\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }'...]; private $readOnly = FALSE }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Server/StandardServer.php:136
[23-Feb-2023 01:00:23 UTC] PHP  14. GraphQL\Executor\Promise\Adapter\SyncPromiseAdapter->wait($promise = class GraphQL\Executor\Promise\Promise { public $adoptedPromise = class GraphQL\Executor\Promise\Adapter\SyncPromise { public $state = 'pending'; public $result = NULL; private $waiting = [...] }; private $adapter = class GraphQL\Executor\Promise\Adapter\SyncPromiseAdapter {  } }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Server/Helper.php:214
[23-Feb-2023 01:00:23 UTC] PHP  15. GraphQL\Executor\Promise\Adapter\SyncPromise::runQueue() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/Promise/Adapter/SyncPromiseAdapter.php:149
[23-Feb-2023 01:00:23 UTC] PHP  16. GraphQL\Executor\Promise\Adapter\SyncPromise->GraphQL\Executor\Promise\Adapter\{closure:/Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/Promise/Adapter/SyncPromise.php:142-163}() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/Promise/Adapter/SyncPromise.php:53
[23-Feb-2023 01:00:23 UTC] PHP  17. GraphQL\Executor\ReferenceExecutor->GraphQL\Executor\{closure:/Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:650-652}($resolved = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/Promise/Adapter/SyncPromise.php:148
[23-Feb-2023 01:00:23 UTC] PHP  18. GraphQL\Executor\ReferenceExecutor->completeValue($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = ['description' => 'The post type', 'connections' => [...], 'interfaces' => [...], 'fields' => [...], 'model' => 'WPGraphQL\\Model\\Post', 'kind' => 'object', 'name' => 'Post']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['author' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'categories' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentCount' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'comments' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'conditionalTags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentType' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentTypeName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'databaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'date' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'dateGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'desiredSlug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'editingLockedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enclosure' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedScripts' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedStylesheets' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'excerpt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImage' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'guid' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'id' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isContentNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isPreview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRestricted' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRevision' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isSticky' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isTermNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lastEditedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'link' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modified' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modifiedGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pingStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pinged' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postFormats' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'preview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisionOf' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisions' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'slug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'status' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'tags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'template' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'templates' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'terms' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'title' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'toPing' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'uri' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['Node' => class WPGraphQL\Type\WPInterfaceType { ... }, 'ContentNode' => class WPGraphQL\Type\WPInterfaceType { ... }, 'UniformResourceIdentifiable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'DatabaseIdentifier' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTemplate' => class WPGraphQL\Type\WPInterfaceType { ... }, 'Previewable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTitle' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentEditor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithAuthor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithFeaturedImage' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithExcerpt' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithComments' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTrackbacks' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithRevisions' => class WPGraphQL\Type\WPInterfaceType { ... }, 'MenuItemLinkable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentBlocks' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'post'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'An object of the post Type. '; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class WPGraphQL\Type\WPObjectType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'post'; public $returnType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'RootQuery'; public $description = 'The root entry point into the Graph'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post'], $result = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:651
[23-Feb-2023 01:00:23 UTC] PHP  19. GraphQL\Executor\ReferenceExecutor->completeObjectValue($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = ['description' => 'The post type', 'connections' => [...], 'interfaces' => [...], 'fields' => [...], 'model' => 'WPGraphQL\\Model\\Post', 'kind' => 'object', 'name' => 'Post']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['author' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'categories' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentCount' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'comments' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'conditionalTags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentType' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentTypeName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'databaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'date' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'dateGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'desiredSlug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'editingLockedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enclosure' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedScripts' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedStylesheets' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'excerpt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImage' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'guid' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'id' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isContentNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isPreview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRestricted' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRevision' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isSticky' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isTermNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lastEditedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'link' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modified' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modifiedGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pingStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pinged' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postFormats' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'preview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisionOf' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisions' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'slug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'status' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'tags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'template' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'templates' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'terms' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'title' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'toPing' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'uri' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['Node' => class WPGraphQL\Type\WPInterfaceType { ... }, 'ContentNode' => class WPGraphQL\Type\WPInterfaceType { ... }, 'UniformResourceIdentifiable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'DatabaseIdentifier' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTemplate' => class WPGraphQL\Type\WPInterfaceType { ... }, 'Previewable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTitle' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentEditor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithAuthor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithFeaturedImage' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithExcerpt' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithComments' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTrackbacks' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithRevisions' => class WPGraphQL\Type\WPInterfaceType { ... }, 'MenuItemLinkable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentBlocks' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'post'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'An object of the post Type. '; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class WPGraphQL\Type\WPObjectType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'post'; public $returnType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'RootQuery'; public $description = 'The root entry point into the Graph'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post'], $result = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:793
[23-Feb-2023 01:00:23 UTC] PHP  20. GraphQL\Executor\ReferenceExecutor->collectAndExecuteSubfields($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = ['description' => 'The post type', 'connections' => [...], 'interfaces' => [...], 'fields' => [...], 'model' => 'WPGraphQL\\Model\\Post', 'kind' => 'object', 'name' => 'Post']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['author' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'categories' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentCount' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'comments' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'conditionalTags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentType' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentTypeName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'databaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'date' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'dateGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'desiredSlug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'editingLockedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enclosure' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedScripts' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedStylesheets' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'excerpt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImage' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'guid' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'id' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isContentNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isPreview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRestricted' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRevision' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isSticky' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isTermNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lastEditedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'link' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modified' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modifiedGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pingStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pinged' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postFormats' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'preview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisionOf' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisions' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'slug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'status' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'tags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'template' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'templates' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'terms' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'title' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'toPing' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'uri' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['Node' => class WPGraphQL\Type\WPInterfaceType { ... }, 'ContentNode' => class WPGraphQL\Type\WPInterfaceType { ... }, 'UniformResourceIdentifiable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'DatabaseIdentifier' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTemplate' => class WPGraphQL\Type\WPInterfaceType { ... }, 'Previewable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTitle' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentEditor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithAuthor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithFeaturedImage' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithExcerpt' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithComments' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTrackbacks' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithRevisions' => class WPGraphQL\Type\WPInterfaceType { ... }, 'MenuItemLinkable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentBlocks' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post'], $result = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1106
[23-Feb-2023 01:00:23 UTC] PHP  21. GraphQL\Executor\ReferenceExecutor->executeFields($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = ['description' => 'The post type', 'connections' => [...], 'interfaces' => [...], 'fields' => [...], 'model' => 'WPGraphQL\\Model\\Post', 'kind' => 'object', 'name' => 'Post']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['author' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'categories' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentCount' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'comments' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'conditionalTags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentType' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentTypeName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'databaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'date' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'dateGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'desiredSlug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'editingLockedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enclosure' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedScripts' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedStylesheets' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'excerpt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImage' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'guid' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'id' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isContentNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isPreview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRestricted' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRevision' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isSticky' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isTermNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lastEditedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'link' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modified' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modifiedGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pingStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pinged' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postFormats' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'preview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisionOf' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisions' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'slug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'status' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'tags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'template' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'templates' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'terms' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'title' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'toPing' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'uri' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['Node' => class WPGraphQL\Type\WPInterfaceType { ... }, 'ContentNode' => class WPGraphQL\Type\WPInterfaceType { ... }, 'UniformResourceIdentifiable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'DatabaseIdentifier' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTemplate' => class WPGraphQL\Type\WPInterfaceType { ... }, 'Previewable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTitle' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentEditor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithAuthor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithFeaturedImage' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithExcerpt' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithComments' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTrackbacks' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithRevisions' => class WPGraphQL\Type\WPInterfaceType { ... }, 'MenuItemLinkable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentBlocks' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }, $path = [0 => 'post'], $fields = class ArrayObject { private $storage = ['title' => class ArrayObject { ... }, 'content' => class ArrayObject { ... }, 'date' => class ArrayObject { ... }, 'author' => class ArrayObject { ... }, 'featuredImage' => class ArrayObject { ... }, '__typename' => class ArrayObject { ... }, 'contentBlocks' => class ArrayObject { ... }] }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1145
[23-Feb-2023 01:00:23 UTC] PHP  22. GraphQL\Executor\ReferenceExecutor->resolveField($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = ['description' => 'The post type', 'connections' => [...], 'interfaces' => [...], 'fields' => [...], 'model' => 'WPGraphQL\\Model\\Post', 'kind' => 'object', 'name' => 'Post']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['author' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'categories' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentCount' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'comments' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'conditionalTags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentType' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentTypeName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'databaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'date' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'dateGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'desiredSlug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'editingLockedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enclosure' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedScripts' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedStylesheets' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'excerpt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImage' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'guid' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'id' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isContentNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isPreview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRestricted' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRevision' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isSticky' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isTermNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lastEditedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'link' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modified' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modifiedGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pingStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pinged' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postFormats' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'preview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisionOf' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisions' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'slug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'status' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'tags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'template' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'templates' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'terms' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'title' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'toPing' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'uri' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['Node' => class WPGraphQL\Type\WPInterfaceType { ... }, 'ContentNode' => class WPGraphQL\Type\WPInterfaceType { ... }, 'UniformResourceIdentifiable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'DatabaseIdentifier' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTemplate' => class WPGraphQL\Type\WPInterfaceType { ... }, 'Previewable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTitle' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentEditor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithAuthor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithFeaturedImage' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithExcerpt' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithComments' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTrackbacks' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithRevisions' => class WPGraphQL\Type\WPInterfaceType { ... }, 'MenuItemLinkable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentBlocks' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post', 1 => 'contentBlocks']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1195
[23-Feb-2023 01:00:23 UTC] PHP  23. GraphQL\Executor\ReferenceExecutor->completeValueCatchingError($returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks'], $result = [0 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f6baa795cc8'], 2 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f6baa795ccb']]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:557
[23-Feb-2023 01:00:23 UTC] PHP  24. GraphQL\Executor\ReferenceExecutor->completeValue($returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks'], $result = [0 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f6baa795cc8'], 2 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f6baa795ccb']]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:654
[23-Feb-2023 01:00:23 UTC] PHP  25. GraphQL\Executor\ReferenceExecutor->completeListValue($returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks'], $results = [0 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f6baa795cc8'], 2 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f6baa795ccb']]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:761
[23-Feb-2023 01:00:23 UTC] PHP  26. GraphQL\Executor\ReferenceExecutor->completeValueCatchingError($returnType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = ['eagerlyLoadType' => TRUE, 'description' => 'Blocks that can be edited to create content and layouts', 'fields' => [...], 'resolveType' => class Closure { virtual $closure = "$this->WPGraphQL\Type\{closure}", ... }, 'kind' => 'interface', 'name' => 'ContentBlock']; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = []; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6baa795ccb']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:887
[23-Feb-2023 01:00:23 UTC] PHP  27. GraphQL\Executor\ReferenceExecutor->completeValue($returnType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = ['eagerlyLoadType' => TRUE, 'description' => 'Blocks that can be edited to create content and layouts', 'fields' => [...], 'resolveType' => class Closure { virtual $closure = "$this->WPGraphQL\Type\{closure}", ... }, 'kind' => 'interface', 'name' => 'ContentBlock']; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = []; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6baa795ccb']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:654
[23-Feb-2023 01:00:23 UTC] PHP  28. GraphQL\Executor\ReferenceExecutor->completeAbstractValue($returnType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = ['eagerlyLoadType' => TRUE, 'description' => 'Blocks that can be edited to create content and layouts', 'fields' => [...], 'resolveType' => class Closure { virtual $closure = "$this->WPGraphQL\Type\{closure}", ... }, 'kind' => 'interface', 'name' => 'ContentBlock']; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = []; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6baa795ccb']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:789
[23-Feb-2023 01:00:23 UTC] PHP  29. GraphQL\Executor\ReferenceExecutor->completeObjectValue($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = ['description' => 'A block used for editing the site', 'interfaces' => [...], 'eagerlyLoadType' => TRUE, 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCode']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'attributes' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['ContentBlock' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6baa795ccb']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:974
[23-Feb-2023 01:00:23 UTC] PHP  30. GraphQL\Executor\ReferenceExecutor->collectAndExecuteSubfields($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = ['description' => 'A block used for editing the site', 'interfaces' => [...], 'eagerlyLoadType' => TRUE, 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCode']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'attributes' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['ContentBlock' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6baa795ccb']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1106
[23-Feb-2023 01:00:23 UTC] PHP  31. GraphQL\Executor\ReferenceExecutor->executeFields($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = ['description' => 'A block used for editing the site', 'interfaces' => [...], 'eagerlyLoadType' => TRUE, 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCode']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'attributes' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['ContentBlock' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6baa795ccb'], $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1], $fields = class ArrayObject { private $storage = ['__typename' => class ArrayObject { ... }, 'renderedHtml' => class ArrayObject { ... }, 'id' => class ArrayObject { ... }, 'parentId' => class ArrayObject { ... }, 'attributes' => class ArrayObject { ... }] }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1145
[23-Feb-2023 01:00:23 UTC] PHP  32. GraphQL\Executor\ReferenceExecutor->resolveField($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = ['description' => 'A block used for editing the site', 'interfaces' => [...], 'eagerlyLoadType' => TRUE, 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCode']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'attributes' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['ContentBlock' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6baa795ccb'], $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1195
[23-Feb-2023 01:00:23 UTC] PHP  33. GraphQL\Executor\ReferenceExecutor->completeValueCatchingError($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'attributes'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'Attributes of the %s Block Type'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class WPGraphQL\Type\WPObjectType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'attributes'; public $returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes'], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6baa795ccb']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:557
[23-Feb-2023 01:00:23 UTC] PHP  34. GraphQL\Executor\ReferenceExecutor->completeValue($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'attributes'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'Attributes of the %s Block Type'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class WPGraphQL\Type\WPObjectType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'attributes'; public $returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes'], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6baa795ccb']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:654
[23-Feb-2023 01:00:23 UTC] PHP  35. GraphQL\Executor\ReferenceExecutor->completeObjectValue($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'attributes'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'Attributes of the %s Block Type'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class WPGraphQL\Type\WPObjectType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'attributes'; public $returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes'], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6baa795ccb']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:793
[23-Feb-2023 01:00:23 UTC] PHP  36. GraphQL\Executor\ReferenceExecutor->collectAndExecuteSubfields($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes'], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6baa795ccb']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1106
[23-Feb-2023 01:00:23 UTC] PHP  37. GraphQL\Executor\ReferenceExecutor->executeFields($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6baa795ccb'], $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes'], $fields = class ArrayObject { private $storage = ['borderColor' => class ArrayObject { ... }, 'backgroundColor' => class ArrayObject { ... }, 'content' => class ArrayObject { ... }, 'style' => class ArrayObject { ... }, 'textColor' => class ArrayObject { ... }, 'fontSize' => class ArrayObject { ... }, 'fontFamily' => class ArrayObject { ... }, '__typename' => class ArrayObject { ... }] }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1145
[23-Feb-2023 01:00:23 UTC] PHP  38. GraphQL\Executor\ReferenceExecutor->resolveField($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6baa795ccb'], $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes', 4 => 'content']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1195
[23-Feb-2023 01:00:23 UTC] PHP  39. GraphQL\Executor\ReferenceExecutor->resolveFieldValueOrError($fieldDef = class GraphQL\Type\Definition\FieldDefinition { public $name = 'content'; public $args = []; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", public $static = [...]; public $parameter = [...] }; public $mapFn = NULL; public $description = 'The &quot;content&quot; field on the &quot;CoreCode&quot; block'; public $deprecationReason = NULL; public $astNode = NULL; public $config = ['type' => class Closure { virtual $closure = "$this->WPGraphQL\Registry\{closure}", ... }, 'description' => 'The "content" field on the "CoreCode" block', 'resolve' => class Closure { virtual $closure = "$this->WPGraphQL\ContentBlocks\Blocks\{closure}", ... }, 'name' => 'content']; private $type = class GraphQL\Type\Definition\StringType { public $name = 'String'; public $description = 'The `String` scalar type represents textual data, represented as UTF-8\ncharacter sequences. The String type is most often used by GraphQL to\nrepresent free-form human-readable text.'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }, $fieldNode = class GraphQL\Language\AST\FieldNode { public $loc = class GraphQL\Language\AST\Location { public $start = 629; public $end = 636; public $startToken = class GraphQL\Language\Token { ... }; public $endToken = class GraphQL\Language\Token { ... }; public $source = class GraphQL\Language\Source { ... } }; public $kind = 'Field'; public $name = class GraphQL\Language\AST\NameNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'Name'; public $value = 'content' }; public $alias = NULL; public $arguments = class GraphQL\Language\AST\NodeList { private $nodes = [...] }; public $directives = class GraphQL\Language\AST\NodeList { private $nodes = [...] }; public $selectionSet = NULL }, $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", public $static = ['field_resolver' => class Closure { virtual $closure = "$this->WPGraphQL\ContentBlocks\Blocks\{closure}", ... }, 'type_name' => 'CoreCodeAttributes', 'field_key' => 'content', 'field' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $parameter = ['$source' => '<required>', '$args' => '<required>', '$context' => '<required>', '$info' => '<required>'] }, $rootValue = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6baa795ccb'], $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'content'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'The &quot;content&quot; field on the &quot;CoreCode&quot; block'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\StringType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'content'; public $returnType = class GraphQL\Type\Definition\StringType { public $name = 'String'; public $description = 'The `String` scalar type represents textual data, represented as UTF-8\ncharacter sequences. The String type is most often used by GraphQL to\nrepresent free-form human-readable text.'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes', 4 => 'content']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:550
[23-Feb-2023 01:00:23 UTC] PHP  40. WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure:/Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/src/Utils/InstrumentSchema.php:100-188}($source = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6baa795ccb'], $args = [], $context = class WPGraphQL\AppContext { public $root_url = 'http://localhost:10028'; public $viewer = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] }; public $request = NULL; public $config = ['registered_editor_blocks' => [...]]; public $currentConnection = NULL; public $connectionArgs = []; public $loaders = ['comment_author' => class WPGraphQL\Data\Loader\CommentAuthorLoader { ... }, 'comment' => class WPGraphQL\Data\Loader\CommentLoader { ... }, 'enqueued_script' => class WPGraphQL\Data\Loader\EnqueuedScriptLoader { ... }, 'enqueued_stylesheet' => class WPGraphQL\Data\Loader\EnqueuedStylesheetLoader { ... }, 'plugin' => class WPGraphQL\Data\Loader\PluginLoader { ... }, 'nav_menu_item' => class WPGraphQL\Data\Loader\PostObjectLoader { ... }, 'post' => class WPGraphQL\Data\Loader\PostObjectLoader { ... }, 'post_type' => class WPGraphQL\Data\Loader\PostTypeLoader { ... }, 'taxonomy' => class WPGraphQL\Data\Loader\TaxonomyLoader { ... }, 'term' => class WPGraphQL\Data\Loader\TermObjectLoader { ... }, 'theme' => class WPGraphQL\Data\Loader\ThemeLoader { ... }, 'user' => class WPGraphQL\Data\Loader\UserLoader { ... }, 'user_role' => class WPGraphQL\Data\Loader\UserRoleLoader { ... }]; public $node_resolver = class WPGraphQL\Data\NodeResolver { protected $wp = class WP { ... }; protected $context = ... }; public $connection_query_class = NULL }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'content'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'The &quot;content&quot; field on the &quot;CoreCode&quot; block'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\StringType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'content'; public $returnType = class GraphQL\Type\Definition\StringType { public $name = 'String'; public $description = 'The `String` scalar type represents textual data, represented as UTF-8\ncharacter sequences. The String type is most often used by GraphQL to\nrepresent free-form human-readable text.'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes', 4 => 'content']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:623
[23-Feb-2023 01:00:23 UTC] PHP  41. WPGraphQL\ContentBlocks\Blocks\Block->WPGraphQL\ContentBlocks\Blocks\{closure:/Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql-content-blocks-main/includes/Blocks/Block.php:161-163}($block = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6baa795ccb'], $args = [], $context = class WPGraphQL\AppContext { public $root_url = 'http://localhost:10028'; public $viewer = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] }; public $request = NULL; public $config = ['registered_editor_blocks' => [...]]; public $currentConnection = NULL; public $connectionArgs = []; public $loaders = ['comment_author' => class WPGraphQL\Data\Loader\CommentAuthorLoader { ... }, 'comment' => class WPGraphQL\Data\Loader\CommentLoader { ... }, 'enqueued_script' => class WPGraphQL\Data\Loader\EnqueuedScriptLoader { ... }, 'enqueued_stylesheet' => class WPGraphQL\Data\Loader\EnqueuedStylesheetLoader { ... }, 'plugin' => class WPGraphQL\Data\Loader\PluginLoader { ... }, 'nav_menu_item' => class WPGraphQL\Data\Loader\PostObjectLoader { ... }, 'post' => class WPGraphQL\Data\Loader\PostObjectLoader { ... }, 'post_type' => class WPGraphQL\Data\Loader\PostTypeLoader { ... }, 'taxonomy' => class WPGraphQL\Data\Loader\TaxonomyLoader { ... }, 'term' => class WPGraphQL\Data\Loader\TermObjectLoader { ... }, 'theme' => class WPGraphQL\Data\Loader\ThemeLoader { ... }, 'user' => class WPGraphQL\Data\Loader\UserLoader { ... }, 'user_role' => class WPGraphQL\Data\Loader\UserRoleLoader { ... }]; public $node_resolver = class WPGraphQL\Data\NodeResolver { protected $wp = class WP { ... }; protected $context = ... }; public $connection_query_class = NULL }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'content'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'The &quot;content&quot; field on the &quot;CoreCode&quot; block'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\StringType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'content'; public $returnType = class GraphQL\Type\Definition\StringType { public $name = 'String'; public $description = 'The `String` scalar type represents textual data, represented as UTF-8\ncharacter sequences. The String type is most often used by GraphQL to\nrepresent free-form human-readable text.'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes', 4 => 'content']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/src/Utils/InstrumentSchema.php:151
[23-Feb-2023 01:00:23 UTC] PHP  42. WPGraphQL\ContentBlocks\Blocks\Block->resolve_block_attributes($block = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6baa795ccb'], $attribute_name = 'content', $attribute_config = ['type' => 'string', 'source' => 'html', 'selector' => 'code']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql-content-blocks-main/includes/Blocks/Block.php:162
[23-Feb-2023 01:04:18 UTC] PHP Warning:  Undefined array key "default" in /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql-content-blocks-main/includes/Blocks/Block.php on line 214
[23-Feb-2023 01:04:18 UTC] PHP Stack trace:
[23-Feb-2023 01:04:18 UTC] PHP   1. {main}() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/index.php:0
[23-Feb-2023 01:04:18 UTC] PHP   2. require() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/index.php:17
[23-Feb-2023 01:04:18 UTC] PHP   3. wp($query_vars = *uninitialized*) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-blog-header.php:16
[23-Feb-2023 01:04:18 UTC] PHP   4. WP->main($query_args = '') /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/functions.php:1332
[23-Feb-2023 01:04:18 UTC] PHP   5. WP->parse_request($extra_query_vars = '') /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/class-wp.php:780
[23-Feb-2023 01:04:18 UTC] PHP   6. do_action_ref_array($hook_name = 'parse_request', $args = [0 => class WP { public $public_query_vars = [...]; public $private_query_vars = [...]; public $extra_query_vars = [...]; public $query_vars = [...]; public $query_string = ''; public $request = 'graphql'; public $matched_rule = 'graphql/?$'; public $matched_query = 'graphql=true'; public $did_permalink = TRUE }]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/class-wp.php:399
[23-Feb-2023 01:04:18 UTC] PHP   7. WP_Hook->do_action($args = [0 => class WP { public $public_query_vars = [...]; public $private_query_vars = [...]; public $extra_query_vars = [...]; public $query_vars = [...]; public $query_string = ''; public $request = 'graphql'; public $matched_rule = 'graphql/?$'; public $matched_query = 'graphql=true'; public $did_permalink = TRUE }]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/plugin.php:565
[23-Feb-2023 01:04:18 UTC] PHP   8. WP_Hook->apply_filters($value = '', $args = [0 => class WP { public $public_query_vars = [...]; public $private_query_vars = [...]; public $extra_query_vars = [...]; public $query_vars = [...]; public $query_string = ''; public $request = 'graphql'; public $matched_rule = 'graphql/?$'; public $matched_query = 'graphql=true'; public $did_permalink = TRUE }]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/class-wp-hook.php:332
[23-Feb-2023 01:04:18 UTC] PHP   9. WPGraphQL\Router::resolve_http_request(class WP { public $public_query_vars = [0 => 'm', 1 => 'p', 2 => 'posts', 3 => 'w', 4 => 'cat', 5 => 'withcomments', 6 => 'withoutcomments', 7 => 's', 8 => 'search', 9 => 'exact', 10 => 'sentence', 11 => 'calendar', 12 => 'page', 13 => 'paged', 14 => 'more', 15 => 'tb', 16 => 'pb', 17 => 'author', 18 => 'order', 19 => 'orderby', 20 => 'year', 21 => 'monthnum', 22 => 'day', 23 => 'hour', 24 => 'minute', 25 => 'second', 26 => 'name', 27 => 'category_name', 28 => 'tag', 29 => 'feed', 30 => 'author_name', 31 => 'pagename', 32 => 'page_id', 33 => 'error', 34 => 'attachment', 35 => 'attachment_id', 36 => 'subpost', 37 => 'subpost_id', 38 => 'preview', 39 => 'robots', 40 => 'favicon', 41 => 'taxonomy', 42 => 'term', 43 => 'cpage', 44 => 'post_type', 45 => 'embed', 46 => 'post_format', 47 => 'rest_route', 48 => 'sitemap', 49 => 'sitemap-subtype', 50 => 'sitemap-stylesheet', 51 => 'graphql']; public $private_query_vars = [0 => 'offset', 1 => 'posts_per_page', 2 => 'posts_per_archive_page', 3 => 'showposts', 4 => 'nopaging', 5 => 'post_type', 6 => 'post_status', 7 => 'category__in', 8 => 'category__not_in', 9 => 'category__and', 10 => 'tag__in', 11 => 'tag__not_in', 12 => 'tag__and', 13 => 'tag_slug__in', 14 => 'tag_slug__and', 15 => 'tag_id', 16 => 'post_mime_type', 17 => 'perm', 18 => 'comments_per_page', 19 => 'post__in', 20 => 'post__not_in', 21 => 'post_parent', 22 => 'post_parent__in', 23 => 'post_parent__not_in', 24 => 'title', 25 => 'fields']; public $extra_query_vars = []; public $query_vars = ['graphql' => 'true']; public $query_string = ''; public $request = 'graphql'; public $matched_rule = 'graphql/?$'; public $matched_query = 'graphql=true'; public $did_permalink = TRUE }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/class-wp-hook.php:308
[23-Feb-2023 01:04:18 UTC] PHP  10. WPGraphQL\Router::process_http_request() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/src/Router.php:275
[23-Feb-2023 01:04:18 UTC] PHP  11. WPGraphQL\Request->execute_http() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/src/Router.php:481
[23-Feb-2023 01:04:18 UTC] PHP  12. GraphQL\Server\StandardServer->executeRequest($parsedBody = class GraphQL\Server\OperationParams { public $queryId = NULL; public $query = 'fragment BlogInfoFragment on GeneralSettings {\n  title\n  description\n  __typename\n}\n\nfragment NavigationMenuItemFragment on MenuItem {\n  id\n  path\n  label\n  parentId\n  cssClasses\n  menu {\n    node {\n      name\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment FeaturedImageFragment on NodeWithFeaturedImage {\n  featuredImage {\n    node {\n      id\n      sourceUrl\n      altText\n      mediaDetails {\n        width\n        height\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }'...; public $operation = 'GetPost'; public $variables = ['asPreview' => TRUE, 'databaseId' => 5, 'headerLocation' => 'PRIMARY', 'footerLocation' => 'FOOTER']; public $extensions = NULL; private $originalInput = ['operationname' => 'GetPost', 'variables' => [...], 'query' => 'fragment BlogInfoFragment on GeneralSettings {\n  title\n  description\n  __typename\n}\n\nfragment NavigationMenuItemFragment on MenuItem {\n  id\n  path\n  label\n  parentId\n  cssClasses\n  menu {\n    node {\n      name\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment FeaturedImageFragment on NodeWithFeaturedImage {\n  featuredImage {\n    node {\n      id\n      sourceUrl\n      altText\n      mediaDetails {\n        width\n        height\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }'...]; private $readOnly = FALSE }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/src/Request.php:713
[23-Feb-2023 01:04:18 UTC] PHP  13. GraphQL\Server\Helper->executeOperation($config = class GraphQL\Server\ServerConfig { private $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; private $context = class WPGraphQL\AppContext { public $root_url = 'http://localhost:10028'; public $viewer = class WP_User { ... }; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... }; public $request = NULL; public $config = [...]; public $currentConnection = NULL; public $connectionArgs = [...]; public $loaders = [...]; public $node_resolver = class WPGraphQL\Data\NodeResolver { ... }; public $connection_query_class = NULL }; private $rootValue = NULL; private $errorFormatter = NULL; private $errorsHandler = NULL; private $debugFlag = 0; private $queryBatching = TRUE; private $validationRules = [0 => class GraphQL\Validator\Rules\ExecutableDefinitions { ... }, 1 => class GraphQL\Validator\Rules\UniqueOperationNames { ... }, 2 => class GraphQL\Validator\Rules\LoneAnonymousOperation { ... }, 3 => class GraphQL\Validator\Rules\SingleFieldSubscription { ... }, 4 => class GraphQL\Validator\Rules\KnownTypeNames { ... }, 5 => class GraphQL\Validator\Rules\FragmentsOnCompositeTypes { ... }, 6 => class GraphQL\Validator\Rules\VariablesAreInputTypes { ... }, 7 => class GraphQL\Validator\Rules\ScalarLeafs { ... }, 8 => class GraphQL\Validator\Rules\FieldsOnCorrectType { ... }, 9 => class GraphQL\Validator\Rules\UniqueFragmentNames { ... }, 10 => class GraphQL\Validator\Rules\KnownFragmentNames { ... }, 11 => class GraphQL\Validator\Rules\NoUnusedFragments { ... }, 12 => class GraphQL\Validator\Rules\PossibleFragmentSpreads { ... }, 13 => class GraphQL\Validator\Rules\NoFragmentCycles { ... }, 14 => class GraphQL\Validator\Rules\UniqueVariableNames { ... }, 15 => class GraphQL\Validator\Rules\NoUndefinedVariables { ... }, 16 => class GraphQL\Validator\Rules\NoUnusedVariables { ... }, 17 => class GraphQL\Validator\Rules\KnownDirectives { ... }, 18 => class GraphQL\Validator\Rules\UniqueDirectivesPerLocation { ... }, 19 => class GraphQL\Validator\Rules\KnownArgumentNames { ... }, 20 => class GraphQL\Validator\Rules\UniqueArgumentNames { ... }, 21 => class GraphQL\Validator\Rules\ValuesOfCorrectType { ... }, 22 => class GraphQL\Validator\Rules\ProvidedRequiredArguments { ... }, 23 => class GraphQL\Validator\Rules\VariablesInAllowedPosition { ... }, 24 => class GraphQL\Validator\Rules\OverlappingFieldsCanBeMerged { ... }, 25 => class GraphQL\Validator\Rules\UniqueInputFieldNames { ... }, 'require_authentication' => class WPGraphQL\Server\ValidationRules\RequireAuthentication { ... }, 'disable_introspection' => class WPGraphQL\Server\ValidationRules\DisableIntrospection { ... }, 'query_depth' => class WPGraphQL\Server\ValidationRules\QueryDepth { ... }]; private $fieldResolver = NULL; private $promiseAdapter = NULL; private $persistentQueryLoader = NULL }, $op = class GraphQL\Server\OperationParams { public $queryId = NULL; public $query = 'fragment BlogInfoFragment on GeneralSettings {\n  title\n  description\n  __typename\n}\n\nfragment NavigationMenuItemFragment on MenuItem {\n  id\n  path\n  label\n  parentId\n  cssClasses\n  menu {\n    node {\n      name\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment FeaturedImageFragment on NodeWithFeaturedImage {\n  featuredImage {\n    node {\n      id\n      sourceUrl\n      altText\n      mediaDetails {\n        width\n        height\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }'...; public $operation = 'GetPost'; public $variables = ['asPreview' => TRUE, 'databaseId' => 5, 'headerLocation' => 'PRIMARY', 'footerLocation' => 'FOOTER']; public $extensions = NULL; private $originalInput = ['operationname' => 'GetPost', 'variables' => [...], 'query' => 'fragment BlogInfoFragment on GeneralSettings {\n  title\n  description\n  __typename\n}\n\nfragment NavigationMenuItemFragment on MenuItem {\n  id\n  path\n  label\n  parentId\n  cssClasses\n  menu {\n    node {\n      name\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment FeaturedImageFragment on NodeWithFeaturedImage {\n  featuredImage {\n    node {\n      id\n      sourceUrl\n      altText\n      mediaDetails {\n        width\n        height\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }'...]; private $readOnly = FALSE }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Server/StandardServer.php:136
[23-Feb-2023 01:04:18 UTC] PHP  14. GraphQL\Executor\Promise\Adapter\SyncPromiseAdapter->wait($promise = class GraphQL\Executor\Promise\Promise { public $adoptedPromise = class GraphQL\Executor\Promise\Adapter\SyncPromise { public $state = 'pending'; public $result = NULL; private $waiting = [...] }; private $adapter = class GraphQL\Executor\Promise\Adapter\SyncPromiseAdapter {  } }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Server/Helper.php:214
[23-Feb-2023 01:04:18 UTC] PHP  15. GraphQL\Executor\Promise\Adapter\SyncPromise::runQueue() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/Promise/Adapter/SyncPromiseAdapter.php:149
[23-Feb-2023 01:04:18 UTC] PHP  16. GraphQL\Executor\Promise\Adapter\SyncPromise->GraphQL\Executor\Promise\Adapter\{closure:/Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/Promise/Adapter/SyncPromise.php:142-163}() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/Promise/Adapter/SyncPromise.php:53
[23-Feb-2023 01:04:18 UTC] PHP  17. GraphQL\Executor\ReferenceExecutor->GraphQL\Executor\{closure:/Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:650-652}($resolved = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/Promise/Adapter/SyncPromise.php:148
[23-Feb-2023 01:04:18 UTC] PHP  18. GraphQL\Executor\ReferenceExecutor->completeValue($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = ['description' => 'The post type', 'connections' => [...], 'interfaces' => [...], 'fields' => [...], 'model' => 'WPGraphQL\\Model\\Post', 'kind' => 'object', 'name' => 'Post']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['author' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'categories' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentCount' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'comments' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'conditionalTags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentType' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentTypeName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'databaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'date' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'dateGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'desiredSlug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'editingLockedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enclosure' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedScripts' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedStylesheets' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'excerpt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImage' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'guid' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'id' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isContentNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isPreview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRestricted' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRevision' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isSticky' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isTermNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lastEditedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'link' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modified' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modifiedGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pingStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pinged' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postFormats' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'preview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisionOf' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisions' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'slug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'status' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'tags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'template' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'templates' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'terms' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'title' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'toPing' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'uri' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['Node' => class WPGraphQL\Type\WPInterfaceType { ... }, 'ContentNode' => class WPGraphQL\Type\WPInterfaceType { ... }, 'UniformResourceIdentifiable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'DatabaseIdentifier' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTemplate' => class WPGraphQL\Type\WPInterfaceType { ... }, 'Previewable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTitle' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentEditor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithAuthor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithFeaturedImage' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithExcerpt' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithComments' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTrackbacks' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithRevisions' => class WPGraphQL\Type\WPInterfaceType { ... }, 'MenuItemLinkable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentBlocks' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'post'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'An object of the post Type. '; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class WPGraphQL\Type\WPObjectType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'post'; public $returnType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'RootQuery'; public $description = 'The root entry point into the Graph'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post'], $result = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:651
[23-Feb-2023 01:04:18 UTC] PHP  19. GraphQL\Executor\ReferenceExecutor->completeObjectValue($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = ['description' => 'The post type', 'connections' => [...], 'interfaces' => [...], 'fields' => [...], 'model' => 'WPGraphQL\\Model\\Post', 'kind' => 'object', 'name' => 'Post']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['author' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'categories' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentCount' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'comments' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'conditionalTags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentType' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentTypeName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'databaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'date' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'dateGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'desiredSlug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'editingLockedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enclosure' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedScripts' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedStylesheets' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'excerpt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImage' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'guid' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'id' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isContentNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isPreview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRestricted' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRevision' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isSticky' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isTermNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lastEditedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'link' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modified' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modifiedGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pingStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pinged' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postFormats' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'preview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisionOf' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisions' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'slug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'status' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'tags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'template' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'templates' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'terms' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'title' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'toPing' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'uri' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['Node' => class WPGraphQL\Type\WPInterfaceType { ... }, 'ContentNode' => class WPGraphQL\Type\WPInterfaceType { ... }, 'UniformResourceIdentifiable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'DatabaseIdentifier' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTemplate' => class WPGraphQL\Type\WPInterfaceType { ... }, 'Previewable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTitle' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentEditor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithAuthor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithFeaturedImage' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithExcerpt' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithComments' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTrackbacks' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithRevisions' => class WPGraphQL\Type\WPInterfaceType { ... }, 'MenuItemLinkable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentBlocks' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'post'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'An object of the post Type. '; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class WPGraphQL\Type\WPObjectType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'post'; public $returnType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'RootQuery'; public $description = 'The root entry point into the Graph'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post'], $result = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:793
[23-Feb-2023 01:04:18 UTC] PHP  20. GraphQL\Executor\ReferenceExecutor->collectAndExecuteSubfields($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = ['description' => 'The post type', 'connections' => [...], 'interfaces' => [...], 'fields' => [...], 'model' => 'WPGraphQL\\Model\\Post', 'kind' => 'object', 'name' => 'Post']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['author' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'categories' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentCount' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'comments' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'conditionalTags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentType' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentTypeName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'databaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'date' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'dateGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'desiredSlug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'editingLockedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enclosure' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedScripts' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedStylesheets' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'excerpt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImage' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'guid' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'id' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isContentNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isPreview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRestricted' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRevision' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isSticky' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isTermNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lastEditedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'link' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modified' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modifiedGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pingStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pinged' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postFormats' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'preview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisionOf' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisions' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'slug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'status' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'tags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'template' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'templates' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'terms' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'title' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'toPing' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'uri' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['Node' => class WPGraphQL\Type\WPInterfaceType { ... }, 'ContentNode' => class WPGraphQL\Type\WPInterfaceType { ... }, 'UniformResourceIdentifiable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'DatabaseIdentifier' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTemplate' => class WPGraphQL\Type\WPInterfaceType { ... }, 'Previewable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTitle' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentEditor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithAuthor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithFeaturedImage' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithExcerpt' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithComments' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTrackbacks' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithRevisions' => class WPGraphQL\Type\WPInterfaceType { ... }, 'MenuItemLinkable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentBlocks' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post'], $result = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1106
[23-Feb-2023 01:04:18 UTC] PHP  21. GraphQL\Executor\ReferenceExecutor->executeFields($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = ['description' => 'The post type', 'connections' => [...], 'interfaces' => [...], 'fields' => [...], 'model' => 'WPGraphQL\\Model\\Post', 'kind' => 'object', 'name' => 'Post']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['author' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'categories' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentCount' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'comments' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'conditionalTags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentType' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentTypeName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'databaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'date' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'dateGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'desiredSlug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'editingLockedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enclosure' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedScripts' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedStylesheets' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'excerpt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImage' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'guid' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'id' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isContentNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isPreview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRestricted' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRevision' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isSticky' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isTermNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lastEditedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'link' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modified' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modifiedGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pingStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pinged' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postFormats' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'preview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisionOf' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisions' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'slug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'status' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'tags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'template' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'templates' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'terms' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'title' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'toPing' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'uri' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['Node' => class WPGraphQL\Type\WPInterfaceType { ... }, 'ContentNode' => class WPGraphQL\Type\WPInterfaceType { ... }, 'UniformResourceIdentifiable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'DatabaseIdentifier' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTemplate' => class WPGraphQL\Type\WPInterfaceType { ... }, 'Previewable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTitle' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentEditor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithAuthor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithFeaturedImage' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithExcerpt' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithComments' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTrackbacks' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithRevisions' => class WPGraphQL\Type\WPInterfaceType { ... }, 'MenuItemLinkable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentBlocks' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }, $path = [0 => 'post'], $fields = class ArrayObject { private $storage = ['title' => class ArrayObject { ... }, 'content' => class ArrayObject { ... }, 'date' => class ArrayObject { ... }, 'author' => class ArrayObject { ... }, 'featuredImage' => class ArrayObject { ... }, '__typename' => class ArrayObject { ... }, 'contentBlocks' => class ArrayObject { ... }] }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1145
[23-Feb-2023 01:04:18 UTC] PHP  22. GraphQL\Executor\ReferenceExecutor->resolveField($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = ['description' => 'The post type', 'connections' => [...], 'interfaces' => [...], 'fields' => [...], 'model' => 'WPGraphQL\\Model\\Post', 'kind' => 'object', 'name' => 'Post']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['author' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'categories' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentCount' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'comments' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'conditionalTags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentType' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentTypeName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'databaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'date' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'dateGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'desiredSlug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'editingLockedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enclosure' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedScripts' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedStylesheets' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'excerpt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImage' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'guid' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'id' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isContentNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isPreview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRestricted' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRevision' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isSticky' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isTermNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lastEditedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'link' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modified' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modifiedGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pingStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pinged' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postFormats' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'preview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisionOf' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisions' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'slug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'status' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'tags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'template' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'templates' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'terms' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'title' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'toPing' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'uri' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['Node' => class WPGraphQL\Type\WPInterfaceType { ... }, 'ContentNode' => class WPGraphQL\Type\WPInterfaceType { ... }, 'UniformResourceIdentifiable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'DatabaseIdentifier' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTemplate' => class WPGraphQL\Type\WPInterfaceType { ... }, 'Previewable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTitle' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentEditor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithAuthor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithFeaturedImage' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithExcerpt' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithComments' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTrackbacks' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithRevisions' => class WPGraphQL\Type\WPInterfaceType { ... }, 'MenuItemLinkable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentBlocks' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post', 1 => 'contentBlocks']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1195
[23-Feb-2023 01:04:18 UTC] PHP  23. GraphQL\Executor\ReferenceExecutor->completeValueCatchingError($returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks'], $result = [0 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f6bb924261d'], 2 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f6bb924261f']]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:557
[23-Feb-2023 01:04:18 UTC] PHP  24. GraphQL\Executor\ReferenceExecutor->completeValue($returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks'], $result = [0 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f6bb924261d'], 2 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f6bb924261f']]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:654
[23-Feb-2023 01:04:18 UTC] PHP  25. GraphQL\Executor\ReferenceExecutor->completeListValue($returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks'], $results = [0 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f6bb924261d'], 2 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f6bb924261f']]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:761
[23-Feb-2023 01:04:18 UTC] PHP  26. GraphQL\Executor\ReferenceExecutor->completeValueCatchingError($returnType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = ['eagerlyLoadType' => TRUE, 'description' => 'Blocks that can be edited to create content and layouts', 'fields' => [...], 'resolveType' => class Closure { virtual $closure = "$this->WPGraphQL\Type\{closure}", ... }, 'kind' => 'interface', 'name' => 'ContentBlock']; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = []; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6bb924261d']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:887
[23-Feb-2023 01:04:18 UTC] PHP  27. GraphQL\Executor\ReferenceExecutor->completeValue($returnType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = ['eagerlyLoadType' => TRUE, 'description' => 'Blocks that can be edited to create content and layouts', 'fields' => [...], 'resolveType' => class Closure { virtual $closure = "$this->WPGraphQL\Type\{closure}", ... }, 'kind' => 'interface', 'name' => 'ContentBlock']; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = []; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6bb924261d']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:654
[23-Feb-2023 01:04:18 UTC] PHP  28. GraphQL\Executor\ReferenceExecutor->completeAbstractValue($returnType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = ['eagerlyLoadType' => TRUE, 'description' => 'Blocks that can be edited to create content and layouts', 'fields' => [...], 'resolveType' => class Closure { virtual $closure = "$this->WPGraphQL\Type\{closure}", ... }, 'kind' => 'interface', 'name' => 'ContentBlock']; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = []; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6bb924261d']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:789
[23-Feb-2023 01:04:18 UTC] PHP  29. GraphQL\Executor\ReferenceExecutor->completeObjectValue($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = ['description' => 'A block used for editing the site', 'interfaces' => [...], 'eagerlyLoadType' => TRUE, 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCode']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'attributes' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['ContentBlock' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6bb924261d']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:974
[23-Feb-2023 01:04:18 UTC] PHP  30. GraphQL\Executor\ReferenceExecutor->collectAndExecuteSubfields($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = ['description' => 'A block used for editing the site', 'interfaces' => [...], 'eagerlyLoadType' => TRUE, 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCode']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'attributes' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['ContentBlock' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6bb924261d']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1106
[23-Feb-2023 01:04:18 UTC] PHP  31. GraphQL\Executor\ReferenceExecutor->executeFields($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = ['description' => 'A block used for editing the site', 'interfaces' => [...], 'eagerlyLoadType' => TRUE, 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCode']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'attributes' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['ContentBlock' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6bb924261d'], $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0], $fields = class ArrayObject { private $storage = ['__typename' => class ArrayObject { ... }, 'renderedHtml' => class ArrayObject { ... }, 'id' => class ArrayObject { ... }, 'parentId' => class ArrayObject { ... }, 'attributes' => class ArrayObject { ... }] }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1145
[23-Feb-2023 01:04:18 UTC] PHP  32. GraphQL\Executor\ReferenceExecutor->resolveField($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = ['description' => 'A block used for editing the site', 'interfaces' => [...], 'eagerlyLoadType' => TRUE, 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCode']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'attributes' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['ContentBlock' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6bb924261d'], $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1195
[23-Feb-2023 01:04:18 UTC] PHP  33. GraphQL\Executor\ReferenceExecutor->completeValueCatchingError($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'attributes'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'Attributes of the %s Block Type'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class WPGraphQL\Type\WPObjectType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'attributes'; public $returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes'], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6bb924261d']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:557
[23-Feb-2023 01:04:18 UTC] PHP  34. GraphQL\Executor\ReferenceExecutor->completeValue($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'attributes'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'Attributes of the %s Block Type'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class WPGraphQL\Type\WPObjectType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'attributes'; public $returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes'], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6bb924261d']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:654
[23-Feb-2023 01:04:18 UTC] PHP  35. GraphQL\Executor\ReferenceExecutor->completeObjectValue($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'attributes'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'Attributes of the %s Block Type'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class WPGraphQL\Type\WPObjectType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'attributes'; public $returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes'], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6bb924261d']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:793
[23-Feb-2023 01:04:18 UTC] PHP  36. GraphQL\Executor\ReferenceExecutor->collectAndExecuteSubfields($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes'], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6bb924261d']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1106
[23-Feb-2023 01:04:18 UTC] PHP  37. GraphQL\Executor\ReferenceExecutor->executeFields($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6bb924261d'], $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes'], $fields = class ArrayObject { private $storage = ['borderColor' => class ArrayObject { ... }, 'backgroundColor' => class ArrayObject { ... }, 'content' => class ArrayObject { ... }, 'style' => class ArrayObject { ... }, 'textColor' => class ArrayObject { ... }, 'fontSize' => class ArrayObject { ... }, 'fontFamily' => class ArrayObject { ... }, '__typename' => class ArrayObject { ... }] }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1145
[23-Feb-2023 01:04:18 UTC] PHP  38. GraphQL\Executor\ReferenceExecutor->resolveField($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6bb924261d'], $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes', 4 => 'content']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1195
[23-Feb-2023 01:04:18 UTC] PHP  39. GraphQL\Executor\ReferenceExecutor->resolveFieldValueOrError($fieldDef = class GraphQL\Type\Definition\FieldDefinition { public $name = 'content'; public $args = []; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", public $static = [...]; public $parameter = [...] }; public $mapFn = NULL; public $description = 'The &quot;content&quot; field on the &quot;CoreCode&quot; block'; public $deprecationReason = NULL; public $astNode = NULL; public $config = ['type' => class Closure { virtual $closure = "$this->WPGraphQL\Registry\{closure}", ... }, 'description' => 'The "content" field on the "CoreCode" block', 'resolve' => class Closure { virtual $closure = "$this->WPGraphQL\ContentBlocks\Blocks\{closure}", ... }, 'name' => 'content']; private $type = class GraphQL\Type\Definition\StringType { public $name = 'String'; public $description = 'The `String` scalar type represents textual data, represented as UTF-8\ncharacter sequences. The String type is most often used by GraphQL to\nrepresent free-form human-readable text.'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }, $fieldNode = class GraphQL\Language\AST\FieldNode { public $loc = class GraphQL\Language\AST\Location { public $start = 629; public $end = 636; public $startToken = class GraphQL\Language\Token { ... }; public $endToken = class GraphQL\Language\Token { ... }; public $source = class GraphQL\Language\Source { ... } }; public $kind = 'Field'; public $name = class GraphQL\Language\AST\NameNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'Name'; public $value = 'content' }; public $alias = NULL; public $arguments = class GraphQL\Language\AST\NodeList { private $nodes = [...] }; public $directives = class GraphQL\Language\AST\NodeList { private $nodes = [...] }; public $selectionSet = NULL }, $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", public $static = ['field_resolver' => class Closure { virtual $closure = "$this->WPGraphQL\ContentBlocks\Blocks\{closure}", ... }, 'type_name' => 'CoreCodeAttributes', 'field_key' => 'content', 'field' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $parameter = ['$source' => '<required>', '$args' => '<required>', '$context' => '<required>', '$info' => '<required>'] }, $rootValue = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6bb924261d'], $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'content'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'The &quot;content&quot; field on the &quot;CoreCode&quot; block'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\StringType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'content'; public $returnType = class GraphQL\Type\Definition\StringType { public $name = 'String'; public $description = 'The `String` scalar type represents textual data, represented as UTF-8\ncharacter sequences. The String type is most often used by GraphQL to\nrepresent free-form human-readable text.'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes', 4 => 'content']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:550
[23-Feb-2023 01:04:18 UTC] PHP  40. WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure:/Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/src/Utils/InstrumentSchema.php:100-188}($source = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6bb924261d'], $args = [], $context = class WPGraphQL\AppContext { public $root_url = 'http://localhost:10028'; public $viewer = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] }; public $request = NULL; public $config = ['registered_editor_blocks' => [...]]; public $currentConnection = NULL; public $connectionArgs = []; public $loaders = ['comment_author' => class WPGraphQL\Data\Loader\CommentAuthorLoader { ... }, 'comment' => class WPGraphQL\Data\Loader\CommentLoader { ... }, 'enqueued_script' => class WPGraphQL\Data\Loader\EnqueuedScriptLoader { ... }, 'enqueued_stylesheet' => class WPGraphQL\Data\Loader\EnqueuedStylesheetLoader { ... }, 'plugin' => class WPGraphQL\Data\Loader\PluginLoader { ... }, 'nav_menu_item' => class WPGraphQL\Data\Loader\PostObjectLoader { ... }, 'post' => class WPGraphQL\Data\Loader\PostObjectLoader { ... }, 'post_type' => class WPGraphQL\Data\Loader\PostTypeLoader { ... }, 'taxonomy' => class WPGraphQL\Data\Loader\TaxonomyLoader { ... }, 'term' => class WPGraphQL\Data\Loader\TermObjectLoader { ... }, 'theme' => class WPGraphQL\Data\Loader\ThemeLoader { ... }, 'user' => class WPGraphQL\Data\Loader\UserLoader { ... }, 'user_role' => class WPGraphQL\Data\Loader\UserRoleLoader { ... }]; public $node_resolver = class WPGraphQL\Data\NodeResolver { protected $wp = class WP { ... }; protected $context = ... }; public $connection_query_class = NULL }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'content'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'The &quot;content&quot; field on the &quot;CoreCode&quot; block'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\StringType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'content'; public $returnType = class GraphQL\Type\Definition\StringType { public $name = 'String'; public $description = 'The `String` scalar type represents textual data, represented as UTF-8\ncharacter sequences. The String type is most often used by GraphQL to\nrepresent free-form human-readable text.'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes', 4 => 'content']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:623
[23-Feb-2023 01:04:18 UTC] PHP  41. WPGraphQL\ContentBlocks\Blocks\Block->WPGraphQL\ContentBlocks\Blocks\{closure:/Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql-content-blocks-main/includes/Blocks/Block.php:161-163}($block = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6bb924261d'], $args = [], $context = class WPGraphQL\AppContext { public $root_url = 'http://localhost:10028'; public $viewer = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] }; public $request = NULL; public $config = ['registered_editor_blocks' => [...]]; public $currentConnection = NULL; public $connectionArgs = []; public $loaders = ['comment_author' => class WPGraphQL\Data\Loader\CommentAuthorLoader { ... }, 'comment' => class WPGraphQL\Data\Loader\CommentLoader { ... }, 'enqueued_script' => class WPGraphQL\Data\Loader\EnqueuedScriptLoader { ... }, 'enqueued_stylesheet' => class WPGraphQL\Data\Loader\EnqueuedStylesheetLoader { ... }, 'plugin' => class WPGraphQL\Data\Loader\PluginLoader { ... }, 'nav_menu_item' => class WPGraphQL\Data\Loader\PostObjectLoader { ... }, 'post' => class WPGraphQL\Data\Loader\PostObjectLoader { ... }, 'post_type' => class WPGraphQL\Data\Loader\PostTypeLoader { ... }, 'taxonomy' => class WPGraphQL\Data\Loader\TaxonomyLoader { ... }, 'term' => class WPGraphQL\Data\Loader\TermObjectLoader { ... }, 'theme' => class WPGraphQL\Data\Loader\ThemeLoader { ... }, 'user' => class WPGraphQL\Data\Loader\UserLoader { ... }, 'user_role' => class WPGraphQL\Data\Loader\UserRoleLoader { ... }]; public $node_resolver = class WPGraphQL\Data\NodeResolver { protected $wp = class WP { ... }; protected $context = ... }; public $connection_query_class = NULL }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'content'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'The &quot;content&quot; field on the &quot;CoreCode&quot; block'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\StringType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'content'; public $returnType = class GraphQL\Type\Definition\StringType { public $name = 'String'; public $description = 'The `String` scalar type represents textual data, represented as UTF-8\ncharacter sequences. The String type is most often used by GraphQL to\nrepresent free-form human-readable text.'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes', 4 => 'content']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/src/Utils/InstrumentSchema.php:151
[23-Feb-2023 01:04:18 UTC] PHP  42. WPGraphQL\ContentBlocks\Blocks\Block->resolve_block_attributes($block = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6bb924261d'], $attribute_name = 'content', $attribute_config = ['type' => 'string', 'source' => 'html', 'selector' => 'code']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql-content-blocks-main/includes/Blocks/Block.php:162
[23-Feb-2023 01:04:18 UTC] PHP Warning:  Undefined array key "default" in /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql-content-blocks-main/includes/Blocks/Block.php on line 214
[23-Feb-2023 01:04:18 UTC] PHP Stack trace:
[23-Feb-2023 01:04:18 UTC] PHP   1. {main}() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/index.php:0
[23-Feb-2023 01:04:18 UTC] PHP   2. require() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/index.php:17
[23-Feb-2023 01:04:18 UTC] PHP   3. wp($query_vars = *uninitialized*) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-blog-header.php:16
[23-Feb-2023 01:04:18 UTC] PHP   4. WP->main($query_args = '') /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/functions.php:1332
[23-Feb-2023 01:04:18 UTC] PHP   5. WP->parse_request($extra_query_vars = '') /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/class-wp.php:780
[23-Feb-2023 01:04:18 UTC] PHP   6. do_action_ref_array($hook_name = 'parse_request', $args = [0 => class WP { public $public_query_vars = [...]; public $private_query_vars = [...]; public $extra_query_vars = [...]; public $query_vars = [...]; public $query_string = ''; public $request = 'graphql'; public $matched_rule = 'graphql/?$'; public $matched_query = 'graphql=true'; public $did_permalink = TRUE }]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/class-wp.php:399
[23-Feb-2023 01:04:18 UTC] PHP   7. WP_Hook->do_action($args = [0 => class WP { public $public_query_vars = [...]; public $private_query_vars = [...]; public $extra_query_vars = [...]; public $query_vars = [...]; public $query_string = ''; public $request = 'graphql'; public $matched_rule = 'graphql/?$'; public $matched_query = 'graphql=true'; public $did_permalink = TRUE }]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/plugin.php:565
[23-Feb-2023 01:04:18 UTC] PHP   8. WP_Hook->apply_filters($value = '', $args = [0 => class WP { public $public_query_vars = [...]; public $private_query_vars = [...]; public $extra_query_vars = [...]; public $query_vars = [...]; public $query_string = ''; public $request = 'graphql'; public $matched_rule = 'graphql/?$'; public $matched_query = 'graphql=true'; public $did_permalink = TRUE }]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/class-wp-hook.php:332
[23-Feb-2023 01:04:18 UTC] PHP   9. WPGraphQL\Router::resolve_http_request(class WP { public $public_query_vars = [0 => 'm', 1 => 'p', 2 => 'posts', 3 => 'w', 4 => 'cat', 5 => 'withcomments', 6 => 'withoutcomments', 7 => 's', 8 => 'search', 9 => 'exact', 10 => 'sentence', 11 => 'calendar', 12 => 'page', 13 => 'paged', 14 => 'more', 15 => 'tb', 16 => 'pb', 17 => 'author', 18 => 'order', 19 => 'orderby', 20 => 'year', 21 => 'monthnum', 22 => 'day', 23 => 'hour', 24 => 'minute', 25 => 'second', 26 => 'name', 27 => 'category_name', 28 => 'tag', 29 => 'feed', 30 => 'author_name', 31 => 'pagename', 32 => 'page_id', 33 => 'error', 34 => 'attachment', 35 => 'attachment_id', 36 => 'subpost', 37 => 'subpost_id', 38 => 'preview', 39 => 'robots', 40 => 'favicon', 41 => 'taxonomy', 42 => 'term', 43 => 'cpage', 44 => 'post_type', 45 => 'embed', 46 => 'post_format', 47 => 'rest_route', 48 => 'sitemap', 49 => 'sitemap-subtype', 50 => 'sitemap-stylesheet', 51 => 'graphql']; public $private_query_vars = [0 => 'offset', 1 => 'posts_per_page', 2 => 'posts_per_archive_page', 3 => 'showposts', 4 => 'nopaging', 5 => 'post_type', 6 => 'post_status', 7 => 'category__in', 8 => 'category__not_in', 9 => 'category__and', 10 => 'tag__in', 11 => 'tag__not_in', 12 => 'tag__and', 13 => 'tag_slug__in', 14 => 'tag_slug__and', 15 => 'tag_id', 16 => 'post_mime_type', 17 => 'perm', 18 => 'comments_per_page', 19 => 'post__in', 20 => 'post__not_in', 21 => 'post_parent', 22 => 'post_parent__in', 23 => 'post_parent__not_in', 24 => 'title', 25 => 'fields']; public $extra_query_vars = []; public $query_vars = ['graphql' => 'true']; public $query_string = ''; public $request = 'graphql'; public $matched_rule = 'graphql/?$'; public $matched_query = 'graphql=true'; public $did_permalink = TRUE }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/class-wp-hook.php:308
[23-Feb-2023 01:04:18 UTC] PHP  10. WPGraphQL\Router::process_http_request() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/src/Router.php:275
[23-Feb-2023 01:04:18 UTC] PHP  11. WPGraphQL\Request->execute_http() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/src/Router.php:481
[23-Feb-2023 01:04:18 UTC] PHP  12. GraphQL\Server\StandardServer->executeRequest($parsedBody = class GraphQL\Server\OperationParams { public $queryId = NULL; public $query = 'fragment BlogInfoFragment on GeneralSettings {\n  title\n  description\n  __typename\n}\n\nfragment NavigationMenuItemFragment on MenuItem {\n  id\n  path\n  label\n  parentId\n  cssClasses\n  menu {\n    node {\n      name\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment FeaturedImageFragment on NodeWithFeaturedImage {\n  featuredImage {\n    node {\n      id\n      sourceUrl\n      altText\n      mediaDetails {\n        width\n        height\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }'...; public $operation = 'GetPost'; public $variables = ['asPreview' => TRUE, 'databaseId' => 5, 'headerLocation' => 'PRIMARY', 'footerLocation' => 'FOOTER']; public $extensions = NULL; private $originalInput = ['operationname' => 'GetPost', 'variables' => [...], 'query' => 'fragment BlogInfoFragment on GeneralSettings {\n  title\n  description\n  __typename\n}\n\nfragment NavigationMenuItemFragment on MenuItem {\n  id\n  path\n  label\n  parentId\n  cssClasses\n  menu {\n    node {\n      name\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment FeaturedImageFragment on NodeWithFeaturedImage {\n  featuredImage {\n    node {\n      id\n      sourceUrl\n      altText\n      mediaDetails {\n        width\n        height\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }'...]; private $readOnly = FALSE }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/src/Request.php:713
[23-Feb-2023 01:04:18 UTC] PHP  13. GraphQL\Server\Helper->executeOperation($config = class GraphQL\Server\ServerConfig { private $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; private $context = class WPGraphQL\AppContext { public $root_url = 'http://localhost:10028'; public $viewer = class WP_User { ... }; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... }; public $request = NULL; public $config = [...]; public $currentConnection = NULL; public $connectionArgs = [...]; public $loaders = [...]; public $node_resolver = class WPGraphQL\Data\NodeResolver { ... }; public $connection_query_class = NULL }; private $rootValue = NULL; private $errorFormatter = NULL; private $errorsHandler = NULL; private $debugFlag = 0; private $queryBatching = TRUE; private $validationRules = [0 => class GraphQL\Validator\Rules\ExecutableDefinitions { ... }, 1 => class GraphQL\Validator\Rules\UniqueOperationNames { ... }, 2 => class GraphQL\Validator\Rules\LoneAnonymousOperation { ... }, 3 => class GraphQL\Validator\Rules\SingleFieldSubscription { ... }, 4 => class GraphQL\Validator\Rules\KnownTypeNames { ... }, 5 => class GraphQL\Validator\Rules\FragmentsOnCompositeTypes { ... }, 6 => class GraphQL\Validator\Rules\VariablesAreInputTypes { ... }, 7 => class GraphQL\Validator\Rules\ScalarLeafs { ... }, 8 => class GraphQL\Validator\Rules\FieldsOnCorrectType { ... }, 9 => class GraphQL\Validator\Rules\UniqueFragmentNames { ... }, 10 => class GraphQL\Validator\Rules\KnownFragmentNames { ... }, 11 => class GraphQL\Validator\Rules\NoUnusedFragments { ... }, 12 => class GraphQL\Validator\Rules\PossibleFragmentSpreads { ... }, 13 => class GraphQL\Validator\Rules\NoFragmentCycles { ... }, 14 => class GraphQL\Validator\Rules\UniqueVariableNames { ... }, 15 => class GraphQL\Validator\Rules\NoUndefinedVariables { ... }, 16 => class GraphQL\Validator\Rules\NoUnusedVariables { ... }, 17 => class GraphQL\Validator\Rules\KnownDirectives { ... }, 18 => class GraphQL\Validator\Rules\UniqueDirectivesPerLocation { ... }, 19 => class GraphQL\Validator\Rules\KnownArgumentNames { ... }, 20 => class GraphQL\Validator\Rules\UniqueArgumentNames { ... }, 21 => class GraphQL\Validator\Rules\ValuesOfCorrectType { ... }, 22 => class GraphQL\Validator\Rules\ProvidedRequiredArguments { ... }, 23 => class GraphQL\Validator\Rules\VariablesInAllowedPosition { ... }, 24 => class GraphQL\Validator\Rules\OverlappingFieldsCanBeMerged { ... }, 25 => class GraphQL\Validator\Rules\UniqueInputFieldNames { ... }, 'require_authentication' => class WPGraphQL\Server\ValidationRules\RequireAuthentication { ... }, 'disable_introspection' => class WPGraphQL\Server\ValidationRules\DisableIntrospection { ... }, 'query_depth' => class WPGraphQL\Server\ValidationRules\QueryDepth { ... }]; private $fieldResolver = NULL; private $promiseAdapter = NULL; private $persistentQueryLoader = NULL }, $op = class GraphQL\Server\OperationParams { public $queryId = NULL; public $query = 'fragment BlogInfoFragment on GeneralSettings {\n  title\n  description\n  __typename\n}\n\nfragment NavigationMenuItemFragment on MenuItem {\n  id\n  path\n  label\n  parentId\n  cssClasses\n  menu {\n    node {\n      name\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment FeaturedImageFragment on NodeWithFeaturedImage {\n  featuredImage {\n    node {\n      id\n      sourceUrl\n      altText\n      mediaDetails {\n        width\n        height\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }'...; public $operation = 'GetPost'; public $variables = ['asPreview' => TRUE, 'databaseId' => 5, 'headerLocation' => 'PRIMARY', 'footerLocation' => 'FOOTER']; public $extensions = NULL; private $originalInput = ['operationname' => 'GetPost', 'variables' => [...], 'query' => 'fragment BlogInfoFragment on GeneralSettings {\n  title\n  description\n  __typename\n}\n\nfragment NavigationMenuItemFragment on MenuItem {\n  id\n  path\n  label\n  parentId\n  cssClasses\n  menu {\n    node {\n      name\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment FeaturedImageFragment on NodeWithFeaturedImage {\n  featuredImage {\n    node {\n      id\n      sourceUrl\n      altText\n      mediaDetails {\n        width\n        height\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }'...]; private $readOnly = FALSE }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Server/StandardServer.php:136
[23-Feb-2023 01:04:18 UTC] PHP  14. GraphQL\Executor\Promise\Adapter\SyncPromiseAdapter->wait($promise = class GraphQL\Executor\Promise\Promise { public $adoptedPromise = class GraphQL\Executor\Promise\Adapter\SyncPromise { public $state = 'pending'; public $result = NULL; private $waiting = [...] }; private $adapter = class GraphQL\Executor\Promise\Adapter\SyncPromiseAdapter {  } }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Server/Helper.php:214
[23-Feb-2023 01:04:18 UTC] PHP  15. GraphQL\Executor\Promise\Adapter\SyncPromise::runQueue() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/Promise/Adapter/SyncPromiseAdapter.php:149
[23-Feb-2023 01:04:18 UTC] PHP  16. GraphQL\Executor\Promise\Adapter\SyncPromise->GraphQL\Executor\Promise\Adapter\{closure:/Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/Promise/Adapter/SyncPromise.php:142-163}() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/Promise/Adapter/SyncPromise.php:53
[23-Feb-2023 01:04:18 UTC] PHP  17. GraphQL\Executor\ReferenceExecutor->GraphQL\Executor\{closure:/Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:650-652}($resolved = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/Promise/Adapter/SyncPromise.php:148
[23-Feb-2023 01:04:18 UTC] PHP  18. GraphQL\Executor\ReferenceExecutor->completeValue($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = ['description' => 'The post type', 'connections' => [...], 'interfaces' => [...], 'fields' => [...], 'model' => 'WPGraphQL\\Model\\Post', 'kind' => 'object', 'name' => 'Post']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['author' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'categories' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentCount' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'comments' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'conditionalTags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentType' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentTypeName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'databaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'date' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'dateGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'desiredSlug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'editingLockedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enclosure' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedScripts' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedStylesheets' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'excerpt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImage' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'guid' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'id' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isContentNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isPreview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRestricted' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRevision' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isSticky' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isTermNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lastEditedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'link' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modified' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modifiedGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pingStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pinged' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postFormats' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'preview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisionOf' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisions' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'slug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'status' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'tags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'template' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'templates' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'terms' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'title' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'toPing' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'uri' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['Node' => class WPGraphQL\Type\WPInterfaceType { ... }, 'ContentNode' => class WPGraphQL\Type\WPInterfaceType { ... }, 'UniformResourceIdentifiable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'DatabaseIdentifier' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTemplate' => class WPGraphQL\Type\WPInterfaceType { ... }, 'Previewable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTitle' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentEditor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithAuthor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithFeaturedImage' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithExcerpt' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithComments' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTrackbacks' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithRevisions' => class WPGraphQL\Type\WPInterfaceType { ... }, 'MenuItemLinkable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentBlocks' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'post'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'An object of the post Type. '; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class WPGraphQL\Type\WPObjectType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'post'; public $returnType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'RootQuery'; public $description = 'The root entry point into the Graph'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post'], $result = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:651
[23-Feb-2023 01:04:18 UTC] PHP  19. GraphQL\Executor\ReferenceExecutor->completeObjectValue($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = ['description' => 'The post type', 'connections' => [...], 'interfaces' => [...], 'fields' => [...], 'model' => 'WPGraphQL\\Model\\Post', 'kind' => 'object', 'name' => 'Post']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['author' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'categories' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentCount' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'comments' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'conditionalTags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentType' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentTypeName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'databaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'date' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'dateGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'desiredSlug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'editingLockedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enclosure' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedScripts' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedStylesheets' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'excerpt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImage' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'guid' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'id' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isContentNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isPreview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRestricted' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRevision' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isSticky' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isTermNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lastEditedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'link' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modified' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modifiedGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pingStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pinged' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postFormats' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'preview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisionOf' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisions' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'slug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'status' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'tags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'template' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'templates' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'terms' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'title' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'toPing' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'uri' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['Node' => class WPGraphQL\Type\WPInterfaceType { ... }, 'ContentNode' => class WPGraphQL\Type\WPInterfaceType { ... }, 'UniformResourceIdentifiable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'DatabaseIdentifier' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTemplate' => class WPGraphQL\Type\WPInterfaceType { ... }, 'Previewable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTitle' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentEditor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithAuthor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithFeaturedImage' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithExcerpt' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithComments' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTrackbacks' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithRevisions' => class WPGraphQL\Type\WPInterfaceType { ... }, 'MenuItemLinkable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentBlocks' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'post'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'An object of the post Type. '; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class WPGraphQL\Type\WPObjectType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'post'; public $returnType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'RootQuery'; public $description = 'The root entry point into the Graph'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post'], $result = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:793
[23-Feb-2023 01:04:18 UTC] PHP  20. GraphQL\Executor\ReferenceExecutor->collectAndExecuteSubfields($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = ['description' => 'The post type', 'connections' => [...], 'interfaces' => [...], 'fields' => [...], 'model' => 'WPGraphQL\\Model\\Post', 'kind' => 'object', 'name' => 'Post']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['author' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'categories' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentCount' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'comments' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'conditionalTags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentType' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentTypeName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'databaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'date' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'dateGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'desiredSlug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'editingLockedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enclosure' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedScripts' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedStylesheets' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'excerpt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImage' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'guid' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'id' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isContentNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isPreview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRestricted' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRevision' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isSticky' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isTermNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lastEditedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'link' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modified' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modifiedGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pingStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pinged' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postFormats' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'preview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisionOf' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisions' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'slug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'status' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'tags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'template' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'templates' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'terms' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'title' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'toPing' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'uri' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['Node' => class WPGraphQL\Type\WPInterfaceType { ... }, 'ContentNode' => class WPGraphQL\Type\WPInterfaceType { ... }, 'UniformResourceIdentifiable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'DatabaseIdentifier' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTemplate' => class WPGraphQL\Type\WPInterfaceType { ... }, 'Previewable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTitle' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentEditor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithAuthor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithFeaturedImage' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithExcerpt' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithComments' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTrackbacks' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithRevisions' => class WPGraphQL\Type\WPInterfaceType { ... }, 'MenuItemLinkable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentBlocks' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post'], $result = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1106
[23-Feb-2023 01:04:18 UTC] PHP  21. GraphQL\Executor\ReferenceExecutor->executeFields($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = ['description' => 'The post type', 'connections' => [...], 'interfaces' => [...], 'fields' => [...], 'model' => 'WPGraphQL\\Model\\Post', 'kind' => 'object', 'name' => 'Post']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['author' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'categories' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentCount' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'comments' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'conditionalTags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentType' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentTypeName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'databaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'date' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'dateGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'desiredSlug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'editingLockedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enclosure' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedScripts' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedStylesheets' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'excerpt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImage' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'guid' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'id' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isContentNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isPreview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRestricted' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRevision' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isSticky' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isTermNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lastEditedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'link' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modified' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modifiedGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pingStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pinged' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postFormats' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'preview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisionOf' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisions' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'slug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'status' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'tags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'template' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'templates' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'terms' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'title' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'toPing' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'uri' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['Node' => class WPGraphQL\Type\WPInterfaceType { ... }, 'ContentNode' => class WPGraphQL\Type\WPInterfaceType { ... }, 'UniformResourceIdentifiable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'DatabaseIdentifier' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTemplate' => class WPGraphQL\Type\WPInterfaceType { ... }, 'Previewable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTitle' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentEditor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithAuthor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithFeaturedImage' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithExcerpt' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithComments' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTrackbacks' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithRevisions' => class WPGraphQL\Type\WPInterfaceType { ... }, 'MenuItemLinkable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentBlocks' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }, $path = [0 => 'post'], $fields = class ArrayObject { private $storage = ['title' => class ArrayObject { ... }, 'content' => class ArrayObject { ... }, 'date' => class ArrayObject { ... }, 'author' => class ArrayObject { ... }, 'featuredImage' => class ArrayObject { ... }, '__typename' => class ArrayObject { ... }, 'contentBlocks' => class ArrayObject { ... }] }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1145
[23-Feb-2023 01:04:18 UTC] PHP  22. GraphQL\Executor\ReferenceExecutor->resolveField($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = ['description' => 'The post type', 'connections' => [...], 'interfaces' => [...], 'fields' => [...], 'model' => 'WPGraphQL\\Model\\Post', 'kind' => 'object', 'name' => 'Post']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['author' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'categories' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentCount' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'comments' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'conditionalTags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentType' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentTypeName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'databaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'date' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'dateGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'desiredSlug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'editingLockedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enclosure' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedScripts' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedStylesheets' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'excerpt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImage' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'guid' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'id' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isContentNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isPreview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRestricted' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRevision' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isSticky' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isTermNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lastEditedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'link' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modified' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modifiedGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pingStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pinged' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postFormats' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'preview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisionOf' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisions' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'slug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'status' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'tags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'template' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'templates' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'terms' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'title' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'toPing' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'uri' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['Node' => class WPGraphQL\Type\WPInterfaceType { ... }, 'ContentNode' => class WPGraphQL\Type\WPInterfaceType { ... }, 'UniformResourceIdentifiable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'DatabaseIdentifier' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTemplate' => class WPGraphQL\Type\WPInterfaceType { ... }, 'Previewable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTitle' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentEditor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithAuthor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithFeaturedImage' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithExcerpt' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithComments' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTrackbacks' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithRevisions' => class WPGraphQL\Type\WPInterfaceType { ... }, 'MenuItemLinkable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentBlocks' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post', 1 => 'contentBlocks']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1195
[23-Feb-2023 01:04:18 UTC] PHP  23. GraphQL\Executor\ReferenceExecutor->completeValueCatchingError($returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks'], $result = [0 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f6bb924261d'], 2 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f6bb924261f']]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:557
[23-Feb-2023 01:04:18 UTC] PHP  24. GraphQL\Executor\ReferenceExecutor->completeValue($returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks'], $result = [0 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f6bb924261d'], 2 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f6bb924261f']]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:654
[23-Feb-2023 01:04:18 UTC] PHP  25. GraphQL\Executor\ReferenceExecutor->completeListValue($returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks'], $results = [0 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f6bb924261d'], 2 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f6bb924261f']]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:761
[23-Feb-2023 01:04:18 UTC] PHP  26. GraphQL\Executor\ReferenceExecutor->completeValueCatchingError($returnType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = ['eagerlyLoadType' => TRUE, 'description' => 'Blocks that can be edited to create content and layouts', 'fields' => [...], 'resolveType' => class Closure { virtual $closure = "$this->WPGraphQL\Type\{closure}", ... }, 'kind' => 'interface', 'name' => 'ContentBlock']; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = []; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6bb924261f']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:887
[23-Feb-2023 01:04:18 UTC] PHP  27. GraphQL\Executor\ReferenceExecutor->completeValue($returnType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = ['eagerlyLoadType' => TRUE, 'description' => 'Blocks that can be edited to create content and layouts', 'fields' => [...], 'resolveType' => class Closure { virtual $closure = "$this->WPGraphQL\Type\{closure}", ... }, 'kind' => 'interface', 'name' => 'ContentBlock']; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = []; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6bb924261f']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:654
[23-Feb-2023 01:04:18 UTC] PHP  28. GraphQL\Executor\ReferenceExecutor->completeAbstractValue($returnType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = ['eagerlyLoadType' => TRUE, 'description' => 'Blocks that can be edited to create content and layouts', 'fields' => [...], 'resolveType' => class Closure { virtual $closure = "$this->WPGraphQL\Type\{closure}", ... }, 'kind' => 'interface', 'name' => 'ContentBlock']; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = []; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6bb924261f']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:789
[23-Feb-2023 01:04:18 UTC] PHP  29. GraphQL\Executor\ReferenceExecutor->completeObjectValue($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = ['description' => 'A block used for editing the site', 'interfaces' => [...], 'eagerlyLoadType' => TRUE, 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCode']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'attributes' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['ContentBlock' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6bb924261f']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:974
[23-Feb-2023 01:04:18 UTC] PHP  30. GraphQL\Executor\ReferenceExecutor->collectAndExecuteSubfields($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = ['description' => 'A block used for editing the site', 'interfaces' => [...], 'eagerlyLoadType' => TRUE, 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCode']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'attributes' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['ContentBlock' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6bb924261f']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1106
[23-Feb-2023 01:04:18 UTC] PHP  31. GraphQL\Executor\ReferenceExecutor->executeFields($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = ['description' => 'A block used for editing the site', 'interfaces' => [...], 'eagerlyLoadType' => TRUE, 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCode']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'attributes' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['ContentBlock' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6bb924261f'], $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1], $fields = class ArrayObject { private $storage = ['__typename' => class ArrayObject { ... }, 'renderedHtml' => class ArrayObject { ... }, 'id' => class ArrayObject { ... }, 'parentId' => class ArrayObject { ... }, 'attributes' => class ArrayObject { ... }] }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1145
[23-Feb-2023 01:04:18 UTC] PHP  32. GraphQL\Executor\ReferenceExecutor->resolveField($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = ['description' => 'A block used for editing the site', 'interfaces' => [...], 'eagerlyLoadType' => TRUE, 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCode']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'attributes' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['ContentBlock' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6bb924261f'], $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1195
[23-Feb-2023 01:04:18 UTC] PHP  33. GraphQL\Executor\ReferenceExecutor->completeValueCatchingError($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'attributes'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'Attributes of the %s Block Type'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class WPGraphQL\Type\WPObjectType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'attributes'; public $returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes'], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6bb924261f']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:557
[23-Feb-2023 01:04:18 UTC] PHP  34. GraphQL\Executor\ReferenceExecutor->completeValue($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'attributes'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'Attributes of the %s Block Type'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class WPGraphQL\Type\WPObjectType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'attributes'; public $returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes'], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6bb924261f']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:654
[23-Feb-2023 01:04:18 UTC] PHP  35. GraphQL\Executor\ReferenceExecutor->completeObjectValue($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'attributes'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'Attributes of the %s Block Type'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class WPGraphQL\Type\WPObjectType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'attributes'; public $returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes'], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6bb924261f']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:793
[23-Feb-2023 01:04:18 UTC] PHP  36. GraphQL\Executor\ReferenceExecutor->collectAndExecuteSubfields($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes'], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6bb924261f']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1106
[23-Feb-2023 01:04:18 UTC] PHP  37. GraphQL\Executor\ReferenceExecutor->executeFields($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6bb924261f'], $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes'], $fields = class ArrayObject { private $storage = ['borderColor' => class ArrayObject { ... }, 'backgroundColor' => class ArrayObject { ... }, 'content' => class ArrayObject { ... }, 'style' => class ArrayObject { ... }, 'textColor' => class ArrayObject { ... }, 'fontSize' => class ArrayObject { ... }, 'fontFamily' => class ArrayObject { ... }, '__typename' => class ArrayObject { ... }] }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1145
[23-Feb-2023 01:04:18 UTC] PHP  38. GraphQL\Executor\ReferenceExecutor->resolveField($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6bb924261f'], $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes', 4 => 'content']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1195
[23-Feb-2023 01:04:18 UTC] PHP  39. GraphQL\Executor\ReferenceExecutor->resolveFieldValueOrError($fieldDef = class GraphQL\Type\Definition\FieldDefinition { public $name = 'content'; public $args = []; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", public $static = [...]; public $parameter = [...] }; public $mapFn = NULL; public $description = 'The &quot;content&quot; field on the &quot;CoreCode&quot; block'; public $deprecationReason = NULL; public $astNode = NULL; public $config = ['type' => class Closure { virtual $closure = "$this->WPGraphQL\Registry\{closure}", ... }, 'description' => 'The "content" field on the "CoreCode" block', 'resolve' => class Closure { virtual $closure = "$this->WPGraphQL\ContentBlocks\Blocks\{closure}", ... }, 'name' => 'content']; private $type = class GraphQL\Type\Definition\StringType { public $name = 'String'; public $description = 'The `String` scalar type represents textual data, represented as UTF-8\ncharacter sequences. The String type is most often used by GraphQL to\nrepresent free-form human-readable text.'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }, $fieldNode = class GraphQL\Language\AST\FieldNode { public $loc = class GraphQL\Language\AST\Location { public $start = 629; public $end = 636; public $startToken = class GraphQL\Language\Token { ... }; public $endToken = class GraphQL\Language\Token { ... }; public $source = class GraphQL\Language\Source { ... } }; public $kind = 'Field'; public $name = class GraphQL\Language\AST\NameNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'Name'; public $value = 'content' }; public $alias = NULL; public $arguments = class GraphQL\Language\AST\NodeList { private $nodes = [...] }; public $directives = class GraphQL\Language\AST\NodeList { private $nodes = [...] }; public $selectionSet = NULL }, $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", public $static = ['field_resolver' => class Closure { virtual $closure = "$this->WPGraphQL\ContentBlocks\Blocks\{closure}", ... }, 'type_name' => 'CoreCodeAttributes', 'field_key' => 'content', 'field' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $parameter = ['$source' => '<required>', '$args' => '<required>', '$context' => '<required>', '$info' => '<required>'] }, $rootValue = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6bb924261f'], $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'content'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'The &quot;content&quot; field on the &quot;CoreCode&quot; block'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\StringType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'content'; public $returnType = class GraphQL\Type\Definition\StringType { public $name = 'String'; public $description = 'The `String` scalar type represents textual data, represented as UTF-8\ncharacter sequences. The String type is most often used by GraphQL to\nrepresent free-form human-readable text.'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes', 4 => 'content']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:550
[23-Feb-2023 01:04:18 UTC] PHP  40. WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure:/Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/src/Utils/InstrumentSchema.php:100-188}($source = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6bb924261f'], $args = [], $context = class WPGraphQL\AppContext { public $root_url = 'http://localhost:10028'; public $viewer = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] }; public $request = NULL; public $config = ['registered_editor_blocks' => [...]]; public $currentConnection = NULL; public $connectionArgs = []; public $loaders = ['comment_author' => class WPGraphQL\Data\Loader\CommentAuthorLoader { ... }, 'comment' => class WPGraphQL\Data\Loader\CommentLoader { ... }, 'enqueued_script' => class WPGraphQL\Data\Loader\EnqueuedScriptLoader { ... }, 'enqueued_stylesheet' => class WPGraphQL\Data\Loader\EnqueuedStylesheetLoader { ... }, 'plugin' => class WPGraphQL\Data\Loader\PluginLoader { ... }, 'nav_menu_item' => class WPGraphQL\Data\Loader\PostObjectLoader { ... }, 'post' => class WPGraphQL\Data\Loader\PostObjectLoader { ... }, 'post_type' => class WPGraphQL\Data\Loader\PostTypeLoader { ... }, 'taxonomy' => class WPGraphQL\Data\Loader\TaxonomyLoader { ... }, 'term' => class WPGraphQL\Data\Loader\TermObjectLoader { ... }, 'theme' => class WPGraphQL\Data\Loader\ThemeLoader { ... }, 'user' => class WPGraphQL\Data\Loader\UserLoader { ... }, 'user_role' => class WPGraphQL\Data\Loader\UserRoleLoader { ... }]; public $node_resolver = class WPGraphQL\Data\NodeResolver { protected $wp = class WP { ... }; protected $context = ... }; public $connection_query_class = NULL }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'content'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'The &quot;content&quot; field on the &quot;CoreCode&quot; block'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\StringType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'content'; public $returnType = class GraphQL\Type\Definition\StringType { public $name = 'String'; public $description = 'The `String` scalar type represents textual data, represented as UTF-8\ncharacter sequences. The String type is most often used by GraphQL to\nrepresent free-form human-readable text.'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes', 4 => 'content']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:623
[23-Feb-2023 01:04:18 UTC] PHP  41. WPGraphQL\ContentBlocks\Blocks\Block->WPGraphQL\ContentBlocks\Blocks\{closure:/Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql-content-blocks-main/includes/Blocks/Block.php:161-163}($block = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6bb924261f'], $args = [], $context = class WPGraphQL\AppContext { public $root_url = 'http://localhost:10028'; public $viewer = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] }; public $request = NULL; public $config = ['registered_editor_blocks' => [...]]; public $currentConnection = NULL; public $connectionArgs = []; public $loaders = ['comment_author' => class WPGraphQL\Data\Loader\CommentAuthorLoader { ... }, 'comment' => class WPGraphQL\Data\Loader\CommentLoader { ... }, 'enqueued_script' => class WPGraphQL\Data\Loader\EnqueuedScriptLoader { ... }, 'enqueued_stylesheet' => class WPGraphQL\Data\Loader\EnqueuedStylesheetLoader { ... }, 'plugin' => class WPGraphQL\Data\Loader\PluginLoader { ... }, 'nav_menu_item' => class WPGraphQL\Data\Loader\PostObjectLoader { ... }, 'post' => class WPGraphQL\Data\Loader\PostObjectLoader { ... }, 'post_type' => class WPGraphQL\Data\Loader\PostTypeLoader { ... }, 'taxonomy' => class WPGraphQL\Data\Loader\TaxonomyLoader { ... }, 'term' => class WPGraphQL\Data\Loader\TermObjectLoader { ... }, 'theme' => class WPGraphQL\Data\Loader\ThemeLoader { ... }, 'user' => class WPGraphQL\Data\Loader\UserLoader { ... }, 'user_role' => class WPGraphQL\Data\Loader\UserRoleLoader { ... }]; public $node_resolver = class WPGraphQL\Data\NodeResolver { protected $wp = class WP { ... }; protected $context = ... }; public $connection_query_class = NULL }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'content'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'The &quot;content&quot; field on the &quot;CoreCode&quot; block'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\StringType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'content'; public $returnType = class GraphQL\Type\Definition\StringType { public $name = 'String'; public $description = 'The `String` scalar type represents textual data, represented as UTF-8\ncharacter sequences. The String type is most often used by GraphQL to\nrepresent free-form human-readable text.'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes', 4 => 'content']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/src/Utils/InstrumentSchema.php:151
[23-Feb-2023 01:04:18 UTC] PHP  42. WPGraphQL\ContentBlocks\Blocks\Block->resolve_block_attributes($block = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6bb924261f'], $attribute_name = 'content', $attribute_config = ['type' => 'string', 'source' => 'html', 'selector' => 'code']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql-content-blocks-main/includes/Blocks/Block.php:162
[23-Feb-2023 01:22:02 UTC] PHP Warning:  Undefined array key "default" in /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql-content-blocks-main/includes/Blocks/Block.php on line 214
[23-Feb-2023 01:22:02 UTC] PHP Stack trace:
[23-Feb-2023 01:22:02 UTC] PHP   1. {main}() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/index.php:0
[23-Feb-2023 01:22:02 UTC] PHP   2. require() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/index.php:17
[23-Feb-2023 01:22:02 UTC] PHP   3. wp($query_vars = *uninitialized*) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-blog-header.php:16
[23-Feb-2023 01:22:02 UTC] PHP   4. WP->main($query_args = '') /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/functions.php:1332
[23-Feb-2023 01:22:02 UTC] PHP   5. WP->parse_request($extra_query_vars = '') /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/class-wp.php:780
[23-Feb-2023 01:22:02 UTC] PHP   6. do_action_ref_array($hook_name = 'parse_request', $args = [0 => class WP { public $public_query_vars = [...]; public $private_query_vars = [...]; public $extra_query_vars = [...]; public $query_vars = [...]; public $query_string = ''; public $request = 'graphql'; public $matched_rule = 'graphql/?$'; public $matched_query = 'graphql=true'; public $did_permalink = TRUE }]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/class-wp.php:399
[23-Feb-2023 01:22:02 UTC] PHP   7. WP_Hook->do_action($args = [0 => class WP { public $public_query_vars = [...]; public $private_query_vars = [...]; public $extra_query_vars = [...]; public $query_vars = [...]; public $query_string = ''; public $request = 'graphql'; public $matched_rule = 'graphql/?$'; public $matched_query = 'graphql=true'; public $did_permalink = TRUE }]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/plugin.php:565
[23-Feb-2023 01:22:02 UTC] PHP   8. WP_Hook->apply_filters($value = '', $args = [0 => class WP { public $public_query_vars = [...]; public $private_query_vars = [...]; public $extra_query_vars = [...]; public $query_vars = [...]; public $query_string = ''; public $request = 'graphql'; public $matched_rule = 'graphql/?$'; public $matched_query = 'graphql=true'; public $did_permalink = TRUE }]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/class-wp-hook.php:332
[23-Feb-2023 01:22:02 UTC] PHP   9. WPGraphQL\Router::resolve_http_request(class WP { public $public_query_vars = [0 => 'm', 1 => 'p', 2 => 'posts', 3 => 'w', 4 => 'cat', 5 => 'withcomments', 6 => 'withoutcomments', 7 => 's', 8 => 'search', 9 => 'exact', 10 => 'sentence', 11 => 'calendar', 12 => 'page', 13 => 'paged', 14 => 'more', 15 => 'tb', 16 => 'pb', 17 => 'author', 18 => 'order', 19 => 'orderby', 20 => 'year', 21 => 'monthnum', 22 => 'day', 23 => 'hour', 24 => 'minute', 25 => 'second', 26 => 'name', 27 => 'category_name', 28 => 'tag', 29 => 'feed', 30 => 'author_name', 31 => 'pagename', 32 => 'page_id', 33 => 'error', 34 => 'attachment', 35 => 'attachment_id', 36 => 'subpost', 37 => 'subpost_id', 38 => 'preview', 39 => 'robots', 40 => 'favicon', 41 => 'taxonomy', 42 => 'term', 43 => 'cpage', 44 => 'post_type', 45 => 'embed', 46 => 'post_format', 47 => 'rest_route', 48 => 'sitemap', 49 => 'sitemap-subtype', 50 => 'sitemap-stylesheet', 51 => 'graphql']; public $private_query_vars = [0 => 'offset', 1 => 'posts_per_page', 2 => 'posts_per_archive_page', 3 => 'showposts', 4 => 'nopaging', 5 => 'post_type', 6 => 'post_status', 7 => 'category__in', 8 => 'category__not_in', 9 => 'category__and', 10 => 'tag__in', 11 => 'tag__not_in', 12 => 'tag__and', 13 => 'tag_slug__in', 14 => 'tag_slug__and', 15 => 'tag_id', 16 => 'post_mime_type', 17 => 'perm', 18 => 'comments_per_page', 19 => 'post__in', 20 => 'post__not_in', 21 => 'post_parent', 22 => 'post_parent__in', 23 => 'post_parent__not_in', 24 => 'title', 25 => 'fields']; public $extra_query_vars = []; public $query_vars = ['graphql' => 'true']; public $query_string = ''; public $request = 'graphql'; public $matched_rule = 'graphql/?$'; public $matched_query = 'graphql=true'; public $did_permalink = TRUE }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/class-wp-hook.php:308
[23-Feb-2023 01:22:02 UTC] PHP  10. WPGraphQL\Router::process_http_request() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/src/Router.php:275
[23-Feb-2023 01:22:02 UTC] PHP  11. WPGraphQL\Request->execute_http() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/src/Router.php:481
[23-Feb-2023 01:22:02 UTC] PHP  12. GraphQL\Server\StandardServer->executeRequest($parsedBody = class GraphQL\Server\OperationParams { public $queryId = NULL; public $query = 'fragment BlogInfoFragment on GeneralSettings {\n  title\n  description\n  __typename\n}\n\nfragment NavigationMenuItemFragment on MenuItem {\n  id\n  path\n  label\n  parentId\n  cssClasses\n  menu {\n    node {\n      name\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment FeaturedImageFragment on NodeWithFeaturedImage {\n  featuredImage {\n    node {\n      id\n      sourceUrl\n      altText\n      mediaDetails {\n        width\n        height\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }'...; public $operation = 'GetPost'; public $variables = ['asPreview' => TRUE, 'databaseId' => 5, 'headerLocation' => 'PRIMARY', 'footerLocation' => 'FOOTER']; public $extensions = NULL; private $originalInput = ['operationname' => 'GetPost', 'variables' => [...], 'query' => 'fragment BlogInfoFragment on GeneralSettings {\n  title\n  description\n  __typename\n}\n\nfragment NavigationMenuItemFragment on MenuItem {\n  id\n  path\n  label\n  parentId\n  cssClasses\n  menu {\n    node {\n      name\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment FeaturedImageFragment on NodeWithFeaturedImage {\n  featuredImage {\n    node {\n      id\n      sourceUrl\n      altText\n      mediaDetails {\n        width\n        height\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }'...]; private $readOnly = FALSE }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/src/Request.php:713
[23-Feb-2023 01:22:02 UTC] PHP  13. GraphQL\Server\Helper->executeOperation($config = class GraphQL\Server\ServerConfig { private $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; private $context = class WPGraphQL\AppContext { public $root_url = 'http://localhost:10028'; public $viewer = class WP_User { ... }; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... }; public $request = NULL; public $config = [...]; public $currentConnection = NULL; public $connectionArgs = [...]; public $loaders = [...]; public $node_resolver = class WPGraphQL\Data\NodeResolver { ... }; public $connection_query_class = NULL }; private $rootValue = NULL; private $errorFormatter = NULL; private $errorsHandler = NULL; private $debugFlag = 0; private $queryBatching = TRUE; private $validationRules = [0 => class GraphQL\Validator\Rules\ExecutableDefinitions { ... }, 1 => class GraphQL\Validator\Rules\UniqueOperationNames { ... }, 2 => class GraphQL\Validator\Rules\LoneAnonymousOperation { ... }, 3 => class GraphQL\Validator\Rules\SingleFieldSubscription { ... }, 4 => class GraphQL\Validator\Rules\KnownTypeNames { ... }, 5 => class GraphQL\Validator\Rules\FragmentsOnCompositeTypes { ... }, 6 => class GraphQL\Validator\Rules\VariablesAreInputTypes { ... }, 7 => class GraphQL\Validator\Rules\ScalarLeafs { ... }, 8 => class GraphQL\Validator\Rules\FieldsOnCorrectType { ... }, 9 => class GraphQL\Validator\Rules\UniqueFragmentNames { ... }, 10 => class GraphQL\Validator\Rules\KnownFragmentNames { ... }, 11 => class GraphQL\Validator\Rules\NoUnusedFragments { ... }, 12 => class GraphQL\Validator\Rules\PossibleFragmentSpreads { ... }, 13 => class GraphQL\Validator\Rules\NoFragmentCycles { ... }, 14 => class GraphQL\Validator\Rules\UniqueVariableNames { ... }, 15 => class GraphQL\Validator\Rules\NoUndefinedVariables { ... }, 16 => class GraphQL\Validator\Rules\NoUnusedVariables { ... }, 17 => class GraphQL\Validator\Rules\KnownDirectives { ... }, 18 => class GraphQL\Validator\Rules\UniqueDirectivesPerLocation { ... }, 19 => class GraphQL\Validator\Rules\KnownArgumentNames { ... }, 20 => class GraphQL\Validator\Rules\UniqueArgumentNames { ... }, 21 => class GraphQL\Validator\Rules\ValuesOfCorrectType { ... }, 22 => class GraphQL\Validator\Rules\ProvidedRequiredArguments { ... }, 23 => class GraphQL\Validator\Rules\VariablesInAllowedPosition { ... }, 24 => class GraphQL\Validator\Rules\OverlappingFieldsCanBeMerged { ... }, 25 => class GraphQL\Validator\Rules\UniqueInputFieldNames { ... }, 'require_authentication' => class WPGraphQL\Server\ValidationRules\RequireAuthentication { ... }, 'disable_introspection' => class WPGraphQL\Server\ValidationRules\DisableIntrospection { ... }, 'query_depth' => class WPGraphQL\Server\ValidationRules\QueryDepth { ... }]; private $fieldResolver = NULL; private $promiseAdapter = NULL; private $persistentQueryLoader = NULL }, $op = class GraphQL\Server\OperationParams { public $queryId = NULL; public $query = 'fragment BlogInfoFragment on GeneralSettings {\n  title\n  description\n  __typename\n}\n\nfragment NavigationMenuItemFragment on MenuItem {\n  id\n  path\n  label\n  parentId\n  cssClasses\n  menu {\n    node {\n      name\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment FeaturedImageFragment on NodeWithFeaturedImage {\n  featuredImage {\n    node {\n      id\n      sourceUrl\n      altText\n      mediaDetails {\n        width\n        height\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }'...; public $operation = 'GetPost'; public $variables = ['asPreview' => TRUE, 'databaseId' => 5, 'headerLocation' => 'PRIMARY', 'footerLocation' => 'FOOTER']; public $extensions = NULL; private $originalInput = ['operationname' => 'GetPost', 'variables' => [...], 'query' => 'fragment BlogInfoFragment on GeneralSettings {\n  title\n  description\n  __typename\n}\n\nfragment NavigationMenuItemFragment on MenuItem {\n  id\n  path\n  label\n  parentId\n  cssClasses\n  menu {\n    node {\n      name\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment FeaturedImageFragment on NodeWithFeaturedImage {\n  featuredImage {\n    node {\n      id\n      sourceUrl\n      altText\n      mediaDetails {\n        width\n        height\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }'...]; private $readOnly = FALSE }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Server/StandardServer.php:136
[23-Feb-2023 01:22:02 UTC] PHP  14. GraphQL\Executor\Promise\Adapter\SyncPromiseAdapter->wait($promise = class GraphQL\Executor\Promise\Promise { public $adoptedPromise = class GraphQL\Executor\Promise\Adapter\SyncPromise { public $state = 'pending'; public $result = NULL; private $waiting = [...] }; private $adapter = class GraphQL\Executor\Promise\Adapter\SyncPromiseAdapter {  } }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Server/Helper.php:214
[23-Feb-2023 01:22:02 UTC] PHP  15. GraphQL\Executor\Promise\Adapter\SyncPromise::runQueue() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/Promise/Adapter/SyncPromiseAdapter.php:149
[23-Feb-2023 01:22:02 UTC] PHP  16. GraphQL\Executor\Promise\Adapter\SyncPromise->GraphQL\Executor\Promise\Adapter\{closure:/Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/Promise/Adapter/SyncPromise.php:142-163}() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/Promise/Adapter/SyncPromise.php:53
[23-Feb-2023 01:22:02 UTC] PHP  17. GraphQL\Executor\ReferenceExecutor->GraphQL\Executor\{closure:/Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:650-652}($resolved = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/Promise/Adapter/SyncPromise.php:148
[23-Feb-2023 01:22:02 UTC] PHP  18. GraphQL\Executor\ReferenceExecutor->completeValue($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = ['description' => 'The post type', 'connections' => [...], 'interfaces' => [...], 'fields' => [...], 'model' => 'WPGraphQL\\Model\\Post', 'kind' => 'object', 'name' => 'Post']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['author' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'categories' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentCount' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'comments' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'conditionalTags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentType' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentTypeName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'databaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'date' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'dateGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'desiredSlug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'editingLockedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enclosure' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedScripts' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedStylesheets' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'excerpt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImage' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'guid' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'id' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isContentNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isPreview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRestricted' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRevision' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isSticky' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isTermNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lastEditedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'link' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modified' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modifiedGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pingStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pinged' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postFormats' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'preview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisionOf' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisions' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'slug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'status' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'tags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'template' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'templates' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'terms' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'title' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'toPing' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'uri' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['Node' => class WPGraphQL\Type\WPInterfaceType { ... }, 'ContentNode' => class WPGraphQL\Type\WPInterfaceType { ... }, 'UniformResourceIdentifiable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'DatabaseIdentifier' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTemplate' => class WPGraphQL\Type\WPInterfaceType { ... }, 'Previewable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTitle' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentEditor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithAuthor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithFeaturedImage' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithExcerpt' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithComments' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTrackbacks' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithRevisions' => class WPGraphQL\Type\WPInterfaceType { ... }, 'MenuItemLinkable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentBlocks' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'post'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'An object of the post Type. '; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class WPGraphQL\Type\WPObjectType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'post'; public $returnType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'RootQuery'; public $description = 'The root entry point into the Graph'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post'], $result = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:651
[23-Feb-2023 01:22:02 UTC] PHP  19. GraphQL\Executor\ReferenceExecutor->completeObjectValue($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = ['description' => 'The post type', 'connections' => [...], 'interfaces' => [...], 'fields' => [...], 'model' => 'WPGraphQL\\Model\\Post', 'kind' => 'object', 'name' => 'Post']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['author' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'categories' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentCount' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'comments' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'conditionalTags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentType' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentTypeName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'databaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'date' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'dateGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'desiredSlug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'editingLockedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enclosure' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedScripts' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedStylesheets' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'excerpt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImage' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'guid' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'id' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isContentNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isPreview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRestricted' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRevision' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isSticky' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isTermNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lastEditedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'link' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modified' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modifiedGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pingStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pinged' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postFormats' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'preview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisionOf' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisions' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'slug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'status' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'tags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'template' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'templates' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'terms' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'title' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'toPing' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'uri' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['Node' => class WPGraphQL\Type\WPInterfaceType { ... }, 'ContentNode' => class WPGraphQL\Type\WPInterfaceType { ... }, 'UniformResourceIdentifiable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'DatabaseIdentifier' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTemplate' => class WPGraphQL\Type\WPInterfaceType { ... }, 'Previewable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTitle' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentEditor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithAuthor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithFeaturedImage' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithExcerpt' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithComments' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTrackbacks' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithRevisions' => class WPGraphQL\Type\WPInterfaceType { ... }, 'MenuItemLinkable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentBlocks' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'post'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'An object of the post Type. '; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class WPGraphQL\Type\WPObjectType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'post'; public $returnType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'RootQuery'; public $description = 'The root entry point into the Graph'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post'], $result = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:793
[23-Feb-2023 01:22:02 UTC] PHP  20. GraphQL\Executor\ReferenceExecutor->collectAndExecuteSubfields($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = ['description' => 'The post type', 'connections' => [...], 'interfaces' => [...], 'fields' => [...], 'model' => 'WPGraphQL\\Model\\Post', 'kind' => 'object', 'name' => 'Post']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['author' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'categories' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentCount' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'comments' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'conditionalTags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentType' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentTypeName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'databaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'date' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'dateGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'desiredSlug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'editingLockedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enclosure' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedScripts' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedStylesheets' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'excerpt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImage' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'guid' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'id' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isContentNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isPreview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRestricted' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRevision' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isSticky' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isTermNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lastEditedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'link' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modified' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modifiedGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pingStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pinged' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postFormats' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'preview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisionOf' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisions' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'slug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'status' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'tags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'template' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'templates' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'terms' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'title' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'toPing' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'uri' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['Node' => class WPGraphQL\Type\WPInterfaceType { ... }, 'ContentNode' => class WPGraphQL\Type\WPInterfaceType { ... }, 'UniformResourceIdentifiable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'DatabaseIdentifier' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTemplate' => class WPGraphQL\Type\WPInterfaceType { ... }, 'Previewable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTitle' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentEditor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithAuthor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithFeaturedImage' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithExcerpt' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithComments' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTrackbacks' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithRevisions' => class WPGraphQL\Type\WPInterfaceType { ... }, 'MenuItemLinkable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentBlocks' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post'], $result = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1106
[23-Feb-2023 01:22:02 UTC] PHP  21. GraphQL\Executor\ReferenceExecutor->executeFields($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = ['description' => 'The post type', 'connections' => [...], 'interfaces' => [...], 'fields' => [...], 'model' => 'WPGraphQL\\Model\\Post', 'kind' => 'object', 'name' => 'Post']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['author' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'categories' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentCount' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'comments' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'conditionalTags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentType' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentTypeName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'databaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'date' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'dateGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'desiredSlug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'editingLockedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enclosure' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedScripts' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedStylesheets' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'excerpt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImage' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'guid' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'id' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isContentNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isPreview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRestricted' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRevision' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isSticky' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isTermNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lastEditedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'link' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modified' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modifiedGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pingStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pinged' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postFormats' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'preview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisionOf' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisions' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'slug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'status' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'tags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'template' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'templates' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'terms' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'title' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'toPing' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'uri' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['Node' => class WPGraphQL\Type\WPInterfaceType { ... }, 'ContentNode' => class WPGraphQL\Type\WPInterfaceType { ... }, 'UniformResourceIdentifiable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'DatabaseIdentifier' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTemplate' => class WPGraphQL\Type\WPInterfaceType { ... }, 'Previewable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTitle' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentEditor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithAuthor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithFeaturedImage' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithExcerpt' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithComments' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTrackbacks' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithRevisions' => class WPGraphQL\Type\WPInterfaceType { ... }, 'MenuItemLinkable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentBlocks' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }, $path = [0 => 'post'], $fields = class ArrayObject { private $storage = ['title' => class ArrayObject { ... }, 'content' => class ArrayObject { ... }, 'date' => class ArrayObject { ... }, 'author' => class ArrayObject { ... }, 'featuredImage' => class ArrayObject { ... }, '__typename' => class ArrayObject { ... }, 'contentBlocks' => class ArrayObject { ... }] }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1145
[23-Feb-2023 01:22:02 UTC] PHP  22. GraphQL\Executor\ReferenceExecutor->resolveField($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = ['description' => 'The post type', 'connections' => [...], 'interfaces' => [...], 'fields' => [...], 'model' => 'WPGraphQL\\Model\\Post', 'kind' => 'object', 'name' => 'Post']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['author' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'categories' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentCount' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'comments' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'conditionalTags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentType' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentTypeName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'databaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'date' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'dateGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'desiredSlug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'editingLockedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enclosure' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedScripts' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedStylesheets' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'excerpt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImage' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'guid' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'id' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isContentNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isPreview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRestricted' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRevision' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isSticky' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isTermNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lastEditedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'link' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modified' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modifiedGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pingStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pinged' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postFormats' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'preview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisionOf' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisions' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'slug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'status' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'tags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'template' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'templates' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'terms' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'title' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'toPing' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'uri' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['Node' => class WPGraphQL\Type\WPInterfaceType { ... }, 'ContentNode' => class WPGraphQL\Type\WPInterfaceType { ... }, 'UniformResourceIdentifiable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'DatabaseIdentifier' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTemplate' => class WPGraphQL\Type\WPInterfaceType { ... }, 'Previewable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTitle' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentEditor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithAuthor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithFeaturedImage' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithExcerpt' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithComments' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTrackbacks' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithRevisions' => class WPGraphQL\Type\WPInterfaceType { ... }, 'MenuItemLinkable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentBlocks' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post', 1 => 'contentBlocks']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1195
[23-Feb-2023 01:22:02 UTC] PHP  23. GraphQL\Executor\ReferenceExecutor->completeValueCatchingError($returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks'], $result = [0 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f6bfbae11ea'], 2 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f6bfbae11ed']]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:557
[23-Feb-2023 01:22:02 UTC] PHP  24. GraphQL\Executor\ReferenceExecutor->completeValue($returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks'], $result = [0 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f6bfbae11ea'], 2 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f6bfbae11ed']]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:654
[23-Feb-2023 01:22:02 UTC] PHP  25. GraphQL\Executor\ReferenceExecutor->completeListValue($returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks'], $results = [0 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f6bfbae11ea'], 2 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f6bfbae11ed']]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:761
[23-Feb-2023 01:22:02 UTC] PHP  26. GraphQL\Executor\ReferenceExecutor->completeValueCatchingError($returnType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = ['eagerlyLoadType' => TRUE, 'description' => 'Blocks that can be edited to create content and layouts', 'fields' => [...], 'resolveType' => class Closure { virtual $closure = "$this->WPGraphQL\Type\{closure}", ... }, 'kind' => 'interface', 'name' => 'ContentBlock']; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = []; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6bfbae11ea']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:887
[23-Feb-2023 01:22:02 UTC] PHP  27. GraphQL\Executor\ReferenceExecutor->completeValue($returnType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = ['eagerlyLoadType' => TRUE, 'description' => 'Blocks that can be edited to create content and layouts', 'fields' => [...], 'resolveType' => class Closure { virtual $closure = "$this->WPGraphQL\Type\{closure}", ... }, 'kind' => 'interface', 'name' => 'ContentBlock']; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = []; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6bfbae11ea']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:654
[23-Feb-2023 01:22:02 UTC] PHP  28. GraphQL\Executor\ReferenceExecutor->completeAbstractValue($returnType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = ['eagerlyLoadType' => TRUE, 'description' => 'Blocks that can be edited to create content and layouts', 'fields' => [...], 'resolveType' => class Closure { virtual $closure = "$this->WPGraphQL\Type\{closure}", ... }, 'kind' => 'interface', 'name' => 'ContentBlock']; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = []; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6bfbae11ea']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:789
[23-Feb-2023 01:22:02 UTC] PHP  29. GraphQL\Executor\ReferenceExecutor->completeObjectValue($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = ['description' => 'A block used for editing the site', 'interfaces' => [...], 'eagerlyLoadType' => TRUE, 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCode']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'attributes' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['ContentBlock' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6bfbae11ea']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:974
[23-Feb-2023 01:22:02 UTC] PHP  30. GraphQL\Executor\ReferenceExecutor->collectAndExecuteSubfields($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = ['description' => 'A block used for editing the site', 'interfaces' => [...], 'eagerlyLoadType' => TRUE, 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCode']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'attributes' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['ContentBlock' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6bfbae11ea']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1106
[23-Feb-2023 01:22:02 UTC] PHP  31. GraphQL\Executor\ReferenceExecutor->executeFields($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = ['description' => 'A block used for editing the site', 'interfaces' => [...], 'eagerlyLoadType' => TRUE, 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCode']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'attributes' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['ContentBlock' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6bfbae11ea'], $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0], $fields = class ArrayObject { private $storage = ['__typename' => class ArrayObject { ... }, 'renderedHtml' => class ArrayObject { ... }, 'id' => class ArrayObject { ... }, 'parentId' => class ArrayObject { ... }, 'attributes' => class ArrayObject { ... }] }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1145
[23-Feb-2023 01:22:02 UTC] PHP  32. GraphQL\Executor\ReferenceExecutor->resolveField($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = ['description' => 'A block used for editing the site', 'interfaces' => [...], 'eagerlyLoadType' => TRUE, 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCode']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'attributes' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['ContentBlock' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6bfbae11ea'], $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1195
[23-Feb-2023 01:22:02 UTC] PHP  33. GraphQL\Executor\ReferenceExecutor->completeValueCatchingError($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'attributes'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'Attributes of the %s Block Type'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class WPGraphQL\Type\WPObjectType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'attributes'; public $returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes'], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6bfbae11ea']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:557
[23-Feb-2023 01:22:02 UTC] PHP  34. GraphQL\Executor\ReferenceExecutor->completeValue($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'attributes'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'Attributes of the %s Block Type'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class WPGraphQL\Type\WPObjectType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'attributes'; public $returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes'], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6bfbae11ea']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:654
[23-Feb-2023 01:22:02 UTC] PHP  35. GraphQL\Executor\ReferenceExecutor->completeObjectValue($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'attributes'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'Attributes of the %s Block Type'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class WPGraphQL\Type\WPObjectType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'attributes'; public $returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes'], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6bfbae11ea']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:793
[23-Feb-2023 01:22:02 UTC] PHP  36. GraphQL\Executor\ReferenceExecutor->collectAndExecuteSubfields($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes'], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6bfbae11ea']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1106
[23-Feb-2023 01:22:02 UTC] PHP  37. GraphQL\Executor\ReferenceExecutor->executeFields($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6bfbae11ea'], $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes'], $fields = class ArrayObject { private $storage = ['borderColor' => class ArrayObject { ... }, 'backgroundColor' => class ArrayObject { ... }, 'content' => class ArrayObject { ... }, 'style' => class ArrayObject { ... }, 'textColor' => class ArrayObject { ... }, 'fontSize' => class ArrayObject { ... }, 'fontFamily' => class ArrayObject { ... }, '__typename' => class ArrayObject { ... }] }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1145
[23-Feb-2023 01:22:02 UTC] PHP  38. GraphQL\Executor\ReferenceExecutor->resolveField($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6bfbae11ea'], $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes', 4 => 'content']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1195
[23-Feb-2023 01:22:02 UTC] PHP  39. GraphQL\Executor\ReferenceExecutor->resolveFieldValueOrError($fieldDef = class GraphQL\Type\Definition\FieldDefinition { public $name = 'content'; public $args = []; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", public $static = [...]; public $parameter = [...] }; public $mapFn = NULL; public $description = 'The &quot;content&quot; field on the &quot;CoreCode&quot; block'; public $deprecationReason = NULL; public $astNode = NULL; public $config = ['type' => class Closure { virtual $closure = "$this->WPGraphQL\Registry\{closure}", ... }, 'description' => 'The "content" field on the "CoreCode" block', 'resolve' => class Closure { virtual $closure = "$this->WPGraphQL\ContentBlocks\Blocks\{closure}", ... }, 'name' => 'content']; private $type = class GraphQL\Type\Definition\StringType { public $name = 'String'; public $description = 'The `String` scalar type represents textual data, represented as UTF-8\ncharacter sequences. The String type is most often used by GraphQL to\nrepresent free-form human-readable text.'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }, $fieldNode = class GraphQL\Language\AST\FieldNode { public $loc = class GraphQL\Language\AST\Location { public $start = 629; public $end = 636; public $startToken = class GraphQL\Language\Token { ... }; public $endToken = class GraphQL\Language\Token { ... }; public $source = class GraphQL\Language\Source { ... } }; public $kind = 'Field'; public $name = class GraphQL\Language\AST\NameNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'Name'; public $value = 'content' }; public $alias = NULL; public $arguments = class GraphQL\Language\AST\NodeList { private $nodes = [...] }; public $directives = class GraphQL\Language\AST\NodeList { private $nodes = [...] }; public $selectionSet = NULL }, $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", public $static = ['field_resolver' => class Closure { virtual $closure = "$this->WPGraphQL\ContentBlocks\Blocks\{closure}", ... }, 'type_name' => 'CoreCodeAttributes', 'field_key' => 'content', 'field' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $parameter = ['$source' => '<required>', '$args' => '<required>', '$context' => '<required>', '$info' => '<required>'] }, $rootValue = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6bfbae11ea'], $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'content'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'The &quot;content&quot; field on the &quot;CoreCode&quot; block'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\StringType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'content'; public $returnType = class GraphQL\Type\Definition\StringType { public $name = 'String'; public $description = 'The `String` scalar type represents textual data, represented as UTF-8\ncharacter sequences. The String type is most often used by GraphQL to\nrepresent free-form human-readable text.'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes', 4 => 'content']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:550
[23-Feb-2023 01:22:02 UTC] PHP  40. WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure:/Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/src/Utils/InstrumentSchema.php:100-188}($source = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6bfbae11ea'], $args = [], $context = class WPGraphQL\AppContext { public $root_url = 'http://localhost:10028'; public $viewer = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] }; public $request = NULL; public $config = ['registered_editor_blocks' => [...]]; public $currentConnection = NULL; public $connectionArgs = []; public $loaders = ['comment_author' => class WPGraphQL\Data\Loader\CommentAuthorLoader { ... }, 'comment' => class WPGraphQL\Data\Loader\CommentLoader { ... }, 'enqueued_script' => class WPGraphQL\Data\Loader\EnqueuedScriptLoader { ... }, 'enqueued_stylesheet' => class WPGraphQL\Data\Loader\EnqueuedStylesheetLoader { ... }, 'plugin' => class WPGraphQL\Data\Loader\PluginLoader { ... }, 'nav_menu_item' => class WPGraphQL\Data\Loader\PostObjectLoader { ... }, 'post' => class WPGraphQL\Data\Loader\PostObjectLoader { ... }, 'post_type' => class WPGraphQL\Data\Loader\PostTypeLoader { ... }, 'taxonomy' => class WPGraphQL\Data\Loader\TaxonomyLoader { ... }, 'term' => class WPGraphQL\Data\Loader\TermObjectLoader { ... }, 'theme' => class WPGraphQL\Data\Loader\ThemeLoader { ... }, 'user' => class WPGraphQL\Data\Loader\UserLoader { ... }, 'user_role' => class WPGraphQL\Data\Loader\UserRoleLoader { ... }]; public $node_resolver = class WPGraphQL\Data\NodeResolver { protected $wp = class WP { ... }; protected $context = ... }; public $connection_query_class = NULL }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'content'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'The &quot;content&quot; field on the &quot;CoreCode&quot; block'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\StringType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'content'; public $returnType = class GraphQL\Type\Definition\StringType { public $name = 'String'; public $description = 'The `String` scalar type represents textual data, represented as UTF-8\ncharacter sequences. The String type is most often used by GraphQL to\nrepresent free-form human-readable text.'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes', 4 => 'content']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:623
[23-Feb-2023 01:22:02 UTC] PHP  41. WPGraphQL\ContentBlocks\Blocks\Block->WPGraphQL\ContentBlocks\Blocks\{closure:/Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql-content-blocks-main/includes/Blocks/Block.php:161-163}($block = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6bfbae11ea'], $args = [], $context = class WPGraphQL\AppContext { public $root_url = 'http://localhost:10028'; public $viewer = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] }; public $request = NULL; public $config = ['registered_editor_blocks' => [...]]; public $currentConnection = NULL; public $connectionArgs = []; public $loaders = ['comment_author' => class WPGraphQL\Data\Loader\CommentAuthorLoader { ... }, 'comment' => class WPGraphQL\Data\Loader\CommentLoader { ... }, 'enqueued_script' => class WPGraphQL\Data\Loader\EnqueuedScriptLoader { ... }, 'enqueued_stylesheet' => class WPGraphQL\Data\Loader\EnqueuedStylesheetLoader { ... }, 'plugin' => class WPGraphQL\Data\Loader\PluginLoader { ... }, 'nav_menu_item' => class WPGraphQL\Data\Loader\PostObjectLoader { ... }, 'post' => class WPGraphQL\Data\Loader\PostObjectLoader { ... }, 'post_type' => class WPGraphQL\Data\Loader\PostTypeLoader { ... }, 'taxonomy' => class WPGraphQL\Data\Loader\TaxonomyLoader { ... }, 'term' => class WPGraphQL\Data\Loader\TermObjectLoader { ... }, 'theme' => class WPGraphQL\Data\Loader\ThemeLoader { ... }, 'user' => class WPGraphQL\Data\Loader\UserLoader { ... }, 'user_role' => class WPGraphQL\Data\Loader\UserRoleLoader { ... }]; public $node_resolver = class WPGraphQL\Data\NodeResolver { protected $wp = class WP { ... }; protected $context = ... }; public $connection_query_class = NULL }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'content'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'The &quot;content&quot; field on the &quot;CoreCode&quot; block'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\StringType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'content'; public $returnType = class GraphQL\Type\Definition\StringType { public $name = 'String'; public $description = 'The `String` scalar type represents textual data, represented as UTF-8\ncharacter sequences. The String type is most often used by GraphQL to\nrepresent free-form human-readable text.'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes', 4 => 'content']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/src/Utils/InstrumentSchema.php:151
[23-Feb-2023 01:22:02 UTC] PHP  42. WPGraphQL\ContentBlocks\Blocks\Block->resolve_block_attributes($block = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6bfbae11ea'], $attribute_name = 'content', $attribute_config = ['type' => 'string', 'source' => 'html', 'selector' => 'code']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql-content-blocks-main/includes/Blocks/Block.php:162
[23-Feb-2023 01:22:02 UTC] PHP Warning:  Undefined array key "default" in /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql-content-blocks-main/includes/Blocks/Block.php on line 214
[23-Feb-2023 01:22:02 UTC] PHP Stack trace:
[23-Feb-2023 01:22:02 UTC] PHP   1. {main}() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/index.php:0
[23-Feb-2023 01:22:02 UTC] PHP   2. require() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/index.php:17
[23-Feb-2023 01:22:02 UTC] PHP   3. wp($query_vars = *uninitialized*) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-blog-header.php:16
[23-Feb-2023 01:22:02 UTC] PHP   4. WP->main($query_args = '') /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/functions.php:1332
[23-Feb-2023 01:22:02 UTC] PHP   5. WP->parse_request($extra_query_vars = '') /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/class-wp.php:780
[23-Feb-2023 01:22:02 UTC] PHP   6. do_action_ref_array($hook_name = 'parse_request', $args = [0 => class WP { public $public_query_vars = [...]; public $private_query_vars = [...]; public $extra_query_vars = [...]; public $query_vars = [...]; public $query_string = ''; public $request = 'graphql'; public $matched_rule = 'graphql/?$'; public $matched_query = 'graphql=true'; public $did_permalink = TRUE }]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/class-wp.php:399
[23-Feb-2023 01:22:02 UTC] PHP   7. WP_Hook->do_action($args = [0 => class WP { public $public_query_vars = [...]; public $private_query_vars = [...]; public $extra_query_vars = [...]; public $query_vars = [...]; public $query_string = ''; public $request = 'graphql'; public $matched_rule = 'graphql/?$'; public $matched_query = 'graphql=true'; public $did_permalink = TRUE }]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/plugin.php:565
[23-Feb-2023 01:22:02 UTC] PHP   8. WP_Hook->apply_filters($value = '', $args = [0 => class WP { public $public_query_vars = [...]; public $private_query_vars = [...]; public $extra_query_vars = [...]; public $query_vars = [...]; public $query_string = ''; public $request = 'graphql'; public $matched_rule = 'graphql/?$'; public $matched_query = 'graphql=true'; public $did_permalink = TRUE }]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/class-wp-hook.php:332
[23-Feb-2023 01:22:02 UTC] PHP   9. WPGraphQL\Router::resolve_http_request(class WP { public $public_query_vars = [0 => 'm', 1 => 'p', 2 => 'posts', 3 => 'w', 4 => 'cat', 5 => 'withcomments', 6 => 'withoutcomments', 7 => 's', 8 => 'search', 9 => 'exact', 10 => 'sentence', 11 => 'calendar', 12 => 'page', 13 => 'paged', 14 => 'more', 15 => 'tb', 16 => 'pb', 17 => 'author', 18 => 'order', 19 => 'orderby', 20 => 'year', 21 => 'monthnum', 22 => 'day', 23 => 'hour', 24 => 'minute', 25 => 'second', 26 => 'name', 27 => 'category_name', 28 => 'tag', 29 => 'feed', 30 => 'author_name', 31 => 'pagename', 32 => 'page_id', 33 => 'error', 34 => 'attachment', 35 => 'attachment_id', 36 => 'subpost', 37 => 'subpost_id', 38 => 'preview', 39 => 'robots', 40 => 'favicon', 41 => 'taxonomy', 42 => 'term', 43 => 'cpage', 44 => 'post_type', 45 => 'embed', 46 => 'post_format', 47 => 'rest_route', 48 => 'sitemap', 49 => 'sitemap-subtype', 50 => 'sitemap-stylesheet', 51 => 'graphql']; public $private_query_vars = [0 => 'offset', 1 => 'posts_per_page', 2 => 'posts_per_archive_page', 3 => 'showposts', 4 => 'nopaging', 5 => 'post_type', 6 => 'post_status', 7 => 'category__in', 8 => 'category__not_in', 9 => 'category__and', 10 => 'tag__in', 11 => 'tag__not_in', 12 => 'tag__and', 13 => 'tag_slug__in', 14 => 'tag_slug__and', 15 => 'tag_id', 16 => 'post_mime_type', 17 => 'perm', 18 => 'comments_per_page', 19 => 'post__in', 20 => 'post__not_in', 21 => 'post_parent', 22 => 'post_parent__in', 23 => 'post_parent__not_in', 24 => 'title', 25 => 'fields']; public $extra_query_vars = []; public $query_vars = ['graphql' => 'true']; public $query_string = ''; public $request = 'graphql'; public $matched_rule = 'graphql/?$'; public $matched_query = 'graphql=true'; public $did_permalink = TRUE }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/class-wp-hook.php:308
[23-Feb-2023 01:22:02 UTC] PHP  10. WPGraphQL\Router::process_http_request() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/src/Router.php:275
[23-Feb-2023 01:22:02 UTC] PHP  11. WPGraphQL\Request->execute_http() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/src/Router.php:481
[23-Feb-2023 01:22:02 UTC] PHP  12. GraphQL\Server\StandardServer->executeRequest($parsedBody = class GraphQL\Server\OperationParams { public $queryId = NULL; public $query = 'fragment BlogInfoFragment on GeneralSettings {\n  title\n  description\n  __typename\n}\n\nfragment NavigationMenuItemFragment on MenuItem {\n  id\n  path\n  label\n  parentId\n  cssClasses\n  menu {\n    node {\n      name\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment FeaturedImageFragment on NodeWithFeaturedImage {\n  featuredImage {\n    node {\n      id\n      sourceUrl\n      altText\n      mediaDetails {\n        width\n        height\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }'...; public $operation = 'GetPost'; public $variables = ['asPreview' => TRUE, 'databaseId' => 5, 'headerLocation' => 'PRIMARY', 'footerLocation' => 'FOOTER']; public $extensions = NULL; private $originalInput = ['operationname' => 'GetPost', 'variables' => [...], 'query' => 'fragment BlogInfoFragment on GeneralSettings {\n  title\n  description\n  __typename\n}\n\nfragment NavigationMenuItemFragment on MenuItem {\n  id\n  path\n  label\n  parentId\n  cssClasses\n  menu {\n    node {\n      name\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment FeaturedImageFragment on NodeWithFeaturedImage {\n  featuredImage {\n    node {\n      id\n      sourceUrl\n      altText\n      mediaDetails {\n        width\n        height\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }'...]; private $readOnly = FALSE }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/src/Request.php:713
[23-Feb-2023 01:22:02 UTC] PHP  13. GraphQL\Server\Helper->executeOperation($config = class GraphQL\Server\ServerConfig { private $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; private $context = class WPGraphQL\AppContext { public $root_url = 'http://localhost:10028'; public $viewer = class WP_User { ... }; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... }; public $request = NULL; public $config = [...]; public $currentConnection = NULL; public $connectionArgs = [...]; public $loaders = [...]; public $node_resolver = class WPGraphQL\Data\NodeResolver { ... }; public $connection_query_class = NULL }; private $rootValue = NULL; private $errorFormatter = NULL; private $errorsHandler = NULL; private $debugFlag = 0; private $queryBatching = TRUE; private $validationRules = [0 => class GraphQL\Validator\Rules\ExecutableDefinitions { ... }, 1 => class GraphQL\Validator\Rules\UniqueOperationNames { ... }, 2 => class GraphQL\Validator\Rules\LoneAnonymousOperation { ... }, 3 => class GraphQL\Validator\Rules\SingleFieldSubscription { ... }, 4 => class GraphQL\Validator\Rules\KnownTypeNames { ... }, 5 => class GraphQL\Validator\Rules\FragmentsOnCompositeTypes { ... }, 6 => class GraphQL\Validator\Rules\VariablesAreInputTypes { ... }, 7 => class GraphQL\Validator\Rules\ScalarLeafs { ... }, 8 => class GraphQL\Validator\Rules\FieldsOnCorrectType { ... }, 9 => class GraphQL\Validator\Rules\UniqueFragmentNames { ... }, 10 => class GraphQL\Validator\Rules\KnownFragmentNames { ... }, 11 => class GraphQL\Validator\Rules\NoUnusedFragments { ... }, 12 => class GraphQL\Validator\Rules\PossibleFragmentSpreads { ... }, 13 => class GraphQL\Validator\Rules\NoFragmentCycles { ... }, 14 => class GraphQL\Validator\Rules\UniqueVariableNames { ... }, 15 => class GraphQL\Validator\Rules\NoUndefinedVariables { ... }, 16 => class GraphQL\Validator\Rules\NoUnusedVariables { ... }, 17 => class GraphQL\Validator\Rules\KnownDirectives { ... }, 18 => class GraphQL\Validator\Rules\UniqueDirectivesPerLocation { ... }, 19 => class GraphQL\Validator\Rules\KnownArgumentNames { ... }, 20 => class GraphQL\Validator\Rules\UniqueArgumentNames { ... }, 21 => class GraphQL\Validator\Rules\ValuesOfCorrectType { ... }, 22 => class GraphQL\Validator\Rules\ProvidedRequiredArguments { ... }, 23 => class GraphQL\Validator\Rules\VariablesInAllowedPosition { ... }, 24 => class GraphQL\Validator\Rules\OverlappingFieldsCanBeMerged { ... }, 25 => class GraphQL\Validator\Rules\UniqueInputFieldNames { ... }, 'require_authentication' => class WPGraphQL\Server\ValidationRules\RequireAuthentication { ... }, 'disable_introspection' => class WPGraphQL\Server\ValidationRules\DisableIntrospection { ... }, 'query_depth' => class WPGraphQL\Server\ValidationRules\QueryDepth { ... }]; private $fieldResolver = NULL; private $promiseAdapter = NULL; private $persistentQueryLoader = NULL }, $op = class GraphQL\Server\OperationParams { public $queryId = NULL; public $query = 'fragment BlogInfoFragment on GeneralSettings {\n  title\n  description\n  __typename\n}\n\nfragment NavigationMenuItemFragment on MenuItem {\n  id\n  path\n  label\n  parentId\n  cssClasses\n  menu {\n    node {\n      name\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment FeaturedImageFragment on NodeWithFeaturedImage {\n  featuredImage {\n    node {\n      id\n      sourceUrl\n      altText\n      mediaDetails {\n        width\n        height\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }'...; public $operation = 'GetPost'; public $variables = ['asPreview' => TRUE, 'databaseId' => 5, 'headerLocation' => 'PRIMARY', 'footerLocation' => 'FOOTER']; public $extensions = NULL; private $originalInput = ['operationname' => 'GetPost', 'variables' => [...], 'query' => 'fragment BlogInfoFragment on GeneralSettings {\n  title\n  description\n  __typename\n}\n\nfragment NavigationMenuItemFragment on MenuItem {\n  id\n  path\n  label\n  parentId\n  cssClasses\n  menu {\n    node {\n      name\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment FeaturedImageFragment on NodeWithFeaturedImage {\n  featuredImage {\n    node {\n      id\n      sourceUrl\n      altText\n      mediaDetails {\n        width\n        height\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }'...]; private $readOnly = FALSE }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Server/StandardServer.php:136
[23-Feb-2023 01:22:02 UTC] PHP  14. GraphQL\Executor\Promise\Adapter\SyncPromiseAdapter->wait($promise = class GraphQL\Executor\Promise\Promise { public $adoptedPromise = class GraphQL\Executor\Promise\Adapter\SyncPromise { public $state = 'pending'; public $result = NULL; private $waiting = [...] }; private $adapter = class GraphQL\Executor\Promise\Adapter\SyncPromiseAdapter {  } }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Server/Helper.php:214
[23-Feb-2023 01:22:02 UTC] PHP  15. GraphQL\Executor\Promise\Adapter\SyncPromise::runQueue() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/Promise/Adapter/SyncPromiseAdapter.php:149
[23-Feb-2023 01:22:02 UTC] PHP  16. GraphQL\Executor\Promise\Adapter\SyncPromise->GraphQL\Executor\Promise\Adapter\{closure:/Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/Promise/Adapter/SyncPromise.php:142-163}() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/Promise/Adapter/SyncPromise.php:53
[23-Feb-2023 01:22:02 UTC] PHP  17. GraphQL\Executor\ReferenceExecutor->GraphQL\Executor\{closure:/Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:650-652}($resolved = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/Promise/Adapter/SyncPromise.php:148
[23-Feb-2023 01:22:02 UTC] PHP  18. GraphQL\Executor\ReferenceExecutor->completeValue($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = ['description' => 'The post type', 'connections' => [...], 'interfaces' => [...], 'fields' => [...], 'model' => 'WPGraphQL\\Model\\Post', 'kind' => 'object', 'name' => 'Post']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['author' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'categories' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentCount' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'comments' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'conditionalTags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentType' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentTypeName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'databaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'date' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'dateGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'desiredSlug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'editingLockedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enclosure' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedScripts' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedStylesheets' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'excerpt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImage' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'guid' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'id' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isContentNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isPreview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRestricted' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRevision' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isSticky' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isTermNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lastEditedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'link' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modified' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modifiedGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pingStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pinged' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postFormats' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'preview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisionOf' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisions' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'slug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'status' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'tags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'template' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'templates' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'terms' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'title' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'toPing' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'uri' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['Node' => class WPGraphQL\Type\WPInterfaceType { ... }, 'ContentNode' => class WPGraphQL\Type\WPInterfaceType { ... }, 'UniformResourceIdentifiable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'DatabaseIdentifier' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTemplate' => class WPGraphQL\Type\WPInterfaceType { ... }, 'Previewable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTitle' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentEditor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithAuthor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithFeaturedImage' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithExcerpt' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithComments' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTrackbacks' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithRevisions' => class WPGraphQL\Type\WPInterfaceType { ... }, 'MenuItemLinkable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentBlocks' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'post'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'An object of the post Type. '; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class WPGraphQL\Type\WPObjectType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'post'; public $returnType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'RootQuery'; public $description = 'The root entry point into the Graph'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post'], $result = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:651
[23-Feb-2023 01:22:02 UTC] PHP  19. GraphQL\Executor\ReferenceExecutor->completeObjectValue($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = ['description' => 'The post type', 'connections' => [...], 'interfaces' => [...], 'fields' => [...], 'model' => 'WPGraphQL\\Model\\Post', 'kind' => 'object', 'name' => 'Post']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['author' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'categories' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentCount' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'comments' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'conditionalTags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentType' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentTypeName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'databaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'date' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'dateGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'desiredSlug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'editingLockedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enclosure' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedScripts' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedStylesheets' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'excerpt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImage' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'guid' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'id' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isContentNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isPreview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRestricted' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRevision' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isSticky' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isTermNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lastEditedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'link' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modified' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modifiedGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pingStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pinged' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postFormats' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'preview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisionOf' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisions' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'slug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'status' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'tags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'template' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'templates' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'terms' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'title' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'toPing' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'uri' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['Node' => class WPGraphQL\Type\WPInterfaceType { ... }, 'ContentNode' => class WPGraphQL\Type\WPInterfaceType { ... }, 'UniformResourceIdentifiable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'DatabaseIdentifier' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTemplate' => class WPGraphQL\Type\WPInterfaceType { ... }, 'Previewable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTitle' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentEditor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithAuthor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithFeaturedImage' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithExcerpt' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithComments' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTrackbacks' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithRevisions' => class WPGraphQL\Type\WPInterfaceType { ... }, 'MenuItemLinkable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentBlocks' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'post'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'An object of the post Type. '; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class WPGraphQL\Type\WPObjectType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'post'; public $returnType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'RootQuery'; public $description = 'The root entry point into the Graph'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post'], $result = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:793
[23-Feb-2023 01:22:02 UTC] PHP  20. GraphQL\Executor\ReferenceExecutor->collectAndExecuteSubfields($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = ['description' => 'The post type', 'connections' => [...], 'interfaces' => [...], 'fields' => [...], 'model' => 'WPGraphQL\\Model\\Post', 'kind' => 'object', 'name' => 'Post']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['author' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'categories' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentCount' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'comments' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'conditionalTags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentType' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentTypeName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'databaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'date' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'dateGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'desiredSlug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'editingLockedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enclosure' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedScripts' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedStylesheets' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'excerpt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImage' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'guid' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'id' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isContentNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isPreview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRestricted' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRevision' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isSticky' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isTermNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lastEditedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'link' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modified' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modifiedGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pingStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pinged' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postFormats' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'preview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisionOf' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisions' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'slug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'status' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'tags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'template' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'templates' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'terms' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'title' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'toPing' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'uri' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['Node' => class WPGraphQL\Type\WPInterfaceType { ... }, 'ContentNode' => class WPGraphQL\Type\WPInterfaceType { ... }, 'UniformResourceIdentifiable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'DatabaseIdentifier' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTemplate' => class WPGraphQL\Type\WPInterfaceType { ... }, 'Previewable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTitle' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentEditor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithAuthor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithFeaturedImage' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithExcerpt' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithComments' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTrackbacks' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithRevisions' => class WPGraphQL\Type\WPInterfaceType { ... }, 'MenuItemLinkable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentBlocks' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post'], $result = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1106
[23-Feb-2023 01:22:02 UTC] PHP  21. GraphQL\Executor\ReferenceExecutor->executeFields($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = ['description' => 'The post type', 'connections' => [...], 'interfaces' => [...], 'fields' => [...], 'model' => 'WPGraphQL\\Model\\Post', 'kind' => 'object', 'name' => 'Post']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['author' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'categories' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentCount' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'comments' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'conditionalTags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentType' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentTypeName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'databaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'date' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'dateGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'desiredSlug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'editingLockedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enclosure' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedScripts' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedStylesheets' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'excerpt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImage' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'guid' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'id' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isContentNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isPreview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRestricted' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRevision' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isSticky' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isTermNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lastEditedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'link' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modified' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modifiedGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pingStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pinged' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postFormats' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'preview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisionOf' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisions' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'slug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'status' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'tags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'template' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'templates' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'terms' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'title' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'toPing' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'uri' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['Node' => class WPGraphQL\Type\WPInterfaceType { ... }, 'ContentNode' => class WPGraphQL\Type\WPInterfaceType { ... }, 'UniformResourceIdentifiable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'DatabaseIdentifier' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTemplate' => class WPGraphQL\Type\WPInterfaceType { ... }, 'Previewable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTitle' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentEditor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithAuthor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithFeaturedImage' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithExcerpt' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithComments' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTrackbacks' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithRevisions' => class WPGraphQL\Type\WPInterfaceType { ... }, 'MenuItemLinkable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentBlocks' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }, $path = [0 => 'post'], $fields = class ArrayObject { private $storage = ['title' => class ArrayObject { ... }, 'content' => class ArrayObject { ... }, 'date' => class ArrayObject { ... }, 'author' => class ArrayObject { ... }, 'featuredImage' => class ArrayObject { ... }, '__typename' => class ArrayObject { ... }, 'contentBlocks' => class ArrayObject { ... }] }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1145
[23-Feb-2023 01:22:02 UTC] PHP  22. GraphQL\Executor\ReferenceExecutor->resolveField($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = ['description' => 'The post type', 'connections' => [...], 'interfaces' => [...], 'fields' => [...], 'model' => 'WPGraphQL\\Model\\Post', 'kind' => 'object', 'name' => 'Post']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['author' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'categories' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentCount' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'comments' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'conditionalTags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentType' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentTypeName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'databaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'date' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'dateGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'desiredSlug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'editingLockedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enclosure' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedScripts' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedStylesheets' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'excerpt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImage' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'guid' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'id' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isContentNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isPreview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRestricted' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRevision' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isSticky' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isTermNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lastEditedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'link' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modified' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modifiedGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pingStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pinged' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postFormats' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'preview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisionOf' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisions' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'slug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'status' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'tags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'template' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'templates' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'terms' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'title' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'toPing' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'uri' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['Node' => class WPGraphQL\Type\WPInterfaceType { ... }, 'ContentNode' => class WPGraphQL\Type\WPInterfaceType { ... }, 'UniformResourceIdentifiable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'DatabaseIdentifier' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTemplate' => class WPGraphQL\Type\WPInterfaceType { ... }, 'Previewable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTitle' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentEditor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithAuthor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithFeaturedImage' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithExcerpt' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithComments' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTrackbacks' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithRevisions' => class WPGraphQL\Type\WPInterfaceType { ... }, 'MenuItemLinkable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentBlocks' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post', 1 => 'contentBlocks']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1195
[23-Feb-2023 01:22:02 UTC] PHP  23. GraphQL\Executor\ReferenceExecutor->completeValueCatchingError($returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks'], $result = [0 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f6bfbae11ea'], 2 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f6bfbae11ed']]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:557
[23-Feb-2023 01:22:02 UTC] PHP  24. GraphQL\Executor\ReferenceExecutor->completeValue($returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks'], $result = [0 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f6bfbae11ea'], 2 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f6bfbae11ed']]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:654
[23-Feb-2023 01:22:02 UTC] PHP  25. GraphQL\Executor\ReferenceExecutor->completeListValue($returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks'], $results = [0 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f6bfbae11ea'], 2 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f6bfbae11ed']]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:761
[23-Feb-2023 01:22:02 UTC] PHP  26. GraphQL\Executor\ReferenceExecutor->completeValueCatchingError($returnType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = ['eagerlyLoadType' => TRUE, 'description' => 'Blocks that can be edited to create content and layouts', 'fields' => [...], 'resolveType' => class Closure { virtual $closure = "$this->WPGraphQL\Type\{closure}", ... }, 'kind' => 'interface', 'name' => 'ContentBlock']; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = []; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6bfbae11ed']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:887
[23-Feb-2023 01:22:02 UTC] PHP  27. GraphQL\Executor\ReferenceExecutor->completeValue($returnType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = ['eagerlyLoadType' => TRUE, 'description' => 'Blocks that can be edited to create content and layouts', 'fields' => [...], 'resolveType' => class Closure { virtual $closure = "$this->WPGraphQL\Type\{closure}", ... }, 'kind' => 'interface', 'name' => 'ContentBlock']; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = []; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6bfbae11ed']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:654
[23-Feb-2023 01:22:02 UTC] PHP  28. GraphQL\Executor\ReferenceExecutor->completeAbstractValue($returnType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = ['eagerlyLoadType' => TRUE, 'description' => 'Blocks that can be edited to create content and layouts', 'fields' => [...], 'resolveType' => class Closure { virtual $closure = "$this->WPGraphQL\Type\{closure}", ... }, 'kind' => 'interface', 'name' => 'ContentBlock']; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = []; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6bfbae11ed']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:789
[23-Feb-2023 01:22:02 UTC] PHP  29. GraphQL\Executor\ReferenceExecutor->completeObjectValue($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = ['description' => 'A block used for editing the site', 'interfaces' => [...], 'eagerlyLoadType' => TRUE, 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCode']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'attributes' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['ContentBlock' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6bfbae11ed']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:974
[23-Feb-2023 01:22:02 UTC] PHP  30. GraphQL\Executor\ReferenceExecutor->collectAndExecuteSubfields($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = ['description' => 'A block used for editing the site', 'interfaces' => [...], 'eagerlyLoadType' => TRUE, 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCode']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'attributes' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['ContentBlock' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6bfbae11ed']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1106
[23-Feb-2023 01:22:02 UTC] PHP  31. GraphQL\Executor\ReferenceExecutor->executeFields($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = ['description' => 'A block used for editing the site', 'interfaces' => [...], 'eagerlyLoadType' => TRUE, 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCode']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'attributes' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['ContentBlock' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6bfbae11ed'], $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1], $fields = class ArrayObject { private $storage = ['__typename' => class ArrayObject { ... }, 'renderedHtml' => class ArrayObject { ... }, 'id' => class ArrayObject { ... }, 'parentId' => class ArrayObject { ... }, 'attributes' => class ArrayObject { ... }] }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1145
[23-Feb-2023 01:22:02 UTC] PHP  32. GraphQL\Executor\ReferenceExecutor->resolveField($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = ['description' => 'A block used for editing the site', 'interfaces' => [...], 'eagerlyLoadType' => TRUE, 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCode']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'attributes' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['ContentBlock' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6bfbae11ed'], $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1195
[23-Feb-2023 01:22:02 UTC] PHP  33. GraphQL\Executor\ReferenceExecutor->completeValueCatchingError($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'attributes'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'Attributes of the %s Block Type'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class WPGraphQL\Type\WPObjectType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'attributes'; public $returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes'], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6bfbae11ed']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:557
[23-Feb-2023 01:22:02 UTC] PHP  34. GraphQL\Executor\ReferenceExecutor->completeValue($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'attributes'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'Attributes of the %s Block Type'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class WPGraphQL\Type\WPObjectType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'attributes'; public $returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes'], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6bfbae11ed']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:654
[23-Feb-2023 01:22:02 UTC] PHP  35. GraphQL\Executor\ReferenceExecutor->completeObjectValue($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'attributes'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'Attributes of the %s Block Type'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class WPGraphQL\Type\WPObjectType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'attributes'; public $returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes'], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6bfbae11ed']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:793
[23-Feb-2023 01:22:02 UTC] PHP  36. GraphQL\Executor\ReferenceExecutor->collectAndExecuteSubfields($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes'], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6bfbae11ed']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1106
[23-Feb-2023 01:22:02 UTC] PHP  37. GraphQL\Executor\ReferenceExecutor->executeFields($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6bfbae11ed'], $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes'], $fields = class ArrayObject { private $storage = ['borderColor' => class ArrayObject { ... }, 'backgroundColor' => class ArrayObject { ... }, 'content' => class ArrayObject { ... }, 'style' => class ArrayObject { ... }, 'textColor' => class ArrayObject { ... }, 'fontSize' => class ArrayObject { ... }, 'fontFamily' => class ArrayObject { ... }, '__typename' => class ArrayObject { ... }] }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1145
[23-Feb-2023 01:22:02 UTC] PHP  38. GraphQL\Executor\ReferenceExecutor->resolveField($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6bfbae11ed'], $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes', 4 => 'content']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1195
[23-Feb-2023 01:22:02 UTC] PHP  39. GraphQL\Executor\ReferenceExecutor->resolveFieldValueOrError($fieldDef = class GraphQL\Type\Definition\FieldDefinition { public $name = 'content'; public $args = []; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", public $static = [...]; public $parameter = [...] }; public $mapFn = NULL; public $description = 'The &quot;content&quot; field on the &quot;CoreCode&quot; block'; public $deprecationReason = NULL; public $astNode = NULL; public $config = ['type' => class Closure { virtual $closure = "$this->WPGraphQL\Registry\{closure}", ... }, 'description' => 'The "content" field on the "CoreCode" block', 'resolve' => class Closure { virtual $closure = "$this->WPGraphQL\ContentBlocks\Blocks\{closure}", ... }, 'name' => 'content']; private $type = class GraphQL\Type\Definition\StringType { public $name = 'String'; public $description = 'The `String` scalar type represents textual data, represented as UTF-8\ncharacter sequences. The String type is most often used by GraphQL to\nrepresent free-form human-readable text.'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }, $fieldNode = class GraphQL\Language\AST\FieldNode { public $loc = class GraphQL\Language\AST\Location { public $start = 629; public $end = 636; public $startToken = class GraphQL\Language\Token { ... }; public $endToken = class GraphQL\Language\Token { ... }; public $source = class GraphQL\Language\Source { ... } }; public $kind = 'Field'; public $name = class GraphQL\Language\AST\NameNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'Name'; public $value = 'content' }; public $alias = NULL; public $arguments = class GraphQL\Language\AST\NodeList { private $nodes = [...] }; public $directives = class GraphQL\Language\AST\NodeList { private $nodes = [...] }; public $selectionSet = NULL }, $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", public $static = ['field_resolver' => class Closure { virtual $closure = "$this->WPGraphQL\ContentBlocks\Blocks\{closure}", ... }, 'type_name' => 'CoreCodeAttributes', 'field_key' => 'content', 'field' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $parameter = ['$source' => '<required>', '$args' => '<required>', '$context' => '<required>', '$info' => '<required>'] }, $rootValue = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6bfbae11ed'], $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'content'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'The &quot;content&quot; field on the &quot;CoreCode&quot; block'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\StringType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'content'; public $returnType = class GraphQL\Type\Definition\StringType { public $name = 'String'; public $description = 'The `String` scalar type represents textual data, represented as UTF-8\ncharacter sequences. The String type is most often used by GraphQL to\nrepresent free-form human-readable text.'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes', 4 => 'content']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:550
[23-Feb-2023 01:22:02 UTC] PHP  40. WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure:/Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/src/Utils/InstrumentSchema.php:100-188}($source = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6bfbae11ed'], $args = [], $context = class WPGraphQL\AppContext { public $root_url = 'http://localhost:10028'; public $viewer = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] }; public $request = NULL; public $config = ['registered_editor_blocks' => [...]]; public $currentConnection = NULL; public $connectionArgs = []; public $loaders = ['comment_author' => class WPGraphQL\Data\Loader\CommentAuthorLoader { ... }, 'comment' => class WPGraphQL\Data\Loader\CommentLoader { ... }, 'enqueued_script' => class WPGraphQL\Data\Loader\EnqueuedScriptLoader { ... }, 'enqueued_stylesheet' => class WPGraphQL\Data\Loader\EnqueuedStylesheetLoader { ... }, 'plugin' => class WPGraphQL\Data\Loader\PluginLoader { ... }, 'nav_menu_item' => class WPGraphQL\Data\Loader\PostObjectLoader { ... }, 'post' => class WPGraphQL\Data\Loader\PostObjectLoader { ... }, 'post_type' => class WPGraphQL\Data\Loader\PostTypeLoader { ... }, 'taxonomy' => class WPGraphQL\Data\Loader\TaxonomyLoader { ... }, 'term' => class WPGraphQL\Data\Loader\TermObjectLoader { ... }, 'theme' => class WPGraphQL\Data\Loader\ThemeLoader { ... }, 'user' => class WPGraphQL\Data\Loader\UserLoader { ... }, 'user_role' => class WPGraphQL\Data\Loader\UserRoleLoader { ... }]; public $node_resolver = class WPGraphQL\Data\NodeResolver { protected $wp = class WP { ... }; protected $context = ... }; public $connection_query_class = NULL }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'content'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'The &quot;content&quot; field on the &quot;CoreCode&quot; block'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\StringType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'content'; public $returnType = class GraphQL\Type\Definition\StringType { public $name = 'String'; public $description = 'The `String` scalar type represents textual data, represented as UTF-8\ncharacter sequences. The String type is most often used by GraphQL to\nrepresent free-form human-readable text.'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes', 4 => 'content']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:623
[23-Feb-2023 01:22:02 UTC] PHP  41. WPGraphQL\ContentBlocks\Blocks\Block->WPGraphQL\ContentBlocks\Blocks\{closure:/Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql-content-blocks-main/includes/Blocks/Block.php:161-163}($block = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6bfbae11ed'], $args = [], $context = class WPGraphQL\AppContext { public $root_url = 'http://localhost:10028'; public $viewer = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] }; public $request = NULL; public $config = ['registered_editor_blocks' => [...]]; public $currentConnection = NULL; public $connectionArgs = []; public $loaders = ['comment_author' => class WPGraphQL\Data\Loader\CommentAuthorLoader { ... }, 'comment' => class WPGraphQL\Data\Loader\CommentLoader { ... }, 'enqueued_script' => class WPGraphQL\Data\Loader\EnqueuedScriptLoader { ... }, 'enqueued_stylesheet' => class WPGraphQL\Data\Loader\EnqueuedStylesheetLoader { ... }, 'plugin' => class WPGraphQL\Data\Loader\PluginLoader { ... }, 'nav_menu_item' => class WPGraphQL\Data\Loader\PostObjectLoader { ... }, 'post' => class WPGraphQL\Data\Loader\PostObjectLoader { ... }, 'post_type' => class WPGraphQL\Data\Loader\PostTypeLoader { ... }, 'taxonomy' => class WPGraphQL\Data\Loader\TaxonomyLoader { ... }, 'term' => class WPGraphQL\Data\Loader\TermObjectLoader { ... }, 'theme' => class WPGraphQL\Data\Loader\ThemeLoader { ... }, 'user' => class WPGraphQL\Data\Loader\UserLoader { ... }, 'user_role' => class WPGraphQL\Data\Loader\UserRoleLoader { ... }]; public $node_resolver = class WPGraphQL\Data\NodeResolver { protected $wp = class WP { ... }; protected $context = ... }; public $connection_query_class = NULL }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'content'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'The &quot;content&quot; field on the &quot;CoreCode&quot; block'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\StringType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'content'; public $returnType = class GraphQL\Type\Definition\StringType { public $name = 'String'; public $description = 'The `String` scalar type represents textual data, represented as UTF-8\ncharacter sequences. The String type is most often used by GraphQL to\nrepresent free-form human-readable text.'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes', 4 => 'content']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/src/Utils/InstrumentSchema.php:151
[23-Feb-2023 01:22:02 UTC] PHP  42. WPGraphQL\ContentBlocks\Blocks\Block->resolve_block_attributes($block = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6bfbae11ed'], $attribute_name = 'content', $attribute_config = ['type' => 'string', 'source' => 'html', 'selector' => 'code']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql-content-blocks-main/includes/Blocks/Block.php:162
[23-Feb-2023 01:32:10 UTC] PHP Warning:  Undefined array key "default" in /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql-content-blocks-main/includes/Blocks/Block.php on line 214
[23-Feb-2023 01:32:10 UTC] PHP Stack trace:
[23-Feb-2023 01:32:10 UTC] PHP   1. {main}() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/index.php:0
[23-Feb-2023 01:32:10 UTC] PHP   2. require() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/index.php:17
[23-Feb-2023 01:32:10 UTC] PHP   3. wp($query_vars = *uninitialized*) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-blog-header.php:16
[23-Feb-2023 01:32:10 UTC] PHP   4. WP->main($query_args = '') /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/functions.php:1332
[23-Feb-2023 01:32:10 UTC] PHP   5. WP->parse_request($extra_query_vars = '') /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/class-wp.php:780
[23-Feb-2023 01:32:10 UTC] PHP   6. do_action_ref_array($hook_name = 'parse_request', $args = [0 => class WP { public $public_query_vars = [...]; public $private_query_vars = [...]; public $extra_query_vars = [...]; public $query_vars = [...]; public $query_string = ''; public $request = 'graphql'; public $matched_rule = 'graphql/?$'; public $matched_query = 'graphql=true'; public $did_permalink = TRUE }]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/class-wp.php:399
[23-Feb-2023 01:32:10 UTC] PHP   7. WP_Hook->do_action($args = [0 => class WP { public $public_query_vars = [...]; public $private_query_vars = [...]; public $extra_query_vars = [...]; public $query_vars = [...]; public $query_string = ''; public $request = 'graphql'; public $matched_rule = 'graphql/?$'; public $matched_query = 'graphql=true'; public $did_permalink = TRUE }]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/plugin.php:565
[23-Feb-2023 01:32:10 UTC] PHP   8. WP_Hook->apply_filters($value = '', $args = [0 => class WP { public $public_query_vars = [...]; public $private_query_vars = [...]; public $extra_query_vars = [...]; public $query_vars = [...]; public $query_string = ''; public $request = 'graphql'; public $matched_rule = 'graphql/?$'; public $matched_query = 'graphql=true'; public $did_permalink = TRUE }]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/class-wp-hook.php:332
[23-Feb-2023 01:32:10 UTC] PHP   9. WPGraphQL\Router::resolve_http_request(class WP { public $public_query_vars = [0 => 'm', 1 => 'p', 2 => 'posts', 3 => 'w', 4 => 'cat', 5 => 'withcomments', 6 => 'withoutcomments', 7 => 's', 8 => 'search', 9 => 'exact', 10 => 'sentence', 11 => 'calendar', 12 => 'page', 13 => 'paged', 14 => 'more', 15 => 'tb', 16 => 'pb', 17 => 'author', 18 => 'order', 19 => 'orderby', 20 => 'year', 21 => 'monthnum', 22 => 'day', 23 => 'hour', 24 => 'minute', 25 => 'second', 26 => 'name', 27 => 'category_name', 28 => 'tag', 29 => 'feed', 30 => 'author_name', 31 => 'pagename', 32 => 'page_id', 33 => 'error', 34 => 'attachment', 35 => 'attachment_id', 36 => 'subpost', 37 => 'subpost_id', 38 => 'preview', 39 => 'robots', 40 => 'favicon', 41 => 'taxonomy', 42 => 'term', 43 => 'cpage', 44 => 'post_type', 45 => 'embed', 46 => 'post_format', 47 => 'rest_route', 48 => 'sitemap', 49 => 'sitemap-subtype', 50 => 'sitemap-stylesheet', 51 => 'graphql']; public $private_query_vars = [0 => 'offset', 1 => 'posts_per_page', 2 => 'posts_per_archive_page', 3 => 'showposts', 4 => 'nopaging', 5 => 'post_type', 6 => 'post_status', 7 => 'category__in', 8 => 'category__not_in', 9 => 'category__and', 10 => 'tag__in', 11 => 'tag__not_in', 12 => 'tag__and', 13 => 'tag_slug__in', 14 => 'tag_slug__and', 15 => 'tag_id', 16 => 'post_mime_type', 17 => 'perm', 18 => 'comments_per_page', 19 => 'post__in', 20 => 'post__not_in', 21 => 'post_parent', 22 => 'post_parent__in', 23 => 'post_parent__not_in', 24 => 'title', 25 => 'fields']; public $extra_query_vars = []; public $query_vars = ['graphql' => 'true']; public $query_string = ''; public $request = 'graphql'; public $matched_rule = 'graphql/?$'; public $matched_query = 'graphql=true'; public $did_permalink = TRUE }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/class-wp-hook.php:308
[23-Feb-2023 01:32:10 UTC] PHP  10. WPGraphQL\Router::process_http_request() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/src/Router.php:275
[23-Feb-2023 01:32:10 UTC] PHP  11. WPGraphQL\Request->execute_http() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/src/Router.php:481
[23-Feb-2023 01:32:10 UTC] PHP  12. GraphQL\Server\StandardServer->executeRequest($parsedBody = class GraphQL\Server\OperationParams { public $queryId = NULL; public $query = 'fragment BlogInfoFragment on GeneralSettings {\n  title\n  description\n  __typename\n}\n\nfragment NavigationMenuItemFragment on MenuItem {\n  id\n  path\n  label\n  parentId\n  cssClasses\n  menu {\n    node {\n      name\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment FeaturedImageFragment on NodeWithFeaturedImage {\n  featuredImage {\n    node {\n      id\n      sourceUrl\n      altText\n      mediaDetails {\n        width\n        height\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }'...; public $operation = 'GetPost'; public $variables = ['asPreview' => TRUE, 'databaseId' => 5, 'headerLocation' => 'PRIMARY', 'footerLocation' => 'FOOTER']; public $extensions = NULL; private $originalInput = ['operationname' => 'GetPost', 'variables' => [...], 'query' => 'fragment BlogInfoFragment on GeneralSettings {\n  title\n  description\n  __typename\n}\n\nfragment NavigationMenuItemFragment on MenuItem {\n  id\n  path\n  label\n  parentId\n  cssClasses\n  menu {\n    node {\n      name\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment FeaturedImageFragment on NodeWithFeaturedImage {\n  featuredImage {\n    node {\n      id\n      sourceUrl\n      altText\n      mediaDetails {\n        width\n        height\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }'...]; private $readOnly = FALSE }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/src/Request.php:713
[23-Feb-2023 01:32:10 UTC] PHP  13. GraphQL\Server\Helper->executeOperation($config = class GraphQL\Server\ServerConfig { private $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; private $context = class WPGraphQL\AppContext { public $root_url = 'http://localhost:10028'; public $viewer = class WP_User { ... }; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... }; public $request = NULL; public $config = [...]; public $currentConnection = NULL; public $connectionArgs = [...]; public $loaders = [...]; public $node_resolver = class WPGraphQL\Data\NodeResolver { ... }; public $connection_query_class = NULL }; private $rootValue = NULL; private $errorFormatter = NULL; private $errorsHandler = NULL; private $debugFlag = 0; private $queryBatching = TRUE; private $validationRules = [0 => class GraphQL\Validator\Rules\ExecutableDefinitions { ... }, 1 => class GraphQL\Validator\Rules\UniqueOperationNames { ... }, 2 => class GraphQL\Validator\Rules\LoneAnonymousOperation { ... }, 3 => class GraphQL\Validator\Rules\SingleFieldSubscription { ... }, 4 => class GraphQL\Validator\Rules\KnownTypeNames { ... }, 5 => class GraphQL\Validator\Rules\FragmentsOnCompositeTypes { ... }, 6 => class GraphQL\Validator\Rules\VariablesAreInputTypes { ... }, 7 => class GraphQL\Validator\Rules\ScalarLeafs { ... }, 8 => class GraphQL\Validator\Rules\FieldsOnCorrectType { ... }, 9 => class GraphQL\Validator\Rules\UniqueFragmentNames { ... }, 10 => class GraphQL\Validator\Rules\KnownFragmentNames { ... }, 11 => class GraphQL\Validator\Rules\NoUnusedFragments { ... }, 12 => class GraphQL\Validator\Rules\PossibleFragmentSpreads { ... }, 13 => class GraphQL\Validator\Rules\NoFragmentCycles { ... }, 14 => class GraphQL\Validator\Rules\UniqueVariableNames { ... }, 15 => class GraphQL\Validator\Rules\NoUndefinedVariables { ... }, 16 => class GraphQL\Validator\Rules\NoUnusedVariables { ... }, 17 => class GraphQL\Validator\Rules\KnownDirectives { ... }, 18 => class GraphQL\Validator\Rules\UniqueDirectivesPerLocation { ... }, 19 => class GraphQL\Validator\Rules\KnownArgumentNames { ... }, 20 => class GraphQL\Validator\Rules\UniqueArgumentNames { ... }, 21 => class GraphQL\Validator\Rules\ValuesOfCorrectType { ... }, 22 => class GraphQL\Validator\Rules\ProvidedRequiredArguments { ... }, 23 => class GraphQL\Validator\Rules\VariablesInAllowedPosition { ... }, 24 => class GraphQL\Validator\Rules\OverlappingFieldsCanBeMerged { ... }, 25 => class GraphQL\Validator\Rules\UniqueInputFieldNames { ... }, 'require_authentication' => class WPGraphQL\Server\ValidationRules\RequireAuthentication { ... }, 'disable_introspection' => class WPGraphQL\Server\ValidationRules\DisableIntrospection { ... }, 'query_depth' => class WPGraphQL\Server\ValidationRules\QueryDepth { ... }]; private $fieldResolver = NULL; private $promiseAdapter = NULL; private $persistentQueryLoader = NULL }, $op = class GraphQL\Server\OperationParams { public $queryId = NULL; public $query = 'fragment BlogInfoFragment on GeneralSettings {\n  title\n  description\n  __typename\n}\n\nfragment NavigationMenuItemFragment on MenuItem {\n  id\n  path\n  label\n  parentId\n  cssClasses\n  menu {\n    node {\n      name\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment FeaturedImageFragment on NodeWithFeaturedImage {\n  featuredImage {\n    node {\n      id\n      sourceUrl\n      altText\n      mediaDetails {\n        width\n        height\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }'...; public $operation = 'GetPost'; public $variables = ['asPreview' => TRUE, 'databaseId' => 5, 'headerLocation' => 'PRIMARY', 'footerLocation' => 'FOOTER']; public $extensions = NULL; private $originalInput = ['operationname' => 'GetPost', 'variables' => [...], 'query' => 'fragment BlogInfoFragment on GeneralSettings {\n  title\n  description\n  __typename\n}\n\nfragment NavigationMenuItemFragment on MenuItem {\n  id\n  path\n  label\n  parentId\n  cssClasses\n  menu {\n    node {\n      name\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment FeaturedImageFragment on NodeWithFeaturedImage {\n  featuredImage {\n    node {\n      id\n      sourceUrl\n      altText\n      mediaDetails {\n        width\n        height\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }'...]; private $readOnly = FALSE }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Server/StandardServer.php:136
[23-Feb-2023 01:32:10 UTC] PHP  14. GraphQL\Executor\Promise\Adapter\SyncPromiseAdapter->wait($promise = class GraphQL\Executor\Promise\Promise { public $adoptedPromise = class GraphQL\Executor\Promise\Adapter\SyncPromise { public $state = 'pending'; public $result = NULL; private $waiting = [...] }; private $adapter = class GraphQL\Executor\Promise\Adapter\SyncPromiseAdapter {  } }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Server/Helper.php:214
[23-Feb-2023 01:32:10 UTC] PHP  15. GraphQL\Executor\Promise\Adapter\SyncPromise::runQueue() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/Promise/Adapter/SyncPromiseAdapter.php:149
[23-Feb-2023 01:32:10 UTC] PHP  16. GraphQL\Executor\Promise\Adapter\SyncPromise->GraphQL\Executor\Promise\Adapter\{closure:/Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/Promise/Adapter/SyncPromise.php:142-163}() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/Promise/Adapter/SyncPromise.php:53
[23-Feb-2023 01:32:10 UTC] PHP  17. GraphQL\Executor\ReferenceExecutor->GraphQL\Executor\{closure:/Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:650-652}($resolved = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/Promise/Adapter/SyncPromise.php:148
[23-Feb-2023 01:32:10 UTC] PHP  18. GraphQL\Executor\ReferenceExecutor->completeValue($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = ['description' => 'The post type', 'connections' => [...], 'interfaces' => [...], 'fields' => [...], 'model' => 'WPGraphQL\\Model\\Post', 'kind' => 'object', 'name' => 'Post']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['author' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'categories' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentCount' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'comments' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'conditionalTags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentType' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentTypeName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'databaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'date' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'dateGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'desiredSlug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'editingLockedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enclosure' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedScripts' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedStylesheets' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'excerpt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImage' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'guid' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'id' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isContentNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isPreview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRestricted' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRevision' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isSticky' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isTermNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lastEditedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'link' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modified' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modifiedGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pingStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pinged' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postFormats' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'preview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisionOf' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisions' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'slug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'status' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'tags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'template' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'templates' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'terms' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'title' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'toPing' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'uri' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['Node' => class WPGraphQL\Type\WPInterfaceType { ... }, 'ContentNode' => class WPGraphQL\Type\WPInterfaceType { ... }, 'UniformResourceIdentifiable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'DatabaseIdentifier' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTemplate' => class WPGraphQL\Type\WPInterfaceType { ... }, 'Previewable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTitle' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentEditor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithAuthor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithFeaturedImage' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithExcerpt' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithComments' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTrackbacks' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithRevisions' => class WPGraphQL\Type\WPInterfaceType { ... }, 'MenuItemLinkable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentBlocks' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'post'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'An object of the post Type. '; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class WPGraphQL\Type\WPObjectType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'post'; public $returnType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'RootQuery'; public $description = 'The root entry point into the Graph'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post'], $result = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:651
[23-Feb-2023 01:32:10 UTC] PHP  19. GraphQL\Executor\ReferenceExecutor->completeObjectValue($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = ['description' => 'The post type', 'connections' => [...], 'interfaces' => [...], 'fields' => [...], 'model' => 'WPGraphQL\\Model\\Post', 'kind' => 'object', 'name' => 'Post']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['author' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'categories' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentCount' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'comments' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'conditionalTags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentType' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentTypeName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'databaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'date' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'dateGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'desiredSlug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'editingLockedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enclosure' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedScripts' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedStylesheets' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'excerpt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImage' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'guid' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'id' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isContentNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isPreview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRestricted' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRevision' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isSticky' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isTermNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lastEditedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'link' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modified' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modifiedGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pingStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pinged' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postFormats' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'preview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisionOf' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisions' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'slug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'status' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'tags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'template' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'templates' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'terms' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'title' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'toPing' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'uri' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['Node' => class WPGraphQL\Type\WPInterfaceType { ... }, 'ContentNode' => class WPGraphQL\Type\WPInterfaceType { ... }, 'UniformResourceIdentifiable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'DatabaseIdentifier' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTemplate' => class WPGraphQL\Type\WPInterfaceType { ... }, 'Previewable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTitle' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentEditor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithAuthor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithFeaturedImage' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithExcerpt' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithComments' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTrackbacks' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithRevisions' => class WPGraphQL\Type\WPInterfaceType { ... }, 'MenuItemLinkable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentBlocks' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'post'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'An object of the post Type. '; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class WPGraphQL\Type\WPObjectType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'post'; public $returnType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'RootQuery'; public $description = 'The root entry point into the Graph'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post'], $result = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:793
[23-Feb-2023 01:32:10 UTC] PHP  20. GraphQL\Executor\ReferenceExecutor->collectAndExecuteSubfields($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = ['description' => 'The post type', 'connections' => [...], 'interfaces' => [...], 'fields' => [...], 'model' => 'WPGraphQL\\Model\\Post', 'kind' => 'object', 'name' => 'Post']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['author' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'categories' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentCount' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'comments' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'conditionalTags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentType' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentTypeName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'databaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'date' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'dateGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'desiredSlug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'editingLockedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enclosure' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedScripts' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedStylesheets' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'excerpt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImage' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'guid' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'id' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isContentNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isPreview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRestricted' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRevision' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isSticky' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isTermNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lastEditedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'link' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modified' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modifiedGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pingStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pinged' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postFormats' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'preview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisionOf' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisions' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'slug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'status' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'tags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'template' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'templates' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'terms' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'title' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'toPing' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'uri' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['Node' => class WPGraphQL\Type\WPInterfaceType { ... }, 'ContentNode' => class WPGraphQL\Type\WPInterfaceType { ... }, 'UniformResourceIdentifiable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'DatabaseIdentifier' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTemplate' => class WPGraphQL\Type\WPInterfaceType { ... }, 'Previewable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTitle' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentEditor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithAuthor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithFeaturedImage' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithExcerpt' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithComments' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTrackbacks' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithRevisions' => class WPGraphQL\Type\WPInterfaceType { ... }, 'MenuItemLinkable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentBlocks' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post'], $result = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1106
[23-Feb-2023 01:32:10 UTC] PHP  21. GraphQL\Executor\ReferenceExecutor->executeFields($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = ['description' => 'The post type', 'connections' => [...], 'interfaces' => [...], 'fields' => [...], 'model' => 'WPGraphQL\\Model\\Post', 'kind' => 'object', 'name' => 'Post']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['author' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'categories' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentCount' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'comments' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'conditionalTags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentType' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentTypeName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'databaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'date' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'dateGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'desiredSlug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'editingLockedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enclosure' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedScripts' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedStylesheets' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'excerpt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImage' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'guid' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'id' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isContentNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isPreview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRestricted' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRevision' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isSticky' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isTermNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lastEditedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'link' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modified' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modifiedGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pingStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pinged' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postFormats' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'preview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisionOf' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisions' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'slug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'status' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'tags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'template' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'templates' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'terms' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'title' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'toPing' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'uri' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['Node' => class WPGraphQL\Type\WPInterfaceType { ... }, 'ContentNode' => class WPGraphQL\Type\WPInterfaceType { ... }, 'UniformResourceIdentifiable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'DatabaseIdentifier' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTemplate' => class WPGraphQL\Type\WPInterfaceType { ... }, 'Previewable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTitle' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentEditor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithAuthor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithFeaturedImage' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithExcerpt' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithComments' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTrackbacks' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithRevisions' => class WPGraphQL\Type\WPInterfaceType { ... }, 'MenuItemLinkable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentBlocks' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }, $path = [0 => 'post'], $fields = class ArrayObject { private $storage = ['title' => class ArrayObject { ... }, 'content' => class ArrayObject { ... }, 'date' => class ArrayObject { ... }, 'author' => class ArrayObject { ... }, 'featuredImage' => class ArrayObject { ... }, '__typename' => class ArrayObject { ... }, 'contentBlocks' => class ArrayObject { ... }] }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1145
[23-Feb-2023 01:32:10 UTC] PHP  22. GraphQL\Executor\ReferenceExecutor->resolveField($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = ['description' => 'The post type', 'connections' => [...], 'interfaces' => [...], 'fields' => [...], 'model' => 'WPGraphQL\\Model\\Post', 'kind' => 'object', 'name' => 'Post']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['author' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'categories' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentCount' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'comments' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'conditionalTags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentType' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentTypeName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'databaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'date' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'dateGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'desiredSlug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'editingLockedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enclosure' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedScripts' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedStylesheets' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'excerpt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImage' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'guid' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'id' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isContentNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isPreview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRestricted' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRevision' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isSticky' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isTermNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lastEditedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'link' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modified' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modifiedGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pingStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pinged' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postFormats' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'preview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisionOf' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisions' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'slug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'status' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'tags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'template' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'templates' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'terms' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'title' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'toPing' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'uri' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['Node' => class WPGraphQL\Type\WPInterfaceType { ... }, 'ContentNode' => class WPGraphQL\Type\WPInterfaceType { ... }, 'UniformResourceIdentifiable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'DatabaseIdentifier' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTemplate' => class WPGraphQL\Type\WPInterfaceType { ... }, 'Previewable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTitle' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentEditor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithAuthor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithFeaturedImage' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithExcerpt' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithComments' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTrackbacks' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithRevisions' => class WPGraphQL\Type\WPInterfaceType { ... }, 'MenuItemLinkable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentBlocks' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post', 1 => 'contentBlocks']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1195
[23-Feb-2023 01:32:10 UTC] PHP  23. GraphQL\Executor\ReferenceExecutor->completeValueCatchingError($returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks'], $result = [0 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f6c21ab16a7'], 2 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f6c21ab16a9']]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:557
[23-Feb-2023 01:32:10 UTC] PHP  24. GraphQL\Executor\ReferenceExecutor->completeValue($returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks'], $result = [0 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f6c21ab16a7'], 2 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f6c21ab16a9']]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:654
[23-Feb-2023 01:32:10 UTC] PHP  25. GraphQL\Executor\ReferenceExecutor->completeListValue($returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks'], $results = [0 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f6c21ab16a7'], 2 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f6c21ab16a9']]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:761
[23-Feb-2023 01:32:10 UTC] PHP  26. GraphQL\Executor\ReferenceExecutor->completeValueCatchingError($returnType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = ['eagerlyLoadType' => TRUE, 'description' => 'Blocks that can be edited to create content and layouts', 'fields' => [...], 'resolveType' => class Closure { virtual $closure = "$this->WPGraphQL\Type\{closure}", ... }, 'kind' => 'interface', 'name' => 'ContentBlock']; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = []; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6c21ab16a7']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:887
[23-Feb-2023 01:32:10 UTC] PHP  27. GraphQL\Executor\ReferenceExecutor->completeValue($returnType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = ['eagerlyLoadType' => TRUE, 'description' => 'Blocks that can be edited to create content and layouts', 'fields' => [...], 'resolveType' => class Closure { virtual $closure = "$this->WPGraphQL\Type\{closure}", ... }, 'kind' => 'interface', 'name' => 'ContentBlock']; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = []; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6c21ab16a7']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:654
[23-Feb-2023 01:32:10 UTC] PHP  28. GraphQL\Executor\ReferenceExecutor->completeAbstractValue($returnType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = ['eagerlyLoadType' => TRUE, 'description' => 'Blocks that can be edited to create content and layouts', 'fields' => [...], 'resolveType' => class Closure { virtual $closure = "$this->WPGraphQL\Type\{closure}", ... }, 'kind' => 'interface', 'name' => 'ContentBlock']; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = []; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6c21ab16a7']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:789
[23-Feb-2023 01:32:10 UTC] PHP  29. GraphQL\Executor\ReferenceExecutor->completeObjectValue($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = ['description' => 'A block used for editing the site', 'interfaces' => [...], 'eagerlyLoadType' => TRUE, 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCode']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'attributes' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['ContentBlock' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6c21ab16a7']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:974
[23-Feb-2023 01:32:10 UTC] PHP  30. GraphQL\Executor\ReferenceExecutor->collectAndExecuteSubfields($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = ['description' => 'A block used for editing the site', 'interfaces' => [...], 'eagerlyLoadType' => TRUE, 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCode']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'attributes' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['ContentBlock' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6c21ab16a7']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1106
[23-Feb-2023 01:32:10 UTC] PHP  31. GraphQL\Executor\ReferenceExecutor->executeFields($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = ['description' => 'A block used for editing the site', 'interfaces' => [...], 'eagerlyLoadType' => TRUE, 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCode']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'attributes' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['ContentBlock' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6c21ab16a7'], $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0], $fields = class ArrayObject { private $storage = ['__typename' => class ArrayObject { ... }, 'renderedHtml' => class ArrayObject { ... }, 'id' => class ArrayObject { ... }, 'parentId' => class ArrayObject { ... }, 'attributes' => class ArrayObject { ... }] }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1145
[23-Feb-2023 01:32:10 UTC] PHP  32. GraphQL\Executor\ReferenceExecutor->resolveField($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = ['description' => 'A block used for editing the site', 'interfaces' => [...], 'eagerlyLoadType' => TRUE, 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCode']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'attributes' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['ContentBlock' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6c21ab16a7'], $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1195
[23-Feb-2023 01:32:10 UTC] PHP  33. GraphQL\Executor\ReferenceExecutor->completeValueCatchingError($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'attributes'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'Attributes of the %s Block Type'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class WPGraphQL\Type\WPObjectType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'attributes'; public $returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes'], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6c21ab16a7']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:557
[23-Feb-2023 01:32:10 UTC] PHP  34. GraphQL\Executor\ReferenceExecutor->completeValue($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'attributes'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'Attributes of the %s Block Type'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class WPGraphQL\Type\WPObjectType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'attributes'; public $returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes'], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6c21ab16a7']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:654
[23-Feb-2023 01:32:10 UTC] PHP  35. GraphQL\Executor\ReferenceExecutor->completeObjectValue($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'attributes'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'Attributes of the %s Block Type'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class WPGraphQL\Type\WPObjectType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'attributes'; public $returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes'], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6c21ab16a7']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:793
[23-Feb-2023 01:32:10 UTC] PHP  36. GraphQL\Executor\ReferenceExecutor->collectAndExecuteSubfields($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes'], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6c21ab16a7']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1106
[23-Feb-2023 01:32:10 UTC] PHP  37. GraphQL\Executor\ReferenceExecutor->executeFields($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6c21ab16a7'], $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes'], $fields = class ArrayObject { private $storage = ['borderColor' => class ArrayObject { ... }, 'backgroundColor' => class ArrayObject { ... }, 'content' => class ArrayObject { ... }, 'style' => class ArrayObject { ... }, 'textColor' => class ArrayObject { ... }, 'fontSize' => class ArrayObject { ... }, 'fontFamily' => class ArrayObject { ... }, '__typename' => class ArrayObject { ... }] }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1145
[23-Feb-2023 01:32:10 UTC] PHP  38. GraphQL\Executor\ReferenceExecutor->resolveField($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6c21ab16a7'], $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes', 4 => 'content']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1195
[23-Feb-2023 01:32:10 UTC] PHP  39. GraphQL\Executor\ReferenceExecutor->resolveFieldValueOrError($fieldDef = class GraphQL\Type\Definition\FieldDefinition { public $name = 'content'; public $args = []; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", public $static = [...]; public $parameter = [...] }; public $mapFn = NULL; public $description = 'The &quot;content&quot; field on the &quot;CoreCode&quot; block'; public $deprecationReason = NULL; public $astNode = NULL; public $config = ['type' => class Closure { virtual $closure = "$this->WPGraphQL\Registry\{closure}", ... }, 'description' => 'The "content" field on the "CoreCode" block', 'resolve' => class Closure { virtual $closure = "$this->WPGraphQL\ContentBlocks\Blocks\{closure}", ... }, 'name' => 'content']; private $type = class GraphQL\Type\Definition\StringType { public $name = 'String'; public $description = 'The `String` scalar type represents textual data, represented as UTF-8\ncharacter sequences. The String type is most often used by GraphQL to\nrepresent free-form human-readable text.'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }, $fieldNode = class GraphQL\Language\AST\FieldNode { public $loc = class GraphQL\Language\AST\Location { public $start = 629; public $end = 636; public $startToken = class GraphQL\Language\Token { ... }; public $endToken = class GraphQL\Language\Token { ... }; public $source = class GraphQL\Language\Source { ... } }; public $kind = 'Field'; public $name = class GraphQL\Language\AST\NameNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'Name'; public $value = 'content' }; public $alias = NULL; public $arguments = class GraphQL\Language\AST\NodeList { private $nodes = [...] }; public $directives = class GraphQL\Language\AST\NodeList { private $nodes = [...] }; public $selectionSet = NULL }, $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", public $static = ['field_resolver' => class Closure { virtual $closure = "$this->WPGraphQL\ContentBlocks\Blocks\{closure}", ... }, 'type_name' => 'CoreCodeAttributes', 'field_key' => 'content', 'field' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $parameter = ['$source' => '<required>', '$args' => '<required>', '$context' => '<required>', '$info' => '<required>'] }, $rootValue = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6c21ab16a7'], $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'content'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'The &quot;content&quot; field on the &quot;CoreCode&quot; block'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\StringType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'content'; public $returnType = class GraphQL\Type\Definition\StringType { public $name = 'String'; public $description = 'The `String` scalar type represents textual data, represented as UTF-8\ncharacter sequences. The String type is most often used by GraphQL to\nrepresent free-form human-readable text.'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes', 4 => 'content']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:550
[23-Feb-2023 01:32:10 UTC] PHP  40. WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure:/Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/src/Utils/InstrumentSchema.php:100-188}($source = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6c21ab16a7'], $args = [], $context = class WPGraphQL\AppContext { public $root_url = 'http://localhost:10028'; public $viewer = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] }; public $request = NULL; public $config = ['registered_editor_blocks' => [...]]; public $currentConnection = NULL; public $connectionArgs = []; public $loaders = ['comment_author' => class WPGraphQL\Data\Loader\CommentAuthorLoader { ... }, 'comment' => class WPGraphQL\Data\Loader\CommentLoader { ... }, 'enqueued_script' => class WPGraphQL\Data\Loader\EnqueuedScriptLoader { ... }, 'enqueued_stylesheet' => class WPGraphQL\Data\Loader\EnqueuedStylesheetLoader { ... }, 'plugin' => class WPGraphQL\Data\Loader\PluginLoader { ... }, 'nav_menu_item' => class WPGraphQL\Data\Loader\PostObjectLoader { ... }, 'post' => class WPGraphQL\Data\Loader\PostObjectLoader { ... }, 'post_type' => class WPGraphQL\Data\Loader\PostTypeLoader { ... }, 'taxonomy' => class WPGraphQL\Data\Loader\TaxonomyLoader { ... }, 'term' => class WPGraphQL\Data\Loader\TermObjectLoader { ... }, 'theme' => class WPGraphQL\Data\Loader\ThemeLoader { ... }, 'user' => class WPGraphQL\Data\Loader\UserLoader { ... }, 'user_role' => class WPGraphQL\Data\Loader\UserRoleLoader { ... }]; public $node_resolver = class WPGraphQL\Data\NodeResolver { protected $wp = class WP { ... }; protected $context = ... }; public $connection_query_class = NULL }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'content'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'The &quot;content&quot; field on the &quot;CoreCode&quot; block'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\StringType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'content'; public $returnType = class GraphQL\Type\Definition\StringType { public $name = 'String'; public $description = 'The `String` scalar type represents textual data, represented as UTF-8\ncharacter sequences. The String type is most often used by GraphQL to\nrepresent free-form human-readable text.'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes', 4 => 'content']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:623
[23-Feb-2023 01:32:10 UTC] PHP  41. WPGraphQL\ContentBlocks\Blocks\Block->WPGraphQL\ContentBlocks\Blocks\{closure:/Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql-content-blocks-main/includes/Blocks/Block.php:161-163}($block = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6c21ab16a7'], $args = [], $context = class WPGraphQL\AppContext { public $root_url = 'http://localhost:10028'; public $viewer = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] }; public $request = NULL; public $config = ['registered_editor_blocks' => [...]]; public $currentConnection = NULL; public $connectionArgs = []; public $loaders = ['comment_author' => class WPGraphQL\Data\Loader\CommentAuthorLoader { ... }, 'comment' => class WPGraphQL\Data\Loader\CommentLoader { ... }, 'enqueued_script' => class WPGraphQL\Data\Loader\EnqueuedScriptLoader { ... }, 'enqueued_stylesheet' => class WPGraphQL\Data\Loader\EnqueuedStylesheetLoader { ... }, 'plugin' => class WPGraphQL\Data\Loader\PluginLoader { ... }, 'nav_menu_item' => class WPGraphQL\Data\Loader\PostObjectLoader { ... }, 'post' => class WPGraphQL\Data\Loader\PostObjectLoader { ... }, 'post_type' => class WPGraphQL\Data\Loader\PostTypeLoader { ... }, 'taxonomy' => class WPGraphQL\Data\Loader\TaxonomyLoader { ... }, 'term' => class WPGraphQL\Data\Loader\TermObjectLoader { ... }, 'theme' => class WPGraphQL\Data\Loader\ThemeLoader { ... }, 'user' => class WPGraphQL\Data\Loader\UserLoader { ... }, 'user_role' => class WPGraphQL\Data\Loader\UserRoleLoader { ... }]; public $node_resolver = class WPGraphQL\Data\NodeResolver { protected $wp = class WP { ... }; protected $context = ... }; public $connection_query_class = NULL }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'content'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'The &quot;content&quot; field on the &quot;CoreCode&quot; block'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\StringType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'content'; public $returnType = class GraphQL\Type\Definition\StringType { public $name = 'String'; public $description = 'The `String` scalar type represents textual data, represented as UTF-8\ncharacter sequences. The String type is most often used by GraphQL to\nrepresent free-form human-readable text.'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes', 4 => 'content']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/src/Utils/InstrumentSchema.php:151
[23-Feb-2023 01:32:10 UTC] PHP  42. WPGraphQL\ContentBlocks\Blocks\Block->resolve_block_attributes($block = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6c21ab16a7'], $attribute_name = 'content', $attribute_config = ['type' => 'string', 'source' => 'html', 'selector' => 'code']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql-content-blocks-main/includes/Blocks/Block.php:162
[23-Feb-2023 01:32:10 UTC] PHP Warning:  Undefined array key "default" in /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql-content-blocks-main/includes/Blocks/Block.php on line 214
[23-Feb-2023 01:32:10 UTC] PHP Stack trace:
[23-Feb-2023 01:32:10 UTC] PHP   1. {main}() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/index.php:0
[23-Feb-2023 01:32:10 UTC] PHP   2. require() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/index.php:17
[23-Feb-2023 01:32:10 UTC] PHP   3. wp($query_vars = *uninitialized*) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-blog-header.php:16
[23-Feb-2023 01:32:10 UTC] PHP   4. WP->main($query_args = '') /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/functions.php:1332
[23-Feb-2023 01:32:10 UTC] PHP   5. WP->parse_request($extra_query_vars = '') /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/class-wp.php:780
[23-Feb-2023 01:32:10 UTC] PHP   6. do_action_ref_array($hook_name = 'parse_request', $args = [0 => class WP { public $public_query_vars = [...]; public $private_query_vars = [...]; public $extra_query_vars = [...]; public $query_vars = [...]; public $query_string = ''; public $request = 'graphql'; public $matched_rule = 'graphql/?$'; public $matched_query = 'graphql=true'; public $did_permalink = TRUE }]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/class-wp.php:399
[23-Feb-2023 01:32:10 UTC] PHP   7. WP_Hook->do_action($args = [0 => class WP { public $public_query_vars = [...]; public $private_query_vars = [...]; public $extra_query_vars = [...]; public $query_vars = [...]; public $query_string = ''; public $request = 'graphql'; public $matched_rule = 'graphql/?$'; public $matched_query = 'graphql=true'; public $did_permalink = TRUE }]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/plugin.php:565
[23-Feb-2023 01:32:10 UTC] PHP   8. WP_Hook->apply_filters($value = '', $args = [0 => class WP { public $public_query_vars = [...]; public $private_query_vars = [...]; public $extra_query_vars = [...]; public $query_vars = [...]; public $query_string = ''; public $request = 'graphql'; public $matched_rule = 'graphql/?$'; public $matched_query = 'graphql=true'; public $did_permalink = TRUE }]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/class-wp-hook.php:332
[23-Feb-2023 01:32:10 UTC] PHP   9. WPGraphQL\Router::resolve_http_request(class WP { public $public_query_vars = [0 => 'm', 1 => 'p', 2 => 'posts', 3 => 'w', 4 => 'cat', 5 => 'withcomments', 6 => 'withoutcomments', 7 => 's', 8 => 'search', 9 => 'exact', 10 => 'sentence', 11 => 'calendar', 12 => 'page', 13 => 'paged', 14 => 'more', 15 => 'tb', 16 => 'pb', 17 => 'author', 18 => 'order', 19 => 'orderby', 20 => 'year', 21 => 'monthnum', 22 => 'day', 23 => 'hour', 24 => 'minute', 25 => 'second', 26 => 'name', 27 => 'category_name', 28 => 'tag', 29 => 'feed', 30 => 'author_name', 31 => 'pagename', 32 => 'page_id', 33 => 'error', 34 => 'attachment', 35 => 'attachment_id', 36 => 'subpost', 37 => 'subpost_id', 38 => 'preview', 39 => 'robots', 40 => 'favicon', 41 => 'taxonomy', 42 => 'term', 43 => 'cpage', 44 => 'post_type', 45 => 'embed', 46 => 'post_format', 47 => 'rest_route', 48 => 'sitemap', 49 => 'sitemap-subtype', 50 => 'sitemap-stylesheet', 51 => 'graphql']; public $private_query_vars = [0 => 'offset', 1 => 'posts_per_page', 2 => 'posts_per_archive_page', 3 => 'showposts', 4 => 'nopaging', 5 => 'post_type', 6 => 'post_status', 7 => 'category__in', 8 => 'category__not_in', 9 => 'category__and', 10 => 'tag__in', 11 => 'tag__not_in', 12 => 'tag__and', 13 => 'tag_slug__in', 14 => 'tag_slug__and', 15 => 'tag_id', 16 => 'post_mime_type', 17 => 'perm', 18 => 'comments_per_page', 19 => 'post__in', 20 => 'post__not_in', 21 => 'post_parent', 22 => 'post_parent__in', 23 => 'post_parent__not_in', 24 => 'title', 25 => 'fields']; public $extra_query_vars = []; public $query_vars = ['graphql' => 'true']; public $query_string = ''; public $request = 'graphql'; public $matched_rule = 'graphql/?$'; public $matched_query = 'graphql=true'; public $did_permalink = TRUE }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/class-wp-hook.php:308
[23-Feb-2023 01:32:10 UTC] PHP  10. WPGraphQL\Router::process_http_request() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/src/Router.php:275
[23-Feb-2023 01:32:10 UTC] PHP  11. WPGraphQL\Request->execute_http() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/src/Router.php:481
[23-Feb-2023 01:32:10 UTC] PHP  12. GraphQL\Server\StandardServer->executeRequest($parsedBody = class GraphQL\Server\OperationParams { public $queryId = NULL; public $query = 'fragment BlogInfoFragment on GeneralSettings {\n  title\n  description\n  __typename\n}\n\nfragment NavigationMenuItemFragment on MenuItem {\n  id\n  path\n  label\n  parentId\n  cssClasses\n  menu {\n    node {\n      name\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment FeaturedImageFragment on NodeWithFeaturedImage {\n  featuredImage {\n    node {\n      id\n      sourceUrl\n      altText\n      mediaDetails {\n        width\n        height\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }'...; public $operation = 'GetPost'; public $variables = ['asPreview' => TRUE, 'databaseId' => 5, 'headerLocation' => 'PRIMARY', 'footerLocation' => 'FOOTER']; public $extensions = NULL; private $originalInput = ['operationname' => 'GetPost', 'variables' => [...], 'query' => 'fragment BlogInfoFragment on GeneralSettings {\n  title\n  description\n  __typename\n}\n\nfragment NavigationMenuItemFragment on MenuItem {\n  id\n  path\n  label\n  parentId\n  cssClasses\n  menu {\n    node {\n      name\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment FeaturedImageFragment on NodeWithFeaturedImage {\n  featuredImage {\n    node {\n      id\n      sourceUrl\n      altText\n      mediaDetails {\n        width\n        height\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }'...]; private $readOnly = FALSE }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/src/Request.php:713
[23-Feb-2023 01:32:10 UTC] PHP  13. GraphQL\Server\Helper->executeOperation($config = class GraphQL\Server\ServerConfig { private $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; private $context = class WPGraphQL\AppContext { public $root_url = 'http://localhost:10028'; public $viewer = class WP_User { ... }; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... }; public $request = NULL; public $config = [...]; public $currentConnection = NULL; public $connectionArgs = [...]; public $loaders = [...]; public $node_resolver = class WPGraphQL\Data\NodeResolver { ... }; public $connection_query_class = NULL }; private $rootValue = NULL; private $errorFormatter = NULL; private $errorsHandler = NULL; private $debugFlag = 0; private $queryBatching = TRUE; private $validationRules = [0 => class GraphQL\Validator\Rules\ExecutableDefinitions { ... }, 1 => class GraphQL\Validator\Rules\UniqueOperationNames { ... }, 2 => class GraphQL\Validator\Rules\LoneAnonymousOperation { ... }, 3 => class GraphQL\Validator\Rules\SingleFieldSubscription { ... }, 4 => class GraphQL\Validator\Rules\KnownTypeNames { ... }, 5 => class GraphQL\Validator\Rules\FragmentsOnCompositeTypes { ... }, 6 => class GraphQL\Validator\Rules\VariablesAreInputTypes { ... }, 7 => class GraphQL\Validator\Rules\ScalarLeafs { ... }, 8 => class GraphQL\Validator\Rules\FieldsOnCorrectType { ... }, 9 => class GraphQL\Validator\Rules\UniqueFragmentNames { ... }, 10 => class GraphQL\Validator\Rules\KnownFragmentNames { ... }, 11 => class GraphQL\Validator\Rules\NoUnusedFragments { ... }, 12 => class GraphQL\Validator\Rules\PossibleFragmentSpreads { ... }, 13 => class GraphQL\Validator\Rules\NoFragmentCycles { ... }, 14 => class GraphQL\Validator\Rules\UniqueVariableNames { ... }, 15 => class GraphQL\Validator\Rules\NoUndefinedVariables { ... }, 16 => class GraphQL\Validator\Rules\NoUnusedVariables { ... }, 17 => class GraphQL\Validator\Rules\KnownDirectives { ... }, 18 => class GraphQL\Validator\Rules\UniqueDirectivesPerLocation { ... }, 19 => class GraphQL\Validator\Rules\KnownArgumentNames { ... }, 20 => class GraphQL\Validator\Rules\UniqueArgumentNames { ... }, 21 => class GraphQL\Validator\Rules\ValuesOfCorrectType { ... }, 22 => class GraphQL\Validator\Rules\ProvidedRequiredArguments { ... }, 23 => class GraphQL\Validator\Rules\VariablesInAllowedPosition { ... }, 24 => class GraphQL\Validator\Rules\OverlappingFieldsCanBeMerged { ... }, 25 => class GraphQL\Validator\Rules\UniqueInputFieldNames { ... }, 'require_authentication' => class WPGraphQL\Server\ValidationRules\RequireAuthentication { ... }, 'disable_introspection' => class WPGraphQL\Server\ValidationRules\DisableIntrospection { ... }, 'query_depth' => class WPGraphQL\Server\ValidationRules\QueryDepth { ... }]; private $fieldResolver = NULL; private $promiseAdapter = NULL; private $persistentQueryLoader = NULL }, $op = class GraphQL\Server\OperationParams { public $queryId = NULL; public $query = 'fragment BlogInfoFragment on GeneralSettings {\n  title\n  description\n  __typename\n}\n\nfragment NavigationMenuItemFragment on MenuItem {\n  id\n  path\n  label\n  parentId\n  cssClasses\n  menu {\n    node {\n      name\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment FeaturedImageFragment on NodeWithFeaturedImage {\n  featuredImage {\n    node {\n      id\n      sourceUrl\n      altText\n      mediaDetails {\n        width\n        height\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }'...; public $operation = 'GetPost'; public $variables = ['asPreview' => TRUE, 'databaseId' => 5, 'headerLocation' => 'PRIMARY', 'footerLocation' => 'FOOTER']; public $extensions = NULL; private $originalInput = ['operationname' => 'GetPost', 'variables' => [...], 'query' => 'fragment BlogInfoFragment on GeneralSettings {\n  title\n  description\n  __typename\n}\n\nfragment NavigationMenuItemFragment on MenuItem {\n  id\n  path\n  label\n  parentId\n  cssClasses\n  menu {\n    node {\n      name\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment FeaturedImageFragment on NodeWithFeaturedImage {\n  featuredImage {\n    node {\n      id\n      sourceUrl\n      altText\n      mediaDetails {\n        width\n        height\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }'...]; private $readOnly = FALSE }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Server/StandardServer.php:136
[23-Feb-2023 01:32:10 UTC] PHP  14. GraphQL\Executor\Promise\Adapter\SyncPromiseAdapter->wait($promise = class GraphQL\Executor\Promise\Promise { public $adoptedPromise = class GraphQL\Executor\Promise\Adapter\SyncPromise { public $state = 'pending'; public $result = NULL; private $waiting = [...] }; private $adapter = class GraphQL\Executor\Promise\Adapter\SyncPromiseAdapter {  } }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Server/Helper.php:214
[23-Feb-2023 01:32:10 UTC] PHP  15. GraphQL\Executor\Promise\Adapter\SyncPromise::runQueue() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/Promise/Adapter/SyncPromiseAdapter.php:149
[23-Feb-2023 01:32:10 UTC] PHP  16. GraphQL\Executor\Promise\Adapter\SyncPromise->GraphQL\Executor\Promise\Adapter\{closure:/Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/Promise/Adapter/SyncPromise.php:142-163}() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/Promise/Adapter/SyncPromise.php:53
[23-Feb-2023 01:32:10 UTC] PHP  17. GraphQL\Executor\ReferenceExecutor->GraphQL\Executor\{closure:/Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:650-652}($resolved = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/Promise/Adapter/SyncPromise.php:148
[23-Feb-2023 01:32:10 UTC] PHP  18. GraphQL\Executor\ReferenceExecutor->completeValue($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = ['description' => 'The post type', 'connections' => [...], 'interfaces' => [...], 'fields' => [...], 'model' => 'WPGraphQL\\Model\\Post', 'kind' => 'object', 'name' => 'Post']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['author' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'categories' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentCount' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'comments' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'conditionalTags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentType' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentTypeName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'databaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'date' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'dateGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'desiredSlug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'editingLockedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enclosure' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedScripts' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedStylesheets' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'excerpt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImage' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'guid' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'id' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isContentNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isPreview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRestricted' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRevision' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isSticky' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isTermNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lastEditedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'link' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modified' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modifiedGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pingStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pinged' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postFormats' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'preview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisionOf' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisions' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'slug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'status' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'tags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'template' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'templates' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'terms' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'title' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'toPing' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'uri' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['Node' => class WPGraphQL\Type\WPInterfaceType { ... }, 'ContentNode' => class WPGraphQL\Type\WPInterfaceType { ... }, 'UniformResourceIdentifiable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'DatabaseIdentifier' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTemplate' => class WPGraphQL\Type\WPInterfaceType { ... }, 'Previewable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTitle' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentEditor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithAuthor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithFeaturedImage' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithExcerpt' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithComments' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTrackbacks' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithRevisions' => class WPGraphQL\Type\WPInterfaceType { ... }, 'MenuItemLinkable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentBlocks' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'post'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'An object of the post Type. '; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class WPGraphQL\Type\WPObjectType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'post'; public $returnType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'RootQuery'; public $description = 'The root entry point into the Graph'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post'], $result = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:651
[23-Feb-2023 01:32:10 UTC] PHP  19. GraphQL\Executor\ReferenceExecutor->completeObjectValue($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = ['description' => 'The post type', 'connections' => [...], 'interfaces' => [...], 'fields' => [...], 'model' => 'WPGraphQL\\Model\\Post', 'kind' => 'object', 'name' => 'Post']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['author' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'categories' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentCount' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'comments' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'conditionalTags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentType' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentTypeName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'databaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'date' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'dateGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'desiredSlug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'editingLockedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enclosure' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedScripts' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedStylesheets' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'excerpt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImage' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'guid' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'id' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isContentNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isPreview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRestricted' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRevision' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isSticky' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isTermNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lastEditedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'link' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modified' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modifiedGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pingStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pinged' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postFormats' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'preview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisionOf' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisions' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'slug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'status' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'tags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'template' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'templates' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'terms' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'title' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'toPing' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'uri' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['Node' => class WPGraphQL\Type\WPInterfaceType { ... }, 'ContentNode' => class WPGraphQL\Type\WPInterfaceType { ... }, 'UniformResourceIdentifiable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'DatabaseIdentifier' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTemplate' => class WPGraphQL\Type\WPInterfaceType { ... }, 'Previewable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTitle' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentEditor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithAuthor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithFeaturedImage' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithExcerpt' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithComments' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTrackbacks' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithRevisions' => class WPGraphQL\Type\WPInterfaceType { ... }, 'MenuItemLinkable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentBlocks' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'post'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'An object of the post Type. '; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class WPGraphQL\Type\WPObjectType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'post'; public $returnType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'RootQuery'; public $description = 'The root entry point into the Graph'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post'], $result = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:793
[23-Feb-2023 01:32:10 UTC] PHP  20. GraphQL\Executor\ReferenceExecutor->collectAndExecuteSubfields($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = ['description' => 'The post type', 'connections' => [...], 'interfaces' => [...], 'fields' => [...], 'model' => 'WPGraphQL\\Model\\Post', 'kind' => 'object', 'name' => 'Post']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['author' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'categories' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentCount' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'comments' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'conditionalTags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentType' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentTypeName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'databaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'date' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'dateGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'desiredSlug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'editingLockedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enclosure' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedScripts' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedStylesheets' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'excerpt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImage' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'guid' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'id' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isContentNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isPreview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRestricted' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRevision' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isSticky' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isTermNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lastEditedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'link' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modified' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modifiedGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pingStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pinged' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postFormats' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'preview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisionOf' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisions' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'slug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'status' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'tags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'template' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'templates' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'terms' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'title' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'toPing' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'uri' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['Node' => class WPGraphQL\Type\WPInterfaceType { ... }, 'ContentNode' => class WPGraphQL\Type\WPInterfaceType { ... }, 'UniformResourceIdentifiable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'DatabaseIdentifier' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTemplate' => class WPGraphQL\Type\WPInterfaceType { ... }, 'Previewable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTitle' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentEditor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithAuthor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithFeaturedImage' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithExcerpt' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithComments' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTrackbacks' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithRevisions' => class WPGraphQL\Type\WPInterfaceType { ... }, 'MenuItemLinkable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentBlocks' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post'], $result = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1106
[23-Feb-2023 01:32:10 UTC] PHP  21. GraphQL\Executor\ReferenceExecutor->executeFields($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = ['description' => 'The post type', 'connections' => [...], 'interfaces' => [...], 'fields' => [...], 'model' => 'WPGraphQL\\Model\\Post', 'kind' => 'object', 'name' => 'Post']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['author' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'categories' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentCount' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'comments' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'conditionalTags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentType' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentTypeName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'databaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'date' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'dateGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'desiredSlug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'editingLockedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enclosure' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedScripts' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedStylesheets' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'excerpt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImage' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'guid' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'id' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isContentNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isPreview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRestricted' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRevision' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isSticky' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isTermNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lastEditedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'link' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modified' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modifiedGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pingStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pinged' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postFormats' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'preview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisionOf' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisions' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'slug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'status' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'tags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'template' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'templates' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'terms' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'title' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'toPing' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'uri' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['Node' => class WPGraphQL\Type\WPInterfaceType { ... }, 'ContentNode' => class WPGraphQL\Type\WPInterfaceType { ... }, 'UniformResourceIdentifiable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'DatabaseIdentifier' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTemplate' => class WPGraphQL\Type\WPInterfaceType { ... }, 'Previewable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTitle' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentEditor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithAuthor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithFeaturedImage' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithExcerpt' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithComments' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTrackbacks' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithRevisions' => class WPGraphQL\Type\WPInterfaceType { ... }, 'MenuItemLinkable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentBlocks' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }, $path = [0 => 'post'], $fields = class ArrayObject { private $storage = ['title' => class ArrayObject { ... }, 'content' => class ArrayObject { ... }, 'date' => class ArrayObject { ... }, 'author' => class ArrayObject { ... }, 'featuredImage' => class ArrayObject { ... }, '__typename' => class ArrayObject { ... }, 'contentBlocks' => class ArrayObject { ... }] }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1145
[23-Feb-2023 01:32:10 UTC] PHP  22. GraphQL\Executor\ReferenceExecutor->resolveField($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = ['description' => 'The post type', 'connections' => [...], 'interfaces' => [...], 'fields' => [...], 'model' => 'WPGraphQL\\Model\\Post', 'kind' => 'object', 'name' => 'Post']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['author' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'categories' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentCount' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'comments' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'conditionalTags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentType' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentTypeName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'databaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'date' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'dateGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'desiredSlug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'editingLockedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enclosure' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedScripts' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedStylesheets' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'excerpt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImage' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'guid' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'id' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isContentNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isPreview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRestricted' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRevision' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isSticky' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isTermNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lastEditedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'link' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modified' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modifiedGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pingStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pinged' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postFormats' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'preview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisionOf' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisions' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'slug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'status' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'tags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'template' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'templates' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'terms' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'title' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'toPing' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'uri' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['Node' => class WPGraphQL\Type\WPInterfaceType { ... }, 'ContentNode' => class WPGraphQL\Type\WPInterfaceType { ... }, 'UniformResourceIdentifiable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'DatabaseIdentifier' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTemplate' => class WPGraphQL\Type\WPInterfaceType { ... }, 'Previewable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTitle' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentEditor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithAuthor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithFeaturedImage' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithExcerpt' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithComments' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTrackbacks' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithRevisions' => class WPGraphQL\Type\WPInterfaceType { ... }, 'MenuItemLinkable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentBlocks' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post', 1 => 'contentBlocks']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1195
[23-Feb-2023 01:32:10 UTC] PHP  23. GraphQL\Executor\ReferenceExecutor->completeValueCatchingError($returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks'], $result = [0 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f6c21ab16a7'], 2 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f6c21ab16a9']]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:557
[23-Feb-2023 01:32:10 UTC] PHP  24. GraphQL\Executor\ReferenceExecutor->completeValue($returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks'], $result = [0 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f6c21ab16a7'], 2 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f6c21ab16a9']]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:654
[23-Feb-2023 01:32:10 UTC] PHP  25. GraphQL\Executor\ReferenceExecutor->completeListValue($returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks'], $results = [0 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f6c21ab16a7'], 2 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f6c21ab16a9']]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:761
[23-Feb-2023 01:32:10 UTC] PHP  26. GraphQL\Executor\ReferenceExecutor->completeValueCatchingError($returnType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = ['eagerlyLoadType' => TRUE, 'description' => 'Blocks that can be edited to create content and layouts', 'fields' => [...], 'resolveType' => class Closure { virtual $closure = "$this->WPGraphQL\Type\{closure}", ... }, 'kind' => 'interface', 'name' => 'ContentBlock']; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = []; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6c21ab16a9']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:887
[23-Feb-2023 01:32:10 UTC] PHP  27. GraphQL\Executor\ReferenceExecutor->completeValue($returnType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = ['eagerlyLoadType' => TRUE, 'description' => 'Blocks that can be edited to create content and layouts', 'fields' => [...], 'resolveType' => class Closure { virtual $closure = "$this->WPGraphQL\Type\{closure}", ... }, 'kind' => 'interface', 'name' => 'ContentBlock']; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = []; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6c21ab16a9']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:654
[23-Feb-2023 01:32:10 UTC] PHP  28. GraphQL\Executor\ReferenceExecutor->completeAbstractValue($returnType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = ['eagerlyLoadType' => TRUE, 'description' => 'Blocks that can be edited to create content and layouts', 'fields' => [...], 'resolveType' => class Closure { virtual $closure = "$this->WPGraphQL\Type\{closure}", ... }, 'kind' => 'interface', 'name' => 'ContentBlock']; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = []; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6c21ab16a9']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:789
[23-Feb-2023 01:32:10 UTC] PHP  29. GraphQL\Executor\ReferenceExecutor->completeObjectValue($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = ['description' => 'A block used for editing the site', 'interfaces' => [...], 'eagerlyLoadType' => TRUE, 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCode']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'attributes' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['ContentBlock' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6c21ab16a9']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:974
[23-Feb-2023 01:32:10 UTC] PHP  30. GraphQL\Executor\ReferenceExecutor->collectAndExecuteSubfields($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = ['description' => 'A block used for editing the site', 'interfaces' => [...], 'eagerlyLoadType' => TRUE, 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCode']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'attributes' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['ContentBlock' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6c21ab16a9']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1106
[23-Feb-2023 01:32:10 UTC] PHP  31. GraphQL\Executor\ReferenceExecutor->executeFields($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = ['description' => 'A block used for editing the site', 'interfaces' => [...], 'eagerlyLoadType' => TRUE, 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCode']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'attributes' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['ContentBlock' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6c21ab16a9'], $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1], $fields = class ArrayObject { private $storage = ['__typename' => class ArrayObject { ... }, 'renderedHtml' => class ArrayObject { ... }, 'id' => class ArrayObject { ... }, 'parentId' => class ArrayObject { ... }, 'attributes' => class ArrayObject { ... }] }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1145
[23-Feb-2023 01:32:10 UTC] PHP  32. GraphQL\Executor\ReferenceExecutor->resolveField($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = ['description' => 'A block used for editing the site', 'interfaces' => [...], 'eagerlyLoadType' => TRUE, 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCode']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'attributes' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['ContentBlock' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6c21ab16a9'], $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1195
[23-Feb-2023 01:32:10 UTC] PHP  33. GraphQL\Executor\ReferenceExecutor->completeValueCatchingError($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'attributes'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'Attributes of the %s Block Type'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class WPGraphQL\Type\WPObjectType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'attributes'; public $returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes'], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6c21ab16a9']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:557
[23-Feb-2023 01:32:10 UTC] PHP  34. GraphQL\Executor\ReferenceExecutor->completeValue($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'attributes'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'Attributes of the %s Block Type'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class WPGraphQL\Type\WPObjectType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'attributes'; public $returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes'], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6c21ab16a9']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:654
[23-Feb-2023 01:32:10 UTC] PHP  35. GraphQL\Executor\ReferenceExecutor->completeObjectValue($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'attributes'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'Attributes of the %s Block Type'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class WPGraphQL\Type\WPObjectType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'attributes'; public $returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes'], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6c21ab16a9']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:793
[23-Feb-2023 01:32:10 UTC] PHP  36. GraphQL\Executor\ReferenceExecutor->collectAndExecuteSubfields($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes'], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6c21ab16a9']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1106
[23-Feb-2023 01:32:10 UTC] PHP  37. GraphQL\Executor\ReferenceExecutor->executeFields($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6c21ab16a9'], $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes'], $fields = class ArrayObject { private $storage = ['borderColor' => class ArrayObject { ... }, 'backgroundColor' => class ArrayObject { ... }, 'content' => class ArrayObject { ... }, 'style' => class ArrayObject { ... }, 'textColor' => class ArrayObject { ... }, 'fontSize' => class ArrayObject { ... }, 'fontFamily' => class ArrayObject { ... }, '__typename' => class ArrayObject { ... }] }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1145
[23-Feb-2023 01:32:10 UTC] PHP  38. GraphQL\Executor\ReferenceExecutor->resolveField($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6c21ab16a9'], $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes', 4 => 'content']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1195
[23-Feb-2023 01:32:10 UTC] PHP  39. GraphQL\Executor\ReferenceExecutor->resolveFieldValueOrError($fieldDef = class GraphQL\Type\Definition\FieldDefinition { public $name = 'content'; public $args = []; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", public $static = [...]; public $parameter = [...] }; public $mapFn = NULL; public $description = 'The &quot;content&quot; field on the &quot;CoreCode&quot; block'; public $deprecationReason = NULL; public $astNode = NULL; public $config = ['type' => class Closure { virtual $closure = "$this->WPGraphQL\Registry\{closure}", ... }, 'description' => 'The "content" field on the "CoreCode" block', 'resolve' => class Closure { virtual $closure = "$this->WPGraphQL\ContentBlocks\Blocks\{closure}", ... }, 'name' => 'content']; private $type = class GraphQL\Type\Definition\StringType { public $name = 'String'; public $description = 'The `String` scalar type represents textual data, represented as UTF-8\ncharacter sequences. The String type is most often used by GraphQL to\nrepresent free-form human-readable text.'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }, $fieldNode = class GraphQL\Language\AST\FieldNode { public $loc = class GraphQL\Language\AST\Location { public $start = 629; public $end = 636; public $startToken = class GraphQL\Language\Token { ... }; public $endToken = class GraphQL\Language\Token { ... }; public $source = class GraphQL\Language\Source { ... } }; public $kind = 'Field'; public $name = class GraphQL\Language\AST\NameNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'Name'; public $value = 'content' }; public $alias = NULL; public $arguments = class GraphQL\Language\AST\NodeList { private $nodes = [...] }; public $directives = class GraphQL\Language\AST\NodeList { private $nodes = [...] }; public $selectionSet = NULL }, $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", public $static = ['field_resolver' => class Closure { virtual $closure = "$this->WPGraphQL\ContentBlocks\Blocks\{closure}", ... }, 'type_name' => 'CoreCodeAttributes', 'field_key' => 'content', 'field' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $parameter = ['$source' => '<required>', '$args' => '<required>', '$context' => '<required>', '$info' => '<required>'] }, $rootValue = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6c21ab16a9'], $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'content'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'The &quot;content&quot; field on the &quot;CoreCode&quot; block'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\StringType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'content'; public $returnType = class GraphQL\Type\Definition\StringType { public $name = 'String'; public $description = 'The `String` scalar type represents textual data, represented as UTF-8\ncharacter sequences. The String type is most often used by GraphQL to\nrepresent free-form human-readable text.'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes', 4 => 'content']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:550
[23-Feb-2023 01:32:10 UTC] PHP  40. WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure:/Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/src/Utils/InstrumentSchema.php:100-188}($source = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6c21ab16a9'], $args = [], $context = class WPGraphQL\AppContext { public $root_url = 'http://localhost:10028'; public $viewer = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] }; public $request = NULL; public $config = ['registered_editor_blocks' => [...]]; public $currentConnection = NULL; public $connectionArgs = []; public $loaders = ['comment_author' => class WPGraphQL\Data\Loader\CommentAuthorLoader { ... }, 'comment' => class WPGraphQL\Data\Loader\CommentLoader { ... }, 'enqueued_script' => class WPGraphQL\Data\Loader\EnqueuedScriptLoader { ... }, 'enqueued_stylesheet' => class WPGraphQL\Data\Loader\EnqueuedStylesheetLoader { ... }, 'plugin' => class WPGraphQL\Data\Loader\PluginLoader { ... }, 'nav_menu_item' => class WPGraphQL\Data\Loader\PostObjectLoader { ... }, 'post' => class WPGraphQL\Data\Loader\PostObjectLoader { ... }, 'post_type' => class WPGraphQL\Data\Loader\PostTypeLoader { ... }, 'taxonomy' => class WPGraphQL\Data\Loader\TaxonomyLoader { ... }, 'term' => class WPGraphQL\Data\Loader\TermObjectLoader { ... }, 'theme' => class WPGraphQL\Data\Loader\ThemeLoader { ... }, 'user' => class WPGraphQL\Data\Loader\UserLoader { ... }, 'user_role' => class WPGraphQL\Data\Loader\UserRoleLoader { ... }]; public $node_resolver = class WPGraphQL\Data\NodeResolver { protected $wp = class WP { ... }; protected $context = ... }; public $connection_query_class = NULL }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'content'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'The &quot;content&quot; field on the &quot;CoreCode&quot; block'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\StringType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'content'; public $returnType = class GraphQL\Type\Definition\StringType { public $name = 'String'; public $description = 'The `String` scalar type represents textual data, represented as UTF-8\ncharacter sequences. The String type is most often used by GraphQL to\nrepresent free-form human-readable text.'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes', 4 => 'content']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:623
[23-Feb-2023 01:32:10 UTC] PHP  41. WPGraphQL\ContentBlocks\Blocks\Block->WPGraphQL\ContentBlocks\Blocks\{closure:/Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql-content-blocks-main/includes/Blocks/Block.php:161-163}($block = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6c21ab16a9'], $args = [], $context = class WPGraphQL\AppContext { public $root_url = 'http://localhost:10028'; public $viewer = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] }; public $request = NULL; public $config = ['registered_editor_blocks' => [...]]; public $currentConnection = NULL; public $connectionArgs = []; public $loaders = ['comment_author' => class WPGraphQL\Data\Loader\CommentAuthorLoader { ... }, 'comment' => class WPGraphQL\Data\Loader\CommentLoader { ... }, 'enqueued_script' => class WPGraphQL\Data\Loader\EnqueuedScriptLoader { ... }, 'enqueued_stylesheet' => class WPGraphQL\Data\Loader\EnqueuedStylesheetLoader { ... }, 'plugin' => class WPGraphQL\Data\Loader\PluginLoader { ... }, 'nav_menu_item' => class WPGraphQL\Data\Loader\PostObjectLoader { ... }, 'post' => class WPGraphQL\Data\Loader\PostObjectLoader { ... }, 'post_type' => class WPGraphQL\Data\Loader\PostTypeLoader { ... }, 'taxonomy' => class WPGraphQL\Data\Loader\TaxonomyLoader { ... }, 'term' => class WPGraphQL\Data\Loader\TermObjectLoader { ... }, 'theme' => class WPGraphQL\Data\Loader\ThemeLoader { ... }, 'user' => class WPGraphQL\Data\Loader\UserLoader { ... }, 'user_role' => class WPGraphQL\Data\Loader\UserRoleLoader { ... }]; public $node_resolver = class WPGraphQL\Data\NodeResolver { protected $wp = class WP { ... }; protected $context = ... }; public $connection_query_class = NULL }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'content'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'The &quot;content&quot; field on the &quot;CoreCode&quot; block'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\StringType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'content'; public $returnType = class GraphQL\Type\Definition\StringType { public $name = 'String'; public $description = 'The `String` scalar type represents textual data, represented as UTF-8\ncharacter sequences. The String type is most often used by GraphQL to\nrepresent free-form human-readable text.'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes', 4 => 'content']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/src/Utils/InstrumentSchema.php:151
[23-Feb-2023 01:32:10 UTC] PHP  42. WPGraphQL\ContentBlocks\Blocks\Block->resolve_block_attributes($block = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6c21ab16a9'], $attribute_name = 'content', $attribute_config = ['type' => 'string', 'source' => 'html', 'selector' => 'code']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql-content-blocks-main/includes/Blocks/Block.php:162
[23-Feb-2023 01:35:46 UTC] PHP Warning:  Undefined array key "default" in /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql-content-blocks-main/includes/Blocks/Block.php on line 214
[23-Feb-2023 01:35:46 UTC] PHP Stack trace:
[23-Feb-2023 01:35:46 UTC] PHP   1. {main}() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/index.php:0
[23-Feb-2023 01:35:46 UTC] PHP   2. require() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/index.php:17
[23-Feb-2023 01:35:46 UTC] PHP   3. wp($query_vars = *uninitialized*) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-blog-header.php:16
[23-Feb-2023 01:35:46 UTC] PHP   4. WP->main($query_args = '') /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/functions.php:1332
[23-Feb-2023 01:35:46 UTC] PHP   5. WP->parse_request($extra_query_vars = '') /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/class-wp.php:780
[23-Feb-2023 01:35:46 UTC] PHP   6. do_action_ref_array($hook_name = 'parse_request', $args = [0 => class WP { public $public_query_vars = [...]; public $private_query_vars = [...]; public $extra_query_vars = [...]; public $query_vars = [...]; public $query_string = ''; public $request = 'graphql'; public $matched_rule = 'graphql/?$'; public $matched_query = 'graphql=true'; public $did_permalink = TRUE }]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/class-wp.php:399
[23-Feb-2023 01:35:46 UTC] PHP   7. WP_Hook->do_action($args = [0 => class WP { public $public_query_vars = [...]; public $private_query_vars = [...]; public $extra_query_vars = [...]; public $query_vars = [...]; public $query_string = ''; public $request = 'graphql'; public $matched_rule = 'graphql/?$'; public $matched_query = 'graphql=true'; public $did_permalink = TRUE }]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/plugin.php:565
[23-Feb-2023 01:35:46 UTC] PHP   8. WP_Hook->apply_filters($value = '', $args = [0 => class WP { public $public_query_vars = [...]; public $private_query_vars = [...]; public $extra_query_vars = [...]; public $query_vars = [...]; public $query_string = ''; public $request = 'graphql'; public $matched_rule = 'graphql/?$'; public $matched_query = 'graphql=true'; public $did_permalink = TRUE }]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/class-wp-hook.php:332
[23-Feb-2023 01:35:46 UTC] PHP   9. WPGraphQL\Router::resolve_http_request(class WP { public $public_query_vars = [0 => 'm', 1 => 'p', 2 => 'posts', 3 => 'w', 4 => 'cat', 5 => 'withcomments', 6 => 'withoutcomments', 7 => 's', 8 => 'search', 9 => 'exact', 10 => 'sentence', 11 => 'calendar', 12 => 'page', 13 => 'paged', 14 => 'more', 15 => 'tb', 16 => 'pb', 17 => 'author', 18 => 'order', 19 => 'orderby', 20 => 'year', 21 => 'monthnum', 22 => 'day', 23 => 'hour', 24 => 'minute', 25 => 'second', 26 => 'name', 27 => 'category_name', 28 => 'tag', 29 => 'feed', 30 => 'author_name', 31 => 'pagename', 32 => 'page_id', 33 => 'error', 34 => 'attachment', 35 => 'attachment_id', 36 => 'subpost', 37 => 'subpost_id', 38 => 'preview', 39 => 'robots', 40 => 'favicon', 41 => 'taxonomy', 42 => 'term', 43 => 'cpage', 44 => 'post_type', 45 => 'embed', 46 => 'post_format', 47 => 'rest_route', 48 => 'sitemap', 49 => 'sitemap-subtype', 50 => 'sitemap-stylesheet', 51 => 'graphql']; public $private_query_vars = [0 => 'offset', 1 => 'posts_per_page', 2 => 'posts_per_archive_page', 3 => 'showposts', 4 => 'nopaging', 5 => 'post_type', 6 => 'post_status', 7 => 'category__in', 8 => 'category__not_in', 9 => 'category__and', 10 => 'tag__in', 11 => 'tag__not_in', 12 => 'tag__and', 13 => 'tag_slug__in', 14 => 'tag_slug__and', 15 => 'tag_id', 16 => 'post_mime_type', 17 => 'perm', 18 => 'comments_per_page', 19 => 'post__in', 20 => 'post__not_in', 21 => 'post_parent', 22 => 'post_parent__in', 23 => 'post_parent__not_in', 24 => 'title', 25 => 'fields']; public $extra_query_vars = []; public $query_vars = ['graphql' => 'true']; public $query_string = ''; public $request = 'graphql'; public $matched_rule = 'graphql/?$'; public $matched_query = 'graphql=true'; public $did_permalink = TRUE }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/class-wp-hook.php:308
[23-Feb-2023 01:35:46 UTC] PHP  10. WPGraphQL\Router::process_http_request() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/src/Router.php:275
[23-Feb-2023 01:35:46 UTC] PHP  11. WPGraphQL\Request->execute_http() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/src/Router.php:481
[23-Feb-2023 01:35:46 UTC] PHP  12. GraphQL\Server\StandardServer->executeRequest($parsedBody = class GraphQL\Server\OperationParams { public $queryId = NULL; public $query = 'fragment BlogInfoFragment on GeneralSettings {\n  title\n  description\n  __typename\n}\n\nfragment NavigationMenuItemFragment on MenuItem {\n  id\n  path\n  label\n  parentId\n  cssClasses\n  menu {\n    node {\n      name\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment FeaturedImageFragment on NodeWithFeaturedImage {\n  featuredImage {\n    node {\n      id\n      sourceUrl\n      altText\n      mediaDetails {\n        width\n        height\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }'...; public $operation = 'GetPost'; public $variables = ['asPreview' => TRUE, 'databaseId' => 5, 'headerLocation' => 'PRIMARY', 'footerLocation' => 'FOOTER']; public $extensions = NULL; private $originalInput = ['operationname' => 'GetPost', 'variables' => [...], 'query' => 'fragment BlogInfoFragment on GeneralSettings {\n  title\n  description\n  __typename\n}\n\nfragment NavigationMenuItemFragment on MenuItem {\n  id\n  path\n  label\n  parentId\n  cssClasses\n  menu {\n    node {\n      name\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment FeaturedImageFragment on NodeWithFeaturedImage {\n  featuredImage {\n    node {\n      id\n      sourceUrl\n      altText\n      mediaDetails {\n        width\n        height\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }'...]; private $readOnly = FALSE }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/src/Request.php:713
[23-Feb-2023 01:35:46 UTC] PHP  13. GraphQL\Server\Helper->executeOperation($config = class GraphQL\Server\ServerConfig { private $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; private $context = class WPGraphQL\AppContext { public $root_url = 'http://localhost:10028'; public $viewer = class WP_User { ... }; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... }; public $request = NULL; public $config = [...]; public $currentConnection = NULL; public $connectionArgs = [...]; public $loaders = [...]; public $node_resolver = class WPGraphQL\Data\NodeResolver { ... }; public $connection_query_class = NULL }; private $rootValue = NULL; private $errorFormatter = NULL; private $errorsHandler = NULL; private $debugFlag = 0; private $queryBatching = TRUE; private $validationRules = [0 => class GraphQL\Validator\Rules\ExecutableDefinitions { ... }, 1 => class GraphQL\Validator\Rules\UniqueOperationNames { ... }, 2 => class GraphQL\Validator\Rules\LoneAnonymousOperation { ... }, 3 => class GraphQL\Validator\Rules\SingleFieldSubscription { ... }, 4 => class GraphQL\Validator\Rules\KnownTypeNames { ... }, 5 => class GraphQL\Validator\Rules\FragmentsOnCompositeTypes { ... }, 6 => class GraphQL\Validator\Rules\VariablesAreInputTypes { ... }, 7 => class GraphQL\Validator\Rules\ScalarLeafs { ... }, 8 => class GraphQL\Validator\Rules\FieldsOnCorrectType { ... }, 9 => class GraphQL\Validator\Rules\UniqueFragmentNames { ... }, 10 => class GraphQL\Validator\Rules\KnownFragmentNames { ... }, 11 => class GraphQL\Validator\Rules\NoUnusedFragments { ... }, 12 => class GraphQL\Validator\Rules\PossibleFragmentSpreads { ... }, 13 => class GraphQL\Validator\Rules\NoFragmentCycles { ... }, 14 => class GraphQL\Validator\Rules\UniqueVariableNames { ... }, 15 => class GraphQL\Validator\Rules\NoUndefinedVariables { ... }, 16 => class GraphQL\Validator\Rules\NoUnusedVariables { ... }, 17 => class GraphQL\Validator\Rules\KnownDirectives { ... }, 18 => class GraphQL\Validator\Rules\UniqueDirectivesPerLocation { ... }, 19 => class GraphQL\Validator\Rules\KnownArgumentNames { ... }, 20 => class GraphQL\Validator\Rules\UniqueArgumentNames { ... }, 21 => class GraphQL\Validator\Rules\ValuesOfCorrectType { ... }, 22 => class GraphQL\Validator\Rules\ProvidedRequiredArguments { ... }, 23 => class GraphQL\Validator\Rules\VariablesInAllowedPosition { ... }, 24 => class GraphQL\Validator\Rules\OverlappingFieldsCanBeMerged { ... }, 25 => class GraphQL\Validator\Rules\UniqueInputFieldNames { ... }, 'require_authentication' => class WPGraphQL\Server\ValidationRules\RequireAuthentication { ... }, 'disable_introspection' => class WPGraphQL\Server\ValidationRules\DisableIntrospection { ... }, 'query_depth' => class WPGraphQL\Server\ValidationRules\QueryDepth { ... }]; private $fieldResolver = NULL; private $promiseAdapter = NULL; private $persistentQueryLoader = NULL }, $op = class GraphQL\Server\OperationParams { public $queryId = NULL; public $query = 'fragment BlogInfoFragment on GeneralSettings {\n  title\n  description\n  __typename\n}\n\nfragment NavigationMenuItemFragment on MenuItem {\n  id\n  path\n  label\n  parentId\n  cssClasses\n  menu {\n    node {\n      name\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment FeaturedImageFragment on NodeWithFeaturedImage {\n  featuredImage {\n    node {\n      id\n      sourceUrl\n      altText\n      mediaDetails {\n        width\n        height\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }'...; public $operation = 'GetPost'; public $variables = ['asPreview' => TRUE, 'databaseId' => 5, 'headerLocation' => 'PRIMARY', 'footerLocation' => 'FOOTER']; public $extensions = NULL; private $originalInput = ['operationname' => 'GetPost', 'variables' => [...], 'query' => 'fragment BlogInfoFragment on GeneralSettings {\n  title\n  description\n  __typename\n}\n\nfragment NavigationMenuItemFragment on MenuItem {\n  id\n  path\n  label\n  parentId\n  cssClasses\n  menu {\n    node {\n      name\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment FeaturedImageFragment on NodeWithFeaturedImage {\n  featuredImage {\n    node {\n      id\n      sourceUrl\n      altText\n      mediaDetails {\n        width\n        height\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }'...]; private $readOnly = FALSE }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Server/StandardServer.php:136
[23-Feb-2023 01:35:46 UTC] PHP  14. GraphQL\Executor\Promise\Adapter\SyncPromiseAdapter->wait($promise = class GraphQL\Executor\Promise\Promise { public $adoptedPromise = class GraphQL\Executor\Promise\Adapter\SyncPromise { public $state = 'pending'; public $result = NULL; private $waiting = [...] }; private $adapter = class GraphQL\Executor\Promise\Adapter\SyncPromiseAdapter {  } }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Server/Helper.php:214
[23-Feb-2023 01:35:46 UTC] PHP  15. GraphQL\Executor\Promise\Adapter\SyncPromise::runQueue() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/Promise/Adapter/SyncPromiseAdapter.php:149
[23-Feb-2023 01:35:46 UTC] PHP  16. GraphQL\Executor\Promise\Adapter\SyncPromise->GraphQL\Executor\Promise\Adapter\{closure:/Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/Promise/Adapter/SyncPromise.php:142-163}() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/Promise/Adapter/SyncPromise.php:53
[23-Feb-2023 01:35:46 UTC] PHP  17. GraphQL\Executor\ReferenceExecutor->GraphQL\Executor\{closure:/Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:650-652}($resolved = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/Promise/Adapter/SyncPromise.php:148
[23-Feb-2023 01:35:46 UTC] PHP  18. GraphQL\Executor\ReferenceExecutor->completeValue($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = ['description' => 'The post type', 'connections' => [...], 'interfaces' => [...], 'fields' => [...], 'model' => 'WPGraphQL\\Model\\Post', 'kind' => 'object', 'name' => 'Post']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['author' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'categories' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentCount' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'comments' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'conditionalTags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentType' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentTypeName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'databaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'date' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'dateGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'desiredSlug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'editingLockedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enclosure' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedScripts' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedStylesheets' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'excerpt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImage' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'guid' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'id' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isContentNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isPreview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRestricted' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRevision' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isSticky' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isTermNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lastEditedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'link' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modified' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modifiedGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pingStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pinged' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postFormats' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'preview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisionOf' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisions' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'slug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'status' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'tags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'template' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'templates' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'terms' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'title' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'toPing' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'uri' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['Node' => class WPGraphQL\Type\WPInterfaceType { ... }, 'ContentNode' => class WPGraphQL\Type\WPInterfaceType { ... }, 'UniformResourceIdentifiable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'DatabaseIdentifier' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTemplate' => class WPGraphQL\Type\WPInterfaceType { ... }, 'Previewable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTitle' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentEditor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithAuthor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithFeaturedImage' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithExcerpt' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithComments' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTrackbacks' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithRevisions' => class WPGraphQL\Type\WPInterfaceType { ... }, 'MenuItemLinkable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentBlocks' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'post'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'An object of the post Type. '; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class WPGraphQL\Type\WPObjectType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'post'; public $returnType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'RootQuery'; public $description = 'The root entry point into the Graph'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post'], $result = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:651
[23-Feb-2023 01:35:46 UTC] PHP  19. GraphQL\Executor\ReferenceExecutor->completeObjectValue($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = ['description' => 'The post type', 'connections' => [...], 'interfaces' => [...], 'fields' => [...], 'model' => 'WPGraphQL\\Model\\Post', 'kind' => 'object', 'name' => 'Post']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['author' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'categories' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentCount' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'comments' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'conditionalTags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentType' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentTypeName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'databaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'date' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'dateGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'desiredSlug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'editingLockedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enclosure' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedScripts' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedStylesheets' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'excerpt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImage' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'guid' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'id' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isContentNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isPreview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRestricted' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRevision' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isSticky' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isTermNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lastEditedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'link' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modified' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modifiedGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pingStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pinged' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postFormats' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'preview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisionOf' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisions' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'slug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'status' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'tags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'template' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'templates' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'terms' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'title' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'toPing' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'uri' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['Node' => class WPGraphQL\Type\WPInterfaceType { ... }, 'ContentNode' => class WPGraphQL\Type\WPInterfaceType { ... }, 'UniformResourceIdentifiable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'DatabaseIdentifier' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTemplate' => class WPGraphQL\Type\WPInterfaceType { ... }, 'Previewable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTitle' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentEditor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithAuthor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithFeaturedImage' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithExcerpt' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithComments' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTrackbacks' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithRevisions' => class WPGraphQL\Type\WPInterfaceType { ... }, 'MenuItemLinkable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentBlocks' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'post'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'An object of the post Type. '; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class WPGraphQL\Type\WPObjectType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'post'; public $returnType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'RootQuery'; public $description = 'The root entry point into the Graph'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post'], $result = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:793
[23-Feb-2023 01:35:46 UTC] PHP  20. GraphQL\Executor\ReferenceExecutor->collectAndExecuteSubfields($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = ['description' => 'The post type', 'connections' => [...], 'interfaces' => [...], 'fields' => [...], 'model' => 'WPGraphQL\\Model\\Post', 'kind' => 'object', 'name' => 'Post']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['author' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'categories' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentCount' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'comments' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'conditionalTags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentType' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentTypeName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'databaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'date' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'dateGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'desiredSlug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'editingLockedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enclosure' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedScripts' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedStylesheets' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'excerpt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImage' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'guid' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'id' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isContentNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isPreview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRestricted' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRevision' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isSticky' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isTermNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lastEditedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'link' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modified' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modifiedGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pingStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pinged' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postFormats' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'preview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisionOf' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisions' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'slug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'status' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'tags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'template' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'templates' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'terms' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'title' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'toPing' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'uri' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['Node' => class WPGraphQL\Type\WPInterfaceType { ... }, 'ContentNode' => class WPGraphQL\Type\WPInterfaceType { ... }, 'UniformResourceIdentifiable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'DatabaseIdentifier' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTemplate' => class WPGraphQL\Type\WPInterfaceType { ... }, 'Previewable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTitle' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentEditor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithAuthor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithFeaturedImage' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithExcerpt' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithComments' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTrackbacks' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithRevisions' => class WPGraphQL\Type\WPInterfaceType { ... }, 'MenuItemLinkable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentBlocks' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post'], $result = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1106
[23-Feb-2023 01:35:46 UTC] PHP  21. GraphQL\Executor\ReferenceExecutor->executeFields($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = ['description' => 'The post type', 'connections' => [...], 'interfaces' => [...], 'fields' => [...], 'model' => 'WPGraphQL\\Model\\Post', 'kind' => 'object', 'name' => 'Post']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['author' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'categories' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentCount' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'comments' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'conditionalTags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentType' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentTypeName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'databaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'date' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'dateGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'desiredSlug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'editingLockedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enclosure' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedScripts' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedStylesheets' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'excerpt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImage' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'guid' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'id' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isContentNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isPreview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRestricted' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRevision' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isSticky' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isTermNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lastEditedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'link' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modified' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modifiedGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pingStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pinged' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postFormats' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'preview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisionOf' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisions' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'slug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'status' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'tags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'template' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'templates' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'terms' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'title' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'toPing' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'uri' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['Node' => class WPGraphQL\Type\WPInterfaceType { ... }, 'ContentNode' => class WPGraphQL\Type\WPInterfaceType { ... }, 'UniformResourceIdentifiable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'DatabaseIdentifier' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTemplate' => class WPGraphQL\Type\WPInterfaceType { ... }, 'Previewable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTitle' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentEditor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithAuthor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithFeaturedImage' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithExcerpt' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithComments' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTrackbacks' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithRevisions' => class WPGraphQL\Type\WPInterfaceType { ... }, 'MenuItemLinkable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentBlocks' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }, $path = [0 => 'post'], $fields = class ArrayObject { private $storage = ['title' => class ArrayObject { ... }, 'content' => class ArrayObject { ... }, 'date' => class ArrayObject { ... }, 'author' => class ArrayObject { ... }, 'featuredImage' => class ArrayObject { ... }, '__typename' => class ArrayObject { ... }, 'contentBlocks' => class ArrayObject { ... }] }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1145
[23-Feb-2023 01:35:46 UTC] PHP  22. GraphQL\Executor\ReferenceExecutor->resolveField($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = ['description' => 'The post type', 'connections' => [...], 'interfaces' => [...], 'fields' => [...], 'model' => 'WPGraphQL\\Model\\Post', 'kind' => 'object', 'name' => 'Post']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['author' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'categories' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentCount' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'comments' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'conditionalTags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentType' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentTypeName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'databaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'date' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'dateGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'desiredSlug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'editingLockedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enclosure' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedScripts' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedStylesheets' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'excerpt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImage' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'guid' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'id' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isContentNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isPreview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRestricted' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRevision' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isSticky' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isTermNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lastEditedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'link' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modified' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modifiedGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pingStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pinged' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postFormats' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'preview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisionOf' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisions' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'slug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'status' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'tags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'template' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'templates' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'terms' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'title' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'toPing' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'uri' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['Node' => class WPGraphQL\Type\WPInterfaceType { ... }, 'ContentNode' => class WPGraphQL\Type\WPInterfaceType { ... }, 'UniformResourceIdentifiable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'DatabaseIdentifier' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTemplate' => class WPGraphQL\Type\WPInterfaceType { ... }, 'Previewable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTitle' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentEditor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithAuthor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithFeaturedImage' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithExcerpt' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithComments' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTrackbacks' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithRevisions' => class WPGraphQL\Type\WPInterfaceType { ... }, 'MenuItemLinkable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentBlocks' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post', 1 => 'contentBlocks']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1195
[23-Feb-2023 01:35:46 UTC] PHP  23. GraphQL\Executor\ReferenceExecutor->completeValueCatchingError($returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks'], $result = [0 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f6c2f2c9b04'], 2 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f6c2f2c9b07']]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:557
[23-Feb-2023 01:35:46 UTC] PHP  24. GraphQL\Executor\ReferenceExecutor->completeValue($returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks'], $result = [0 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f6c2f2c9b04'], 2 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f6c2f2c9b07']]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:654
[23-Feb-2023 01:35:46 UTC] PHP  25. GraphQL\Executor\ReferenceExecutor->completeListValue($returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks'], $results = [0 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f6c2f2c9b04'], 2 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f6c2f2c9b07']]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:761
[23-Feb-2023 01:35:46 UTC] PHP  26. GraphQL\Executor\ReferenceExecutor->completeValueCatchingError($returnType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = ['eagerlyLoadType' => TRUE, 'description' => 'Blocks that can be edited to create content and layouts', 'fields' => [...], 'resolveType' => class Closure { virtual $closure = "$this->WPGraphQL\Type\{closure}", ... }, 'kind' => 'interface', 'name' => 'ContentBlock']; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = []; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6c2f2c9b04']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:887
[23-Feb-2023 01:35:46 UTC] PHP  27. GraphQL\Executor\ReferenceExecutor->completeValue($returnType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = ['eagerlyLoadType' => TRUE, 'description' => 'Blocks that can be edited to create content and layouts', 'fields' => [...], 'resolveType' => class Closure { virtual $closure = "$this->WPGraphQL\Type\{closure}", ... }, 'kind' => 'interface', 'name' => 'ContentBlock']; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = []; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6c2f2c9b04']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:654
[23-Feb-2023 01:35:46 UTC] PHP  28. GraphQL\Executor\ReferenceExecutor->completeAbstractValue($returnType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = ['eagerlyLoadType' => TRUE, 'description' => 'Blocks that can be edited to create content and layouts', 'fields' => [...], 'resolveType' => class Closure { virtual $closure = "$this->WPGraphQL\Type\{closure}", ... }, 'kind' => 'interface', 'name' => 'ContentBlock']; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = []; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6c2f2c9b04']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:789
[23-Feb-2023 01:35:46 UTC] PHP  29. GraphQL\Executor\ReferenceExecutor->completeObjectValue($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = ['description' => 'A block used for editing the site', 'interfaces' => [...], 'eagerlyLoadType' => TRUE, 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCode']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'attributes' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['ContentBlock' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6c2f2c9b04']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:974
[23-Feb-2023 01:35:46 UTC] PHP  30. GraphQL\Executor\ReferenceExecutor->collectAndExecuteSubfields($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = ['description' => 'A block used for editing the site', 'interfaces' => [...], 'eagerlyLoadType' => TRUE, 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCode']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'attributes' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['ContentBlock' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6c2f2c9b04']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1106
[23-Feb-2023 01:35:46 UTC] PHP  31. GraphQL\Executor\ReferenceExecutor->executeFields($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = ['description' => 'A block used for editing the site', 'interfaces' => [...], 'eagerlyLoadType' => TRUE, 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCode']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'attributes' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['ContentBlock' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6c2f2c9b04'], $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0], $fields = class ArrayObject { private $storage = ['__typename' => class ArrayObject { ... }, 'renderedHtml' => class ArrayObject { ... }, 'id' => class ArrayObject { ... }, 'parentId' => class ArrayObject { ... }, 'attributes' => class ArrayObject { ... }] }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1145
[23-Feb-2023 01:35:46 UTC] PHP  32. GraphQL\Executor\ReferenceExecutor->resolveField($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = ['description' => 'A block used for editing the site', 'interfaces' => [...], 'eagerlyLoadType' => TRUE, 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCode']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'attributes' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['ContentBlock' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6c2f2c9b04'], $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1195
[23-Feb-2023 01:35:46 UTC] PHP  33. GraphQL\Executor\ReferenceExecutor->completeValueCatchingError($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'attributes'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'Attributes of the %s Block Type'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class WPGraphQL\Type\WPObjectType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'attributes'; public $returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes'], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6c2f2c9b04']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:557
[23-Feb-2023 01:35:46 UTC] PHP  34. GraphQL\Executor\ReferenceExecutor->completeValue($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'attributes'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'Attributes of the %s Block Type'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class WPGraphQL\Type\WPObjectType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'attributes'; public $returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes'], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6c2f2c9b04']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:654
[23-Feb-2023 01:35:46 UTC] PHP  35. GraphQL\Executor\ReferenceExecutor->completeObjectValue($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'attributes'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'Attributes of the %s Block Type'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class WPGraphQL\Type\WPObjectType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'attributes'; public $returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes'], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6c2f2c9b04']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:793
[23-Feb-2023 01:35:46 UTC] PHP  36. GraphQL\Executor\ReferenceExecutor->collectAndExecuteSubfields($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes'], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6c2f2c9b04']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1106
[23-Feb-2023 01:35:46 UTC] PHP  37. GraphQL\Executor\ReferenceExecutor->executeFields($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6c2f2c9b04'], $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes'], $fields = class ArrayObject { private $storage = ['borderColor' => class ArrayObject { ... }, 'backgroundColor' => class ArrayObject { ... }, 'content' => class ArrayObject { ... }, 'style' => class ArrayObject { ... }, 'textColor' => class ArrayObject { ... }, 'fontSize' => class ArrayObject { ... }, 'fontFamily' => class ArrayObject { ... }, '__typename' => class ArrayObject { ... }] }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1145
[23-Feb-2023 01:35:46 UTC] PHP  38. GraphQL\Executor\ReferenceExecutor->resolveField($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6c2f2c9b04'], $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes', 4 => 'content']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1195
[23-Feb-2023 01:35:46 UTC] PHP  39. GraphQL\Executor\ReferenceExecutor->resolveFieldValueOrError($fieldDef = class GraphQL\Type\Definition\FieldDefinition { public $name = 'content'; public $args = []; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", public $static = [...]; public $parameter = [...] }; public $mapFn = NULL; public $description = 'The &quot;content&quot; field on the &quot;CoreCode&quot; block'; public $deprecationReason = NULL; public $astNode = NULL; public $config = ['type' => class Closure { virtual $closure = "$this->WPGraphQL\Registry\{closure}", ... }, 'description' => 'The "content" field on the "CoreCode" block', 'resolve' => class Closure { virtual $closure = "$this->WPGraphQL\ContentBlocks\Blocks\{closure}", ... }, 'name' => 'content']; private $type = class GraphQL\Type\Definition\StringType { public $name = 'String'; public $description = 'The `String` scalar type represents textual data, represented as UTF-8\ncharacter sequences. The String type is most often used by GraphQL to\nrepresent free-form human-readable text.'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }, $fieldNode = class GraphQL\Language\AST\FieldNode { public $loc = class GraphQL\Language\AST\Location { public $start = 629; public $end = 636; public $startToken = class GraphQL\Language\Token { ... }; public $endToken = class GraphQL\Language\Token { ... }; public $source = class GraphQL\Language\Source { ... } }; public $kind = 'Field'; public $name = class GraphQL\Language\AST\NameNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'Name'; public $value = 'content' }; public $alias = NULL; public $arguments = class GraphQL\Language\AST\NodeList { private $nodes = [...] }; public $directives = class GraphQL\Language\AST\NodeList { private $nodes = [...] }; public $selectionSet = NULL }, $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", public $static = ['field_resolver' => class Closure { virtual $closure = "$this->WPGraphQL\ContentBlocks\Blocks\{closure}", ... }, 'type_name' => 'CoreCodeAttributes', 'field_key' => 'content', 'field' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $parameter = ['$source' => '<required>', '$args' => '<required>', '$context' => '<required>', '$info' => '<required>'] }, $rootValue = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6c2f2c9b04'], $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'content'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'The &quot;content&quot; field on the &quot;CoreCode&quot; block'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\StringType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'content'; public $returnType = class GraphQL\Type\Definition\StringType { public $name = 'String'; public $description = 'The `String` scalar type represents textual data, represented as UTF-8\ncharacter sequences. The String type is most often used by GraphQL to\nrepresent free-form human-readable text.'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes', 4 => 'content']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:550
[23-Feb-2023 01:35:46 UTC] PHP  40. WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure:/Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/src/Utils/InstrumentSchema.php:100-188}($source = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6c2f2c9b04'], $args = [], $context = class WPGraphQL\AppContext { public $root_url = 'http://localhost:10028'; public $viewer = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] }; public $request = NULL; public $config = ['registered_editor_blocks' => [...]]; public $currentConnection = NULL; public $connectionArgs = []; public $loaders = ['comment_author' => class WPGraphQL\Data\Loader\CommentAuthorLoader { ... }, 'comment' => class WPGraphQL\Data\Loader\CommentLoader { ... }, 'enqueued_script' => class WPGraphQL\Data\Loader\EnqueuedScriptLoader { ... }, 'enqueued_stylesheet' => class WPGraphQL\Data\Loader\EnqueuedStylesheetLoader { ... }, 'plugin' => class WPGraphQL\Data\Loader\PluginLoader { ... }, 'nav_menu_item' => class WPGraphQL\Data\Loader\PostObjectLoader { ... }, 'post' => class WPGraphQL\Data\Loader\PostObjectLoader { ... }, 'post_type' => class WPGraphQL\Data\Loader\PostTypeLoader { ... }, 'taxonomy' => class WPGraphQL\Data\Loader\TaxonomyLoader { ... }, 'term' => class WPGraphQL\Data\Loader\TermObjectLoader { ... }, 'theme' => class WPGraphQL\Data\Loader\ThemeLoader { ... }, 'user' => class WPGraphQL\Data\Loader\UserLoader { ... }, 'user_role' => class WPGraphQL\Data\Loader\UserRoleLoader { ... }]; public $node_resolver = class WPGraphQL\Data\NodeResolver { protected $wp = class WP { ... }; protected $context = ... }; public $connection_query_class = NULL }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'content'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'The &quot;content&quot; field on the &quot;CoreCode&quot; block'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\StringType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'content'; public $returnType = class GraphQL\Type\Definition\StringType { public $name = 'String'; public $description = 'The `String` scalar type represents textual data, represented as UTF-8\ncharacter sequences. The String type is most often used by GraphQL to\nrepresent free-form human-readable text.'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes', 4 => 'content']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:623
[23-Feb-2023 01:35:46 UTC] PHP  41. WPGraphQL\ContentBlocks\Blocks\Block->WPGraphQL\ContentBlocks\Blocks\{closure:/Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql-content-blocks-main/includes/Blocks/Block.php:161-163}($block = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6c2f2c9b04'], $args = [], $context = class WPGraphQL\AppContext { public $root_url = 'http://localhost:10028'; public $viewer = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] }; public $request = NULL; public $config = ['registered_editor_blocks' => [...]]; public $currentConnection = NULL; public $connectionArgs = []; public $loaders = ['comment_author' => class WPGraphQL\Data\Loader\CommentAuthorLoader { ... }, 'comment' => class WPGraphQL\Data\Loader\CommentLoader { ... }, 'enqueued_script' => class WPGraphQL\Data\Loader\EnqueuedScriptLoader { ... }, 'enqueued_stylesheet' => class WPGraphQL\Data\Loader\EnqueuedStylesheetLoader { ... }, 'plugin' => class WPGraphQL\Data\Loader\PluginLoader { ... }, 'nav_menu_item' => class WPGraphQL\Data\Loader\PostObjectLoader { ... }, 'post' => class WPGraphQL\Data\Loader\PostObjectLoader { ... }, 'post_type' => class WPGraphQL\Data\Loader\PostTypeLoader { ... }, 'taxonomy' => class WPGraphQL\Data\Loader\TaxonomyLoader { ... }, 'term' => class WPGraphQL\Data\Loader\TermObjectLoader { ... }, 'theme' => class WPGraphQL\Data\Loader\ThemeLoader { ... }, 'user' => class WPGraphQL\Data\Loader\UserLoader { ... }, 'user_role' => class WPGraphQL\Data\Loader\UserRoleLoader { ... }]; public $node_resolver = class WPGraphQL\Data\NodeResolver { protected $wp = class WP { ... }; protected $context = ... }; public $connection_query_class = NULL }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'content'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'The &quot;content&quot; field on the &quot;CoreCode&quot; block'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\StringType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'content'; public $returnType = class GraphQL\Type\Definition\StringType { public $name = 'String'; public $description = 'The `String` scalar type represents textual data, represented as UTF-8\ncharacter sequences. The String type is most often used by GraphQL to\nrepresent free-form human-readable text.'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes', 4 => 'content']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/src/Utils/InstrumentSchema.php:151
[23-Feb-2023 01:35:46 UTC] PHP  42. WPGraphQL\ContentBlocks\Blocks\Block->resolve_block_attributes($block = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6c2f2c9b04'], $attribute_name = 'content', $attribute_config = ['type' => 'string', 'source' => 'html', 'selector' => 'code']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql-content-blocks-main/includes/Blocks/Block.php:162
[23-Feb-2023 01:35:46 UTC] PHP Warning:  Undefined array key "default" in /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql-content-blocks-main/includes/Blocks/Block.php on line 214
[23-Feb-2023 01:35:46 UTC] PHP Stack trace:
[23-Feb-2023 01:35:46 UTC] PHP   1. {main}() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/index.php:0
[23-Feb-2023 01:35:46 UTC] PHP   2. require() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/index.php:17
[23-Feb-2023 01:35:46 UTC] PHP   3. wp($query_vars = *uninitialized*) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-blog-header.php:16
[23-Feb-2023 01:35:46 UTC] PHP   4. WP->main($query_args = '') /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/functions.php:1332
[23-Feb-2023 01:35:46 UTC] PHP   5. WP->parse_request($extra_query_vars = '') /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/class-wp.php:780
[23-Feb-2023 01:35:46 UTC] PHP   6. do_action_ref_array($hook_name = 'parse_request', $args = [0 => class WP { public $public_query_vars = [...]; public $private_query_vars = [...]; public $extra_query_vars = [...]; public $query_vars = [...]; public $query_string = ''; public $request = 'graphql'; public $matched_rule = 'graphql/?$'; public $matched_query = 'graphql=true'; public $did_permalink = TRUE }]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/class-wp.php:399
[23-Feb-2023 01:35:46 UTC] PHP   7. WP_Hook->do_action($args = [0 => class WP { public $public_query_vars = [...]; public $private_query_vars = [...]; public $extra_query_vars = [...]; public $query_vars = [...]; public $query_string = ''; public $request = 'graphql'; public $matched_rule = 'graphql/?$'; public $matched_query = 'graphql=true'; public $did_permalink = TRUE }]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/plugin.php:565
[23-Feb-2023 01:35:46 UTC] PHP   8. WP_Hook->apply_filters($value = '', $args = [0 => class WP { public $public_query_vars = [...]; public $private_query_vars = [...]; public $extra_query_vars = [...]; public $query_vars = [...]; public $query_string = ''; public $request = 'graphql'; public $matched_rule = 'graphql/?$'; public $matched_query = 'graphql=true'; public $did_permalink = TRUE }]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/class-wp-hook.php:332
[23-Feb-2023 01:35:46 UTC] PHP   9. WPGraphQL\Router::resolve_http_request(class WP { public $public_query_vars = [0 => 'm', 1 => 'p', 2 => 'posts', 3 => 'w', 4 => 'cat', 5 => 'withcomments', 6 => 'withoutcomments', 7 => 's', 8 => 'search', 9 => 'exact', 10 => 'sentence', 11 => 'calendar', 12 => 'page', 13 => 'paged', 14 => 'more', 15 => 'tb', 16 => 'pb', 17 => 'author', 18 => 'order', 19 => 'orderby', 20 => 'year', 21 => 'monthnum', 22 => 'day', 23 => 'hour', 24 => 'minute', 25 => 'second', 26 => 'name', 27 => 'category_name', 28 => 'tag', 29 => 'feed', 30 => 'author_name', 31 => 'pagename', 32 => 'page_id', 33 => 'error', 34 => 'attachment', 35 => 'attachment_id', 36 => 'subpost', 37 => 'subpost_id', 38 => 'preview', 39 => 'robots', 40 => 'favicon', 41 => 'taxonomy', 42 => 'term', 43 => 'cpage', 44 => 'post_type', 45 => 'embed', 46 => 'post_format', 47 => 'rest_route', 48 => 'sitemap', 49 => 'sitemap-subtype', 50 => 'sitemap-stylesheet', 51 => 'graphql']; public $private_query_vars = [0 => 'offset', 1 => 'posts_per_page', 2 => 'posts_per_archive_page', 3 => 'showposts', 4 => 'nopaging', 5 => 'post_type', 6 => 'post_status', 7 => 'category__in', 8 => 'category__not_in', 9 => 'category__and', 10 => 'tag__in', 11 => 'tag__not_in', 12 => 'tag__and', 13 => 'tag_slug__in', 14 => 'tag_slug__and', 15 => 'tag_id', 16 => 'post_mime_type', 17 => 'perm', 18 => 'comments_per_page', 19 => 'post__in', 20 => 'post__not_in', 21 => 'post_parent', 22 => 'post_parent__in', 23 => 'post_parent__not_in', 24 => 'title', 25 => 'fields']; public $extra_query_vars = []; public $query_vars = ['graphql' => 'true']; public $query_string = ''; public $request = 'graphql'; public $matched_rule = 'graphql/?$'; public $matched_query = 'graphql=true'; public $did_permalink = TRUE }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/class-wp-hook.php:308
[23-Feb-2023 01:35:46 UTC] PHP  10. WPGraphQL\Router::process_http_request() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/src/Router.php:275
[23-Feb-2023 01:35:46 UTC] PHP  11. WPGraphQL\Request->execute_http() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/src/Router.php:481
[23-Feb-2023 01:35:46 UTC] PHP  12. GraphQL\Server\StandardServer->executeRequest($parsedBody = class GraphQL\Server\OperationParams { public $queryId = NULL; public $query = 'fragment BlogInfoFragment on GeneralSettings {\n  title\n  description\n  __typename\n}\n\nfragment NavigationMenuItemFragment on MenuItem {\n  id\n  path\n  label\n  parentId\n  cssClasses\n  menu {\n    node {\n      name\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment FeaturedImageFragment on NodeWithFeaturedImage {\n  featuredImage {\n    node {\n      id\n      sourceUrl\n      altText\n      mediaDetails {\n        width\n        height\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }'...; public $operation = 'GetPost'; public $variables = ['asPreview' => TRUE, 'databaseId' => 5, 'headerLocation' => 'PRIMARY', 'footerLocation' => 'FOOTER']; public $extensions = NULL; private $originalInput = ['operationname' => 'GetPost', 'variables' => [...], 'query' => 'fragment BlogInfoFragment on GeneralSettings {\n  title\n  description\n  __typename\n}\n\nfragment NavigationMenuItemFragment on MenuItem {\n  id\n  path\n  label\n  parentId\n  cssClasses\n  menu {\n    node {\n      name\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment FeaturedImageFragment on NodeWithFeaturedImage {\n  featuredImage {\n    node {\n      id\n      sourceUrl\n      altText\n      mediaDetails {\n        width\n        height\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }'...]; private $readOnly = FALSE }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/src/Request.php:713
[23-Feb-2023 01:35:46 UTC] PHP  13. GraphQL\Server\Helper->executeOperation($config = class GraphQL\Server\ServerConfig { private $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; private $context = class WPGraphQL\AppContext { public $root_url = 'http://localhost:10028'; public $viewer = class WP_User { ... }; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... }; public $request = NULL; public $config = [...]; public $currentConnection = NULL; public $connectionArgs = [...]; public $loaders = [...]; public $node_resolver = class WPGraphQL\Data\NodeResolver { ... }; public $connection_query_class = NULL }; private $rootValue = NULL; private $errorFormatter = NULL; private $errorsHandler = NULL; private $debugFlag = 0; private $queryBatching = TRUE; private $validationRules = [0 => class GraphQL\Validator\Rules\ExecutableDefinitions { ... }, 1 => class GraphQL\Validator\Rules\UniqueOperationNames { ... }, 2 => class GraphQL\Validator\Rules\LoneAnonymousOperation { ... }, 3 => class GraphQL\Validator\Rules\SingleFieldSubscription { ... }, 4 => class GraphQL\Validator\Rules\KnownTypeNames { ... }, 5 => class GraphQL\Validator\Rules\FragmentsOnCompositeTypes { ... }, 6 => class GraphQL\Validator\Rules\VariablesAreInputTypes { ... }, 7 => class GraphQL\Validator\Rules\ScalarLeafs { ... }, 8 => class GraphQL\Validator\Rules\FieldsOnCorrectType { ... }, 9 => class GraphQL\Validator\Rules\UniqueFragmentNames { ... }, 10 => class GraphQL\Validator\Rules\KnownFragmentNames { ... }, 11 => class GraphQL\Validator\Rules\NoUnusedFragments { ... }, 12 => class GraphQL\Validator\Rules\PossibleFragmentSpreads { ... }, 13 => class GraphQL\Validator\Rules\NoFragmentCycles { ... }, 14 => class GraphQL\Validator\Rules\UniqueVariableNames { ... }, 15 => class GraphQL\Validator\Rules\NoUndefinedVariables { ... }, 16 => class GraphQL\Validator\Rules\NoUnusedVariables { ... }, 17 => class GraphQL\Validator\Rules\KnownDirectives { ... }, 18 => class GraphQL\Validator\Rules\UniqueDirectivesPerLocation { ... }, 19 => class GraphQL\Validator\Rules\KnownArgumentNames { ... }, 20 => class GraphQL\Validator\Rules\UniqueArgumentNames { ... }, 21 => class GraphQL\Validator\Rules\ValuesOfCorrectType { ... }, 22 => class GraphQL\Validator\Rules\ProvidedRequiredArguments { ... }, 23 => class GraphQL\Validator\Rules\VariablesInAllowedPosition { ... }, 24 => class GraphQL\Validator\Rules\OverlappingFieldsCanBeMerged { ... }, 25 => class GraphQL\Validator\Rules\UniqueInputFieldNames { ... }, 'require_authentication' => class WPGraphQL\Server\ValidationRules\RequireAuthentication { ... }, 'disable_introspection' => class WPGraphQL\Server\ValidationRules\DisableIntrospection { ... }, 'query_depth' => class WPGraphQL\Server\ValidationRules\QueryDepth { ... }]; private $fieldResolver = NULL; private $promiseAdapter = NULL; private $persistentQueryLoader = NULL }, $op = class GraphQL\Server\OperationParams { public $queryId = NULL; public $query = 'fragment BlogInfoFragment on GeneralSettings {\n  title\n  description\n  __typename\n}\n\nfragment NavigationMenuItemFragment on MenuItem {\n  id\n  path\n  label\n  parentId\n  cssClasses\n  menu {\n    node {\n      name\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment FeaturedImageFragment on NodeWithFeaturedImage {\n  featuredImage {\n    node {\n      id\n      sourceUrl\n      altText\n      mediaDetails {\n        width\n        height\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }'...; public $operation = 'GetPost'; public $variables = ['asPreview' => TRUE, 'databaseId' => 5, 'headerLocation' => 'PRIMARY', 'footerLocation' => 'FOOTER']; public $extensions = NULL; private $originalInput = ['operationname' => 'GetPost', 'variables' => [...], 'query' => 'fragment BlogInfoFragment on GeneralSettings {\n  title\n  description\n  __typename\n}\n\nfragment NavigationMenuItemFragment on MenuItem {\n  id\n  path\n  label\n  parentId\n  cssClasses\n  menu {\n    node {\n      name\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment FeaturedImageFragment on NodeWithFeaturedImage {\n  featuredImage {\n    node {\n      id\n      sourceUrl\n      altText\n      mediaDetails {\n        width\n        height\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }'...]; private $readOnly = FALSE }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Server/StandardServer.php:136
[23-Feb-2023 01:35:46 UTC] PHP  14. GraphQL\Executor\Promise\Adapter\SyncPromiseAdapter->wait($promise = class GraphQL\Executor\Promise\Promise { public $adoptedPromise = class GraphQL\Executor\Promise\Adapter\SyncPromise { public $state = 'pending'; public $result = NULL; private $waiting = [...] }; private $adapter = class GraphQL\Executor\Promise\Adapter\SyncPromiseAdapter {  } }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Server/Helper.php:214
[23-Feb-2023 01:35:46 UTC] PHP  15. GraphQL\Executor\Promise\Adapter\SyncPromise::runQueue() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/Promise/Adapter/SyncPromiseAdapter.php:149
[23-Feb-2023 01:35:46 UTC] PHP  16. GraphQL\Executor\Promise\Adapter\SyncPromise->GraphQL\Executor\Promise\Adapter\{closure:/Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/Promise/Adapter/SyncPromise.php:142-163}() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/Promise/Adapter/SyncPromise.php:53
[23-Feb-2023 01:35:46 UTC] PHP  17. GraphQL\Executor\ReferenceExecutor->GraphQL\Executor\{closure:/Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:650-652}($resolved = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/Promise/Adapter/SyncPromise.php:148
[23-Feb-2023 01:35:46 UTC] PHP  18. GraphQL\Executor\ReferenceExecutor->completeValue($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = ['description' => 'The post type', 'connections' => [...], 'interfaces' => [...], 'fields' => [...], 'model' => 'WPGraphQL\\Model\\Post', 'kind' => 'object', 'name' => 'Post']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['author' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'categories' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentCount' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'comments' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'conditionalTags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentType' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentTypeName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'databaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'date' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'dateGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'desiredSlug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'editingLockedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enclosure' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedScripts' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedStylesheets' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'excerpt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImage' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'guid' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'id' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isContentNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isPreview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRestricted' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRevision' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isSticky' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isTermNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lastEditedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'link' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modified' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modifiedGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pingStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pinged' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postFormats' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'preview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisionOf' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisions' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'slug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'status' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'tags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'template' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'templates' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'terms' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'title' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'toPing' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'uri' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['Node' => class WPGraphQL\Type\WPInterfaceType { ... }, 'ContentNode' => class WPGraphQL\Type\WPInterfaceType { ... }, 'UniformResourceIdentifiable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'DatabaseIdentifier' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTemplate' => class WPGraphQL\Type\WPInterfaceType { ... }, 'Previewable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTitle' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentEditor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithAuthor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithFeaturedImage' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithExcerpt' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithComments' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTrackbacks' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithRevisions' => class WPGraphQL\Type\WPInterfaceType { ... }, 'MenuItemLinkable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentBlocks' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'post'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'An object of the post Type. '; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class WPGraphQL\Type\WPObjectType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'post'; public $returnType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'RootQuery'; public $description = 'The root entry point into the Graph'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post'], $result = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:651
[23-Feb-2023 01:35:46 UTC] PHP  19. GraphQL\Executor\ReferenceExecutor->completeObjectValue($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = ['description' => 'The post type', 'connections' => [...], 'interfaces' => [...], 'fields' => [...], 'model' => 'WPGraphQL\\Model\\Post', 'kind' => 'object', 'name' => 'Post']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['author' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'categories' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentCount' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'comments' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'conditionalTags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentType' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentTypeName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'databaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'date' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'dateGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'desiredSlug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'editingLockedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enclosure' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedScripts' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedStylesheets' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'excerpt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImage' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'guid' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'id' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isContentNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isPreview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRestricted' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRevision' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isSticky' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isTermNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lastEditedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'link' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modified' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modifiedGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pingStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pinged' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postFormats' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'preview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisionOf' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisions' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'slug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'status' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'tags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'template' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'templates' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'terms' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'title' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'toPing' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'uri' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['Node' => class WPGraphQL\Type\WPInterfaceType { ... }, 'ContentNode' => class WPGraphQL\Type\WPInterfaceType { ... }, 'UniformResourceIdentifiable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'DatabaseIdentifier' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTemplate' => class WPGraphQL\Type\WPInterfaceType { ... }, 'Previewable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTitle' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentEditor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithAuthor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithFeaturedImage' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithExcerpt' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithComments' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTrackbacks' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithRevisions' => class WPGraphQL\Type\WPInterfaceType { ... }, 'MenuItemLinkable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentBlocks' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'post'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'An object of the post Type. '; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class WPGraphQL\Type\WPObjectType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'post'; public $returnType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'RootQuery'; public $description = 'The root entry point into the Graph'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post'], $result = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:793
[23-Feb-2023 01:35:46 UTC] PHP  20. GraphQL\Executor\ReferenceExecutor->collectAndExecuteSubfields($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = ['description' => 'The post type', 'connections' => [...], 'interfaces' => [...], 'fields' => [...], 'model' => 'WPGraphQL\\Model\\Post', 'kind' => 'object', 'name' => 'Post']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['author' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'categories' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentCount' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'comments' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'conditionalTags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentType' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentTypeName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'databaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'date' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'dateGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'desiredSlug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'editingLockedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enclosure' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedScripts' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedStylesheets' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'excerpt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImage' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'guid' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'id' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isContentNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isPreview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRestricted' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRevision' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isSticky' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isTermNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lastEditedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'link' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modified' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modifiedGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pingStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pinged' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postFormats' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'preview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisionOf' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisions' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'slug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'status' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'tags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'template' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'templates' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'terms' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'title' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'toPing' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'uri' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['Node' => class WPGraphQL\Type\WPInterfaceType { ... }, 'ContentNode' => class WPGraphQL\Type\WPInterfaceType { ... }, 'UniformResourceIdentifiable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'DatabaseIdentifier' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTemplate' => class WPGraphQL\Type\WPInterfaceType { ... }, 'Previewable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTitle' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentEditor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithAuthor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithFeaturedImage' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithExcerpt' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithComments' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTrackbacks' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithRevisions' => class WPGraphQL\Type\WPInterfaceType { ... }, 'MenuItemLinkable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentBlocks' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post'], $result = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1106
[23-Feb-2023 01:35:46 UTC] PHP  21. GraphQL\Executor\ReferenceExecutor->executeFields($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = ['description' => 'The post type', 'connections' => [...], 'interfaces' => [...], 'fields' => [...], 'model' => 'WPGraphQL\\Model\\Post', 'kind' => 'object', 'name' => 'Post']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['author' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'categories' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentCount' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'comments' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'conditionalTags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentType' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentTypeName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'databaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'date' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'dateGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'desiredSlug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'editingLockedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enclosure' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedScripts' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedStylesheets' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'excerpt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImage' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'guid' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'id' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isContentNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isPreview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRestricted' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRevision' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isSticky' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isTermNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lastEditedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'link' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modified' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modifiedGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pingStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pinged' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postFormats' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'preview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisionOf' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisions' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'slug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'status' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'tags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'template' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'templates' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'terms' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'title' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'toPing' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'uri' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['Node' => class WPGraphQL\Type\WPInterfaceType { ... }, 'ContentNode' => class WPGraphQL\Type\WPInterfaceType { ... }, 'UniformResourceIdentifiable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'DatabaseIdentifier' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTemplate' => class WPGraphQL\Type\WPInterfaceType { ... }, 'Previewable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTitle' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentEditor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithAuthor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithFeaturedImage' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithExcerpt' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithComments' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTrackbacks' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithRevisions' => class WPGraphQL\Type\WPInterfaceType { ... }, 'MenuItemLinkable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentBlocks' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }, $path = [0 => 'post'], $fields = class ArrayObject { private $storage = ['title' => class ArrayObject { ... }, 'content' => class ArrayObject { ... }, 'date' => class ArrayObject { ... }, 'author' => class ArrayObject { ... }, 'featuredImage' => class ArrayObject { ... }, '__typename' => class ArrayObject { ... }, 'contentBlocks' => class ArrayObject { ... }] }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1145
[23-Feb-2023 01:35:46 UTC] PHP  22. GraphQL\Executor\ReferenceExecutor->resolveField($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = ['description' => 'The post type', 'connections' => [...], 'interfaces' => [...], 'fields' => [...], 'model' => 'WPGraphQL\\Model\\Post', 'kind' => 'object', 'name' => 'Post']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['author' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'categories' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentCount' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'comments' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'conditionalTags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentType' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentTypeName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'databaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'date' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'dateGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'desiredSlug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'editingLockedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enclosure' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedScripts' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedStylesheets' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'excerpt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImage' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'guid' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'id' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isContentNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isPreview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRestricted' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRevision' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isSticky' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isTermNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lastEditedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'link' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modified' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modifiedGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pingStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pinged' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postFormats' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'preview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisionOf' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisions' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'slug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'status' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'tags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'template' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'templates' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'terms' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'title' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'toPing' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'uri' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['Node' => class WPGraphQL\Type\WPInterfaceType { ... }, 'ContentNode' => class WPGraphQL\Type\WPInterfaceType { ... }, 'UniformResourceIdentifiable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'DatabaseIdentifier' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTemplate' => class WPGraphQL\Type\WPInterfaceType { ... }, 'Previewable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTitle' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentEditor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithAuthor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithFeaturedImage' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithExcerpt' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithComments' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTrackbacks' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithRevisions' => class WPGraphQL\Type\WPInterfaceType { ... }, 'MenuItemLinkable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentBlocks' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post', 1 => 'contentBlocks']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1195
[23-Feb-2023 01:35:46 UTC] PHP  23. GraphQL\Executor\ReferenceExecutor->completeValueCatchingError($returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks'], $result = [0 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f6c2f2c9b04'], 2 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f6c2f2c9b07']]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:557
[23-Feb-2023 01:35:46 UTC] PHP  24. GraphQL\Executor\ReferenceExecutor->completeValue($returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks'], $result = [0 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f6c2f2c9b04'], 2 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f6c2f2c9b07']]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:654
[23-Feb-2023 01:35:46 UTC] PHP  25. GraphQL\Executor\ReferenceExecutor->completeListValue($returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks'], $results = [0 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f6c2f2c9b04'], 2 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f6c2f2c9b07']]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:761
[23-Feb-2023 01:35:46 UTC] PHP  26. GraphQL\Executor\ReferenceExecutor->completeValueCatchingError($returnType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = ['eagerlyLoadType' => TRUE, 'description' => 'Blocks that can be edited to create content and layouts', 'fields' => [...], 'resolveType' => class Closure { virtual $closure = "$this->WPGraphQL\Type\{closure}", ... }, 'kind' => 'interface', 'name' => 'ContentBlock']; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = []; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6c2f2c9b07']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:887
[23-Feb-2023 01:35:46 UTC] PHP  27. GraphQL\Executor\ReferenceExecutor->completeValue($returnType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = ['eagerlyLoadType' => TRUE, 'description' => 'Blocks that can be edited to create content and layouts', 'fields' => [...], 'resolveType' => class Closure { virtual $closure = "$this->WPGraphQL\Type\{closure}", ... }, 'kind' => 'interface', 'name' => 'ContentBlock']; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = []; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6c2f2c9b07']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:654
[23-Feb-2023 01:35:46 UTC] PHP  28. GraphQL\Executor\ReferenceExecutor->completeAbstractValue($returnType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = ['eagerlyLoadType' => TRUE, 'description' => 'Blocks that can be edited to create content and layouts', 'fields' => [...], 'resolveType' => class Closure { virtual $closure = "$this->WPGraphQL\Type\{closure}", ... }, 'kind' => 'interface', 'name' => 'ContentBlock']; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = []; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6c2f2c9b07']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:789
[23-Feb-2023 01:35:46 UTC] PHP  29. GraphQL\Executor\ReferenceExecutor->completeObjectValue($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = ['description' => 'A block used for editing the site', 'interfaces' => [...], 'eagerlyLoadType' => TRUE, 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCode']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'attributes' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['ContentBlock' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6c2f2c9b07']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:974
[23-Feb-2023 01:35:46 UTC] PHP  30. GraphQL\Executor\ReferenceExecutor->collectAndExecuteSubfields($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = ['description' => 'A block used for editing the site', 'interfaces' => [...], 'eagerlyLoadType' => TRUE, 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCode']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'attributes' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['ContentBlock' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6c2f2c9b07']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1106
[23-Feb-2023 01:35:46 UTC] PHP  31. GraphQL\Executor\ReferenceExecutor->executeFields($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = ['description' => 'A block used for editing the site', 'interfaces' => [...], 'eagerlyLoadType' => TRUE, 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCode']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'attributes' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['ContentBlock' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6c2f2c9b07'], $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1], $fields = class ArrayObject { private $storage = ['__typename' => class ArrayObject { ... }, 'renderedHtml' => class ArrayObject { ... }, 'id' => class ArrayObject { ... }, 'parentId' => class ArrayObject { ... }, 'attributes' => class ArrayObject { ... }] }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1145
[23-Feb-2023 01:35:46 UTC] PHP  32. GraphQL\Executor\ReferenceExecutor->resolveField($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = ['description' => 'A block used for editing the site', 'interfaces' => [...], 'eagerlyLoadType' => TRUE, 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCode']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'attributes' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['ContentBlock' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6c2f2c9b07'], $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1195
[23-Feb-2023 01:35:46 UTC] PHP  33. GraphQL\Executor\ReferenceExecutor->completeValueCatchingError($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'attributes'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'Attributes of the %s Block Type'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class WPGraphQL\Type\WPObjectType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'attributes'; public $returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes'], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6c2f2c9b07']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:557
[23-Feb-2023 01:35:46 UTC] PHP  34. GraphQL\Executor\ReferenceExecutor->completeValue($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'attributes'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'Attributes of the %s Block Type'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class WPGraphQL\Type\WPObjectType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'attributes'; public $returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes'], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6c2f2c9b07']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:654
[23-Feb-2023 01:35:46 UTC] PHP  35. GraphQL\Executor\ReferenceExecutor->completeObjectValue($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'attributes'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'Attributes of the %s Block Type'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class WPGraphQL\Type\WPObjectType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'attributes'; public $returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes'], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6c2f2c9b07']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:793
[23-Feb-2023 01:35:46 UTC] PHP  36. GraphQL\Executor\ReferenceExecutor->collectAndExecuteSubfields($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes'], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6c2f2c9b07']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1106
[23-Feb-2023 01:35:46 UTC] PHP  37. GraphQL\Executor\ReferenceExecutor->executeFields($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6c2f2c9b07'], $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes'], $fields = class ArrayObject { private $storage = ['borderColor' => class ArrayObject { ... }, 'backgroundColor' => class ArrayObject { ... }, 'content' => class ArrayObject { ... }, 'style' => class ArrayObject { ... }, 'textColor' => class ArrayObject { ... }, 'fontSize' => class ArrayObject { ... }, 'fontFamily' => class ArrayObject { ... }, '__typename' => class ArrayObject { ... }] }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1145
[23-Feb-2023 01:35:46 UTC] PHP  38. GraphQL\Executor\ReferenceExecutor->resolveField($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6c2f2c9b07'], $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes', 4 => 'content']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1195
[23-Feb-2023 01:35:46 UTC] PHP  39. GraphQL\Executor\ReferenceExecutor->resolveFieldValueOrError($fieldDef = class GraphQL\Type\Definition\FieldDefinition { public $name = 'content'; public $args = []; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", public $static = [...]; public $parameter = [...] }; public $mapFn = NULL; public $description = 'The &quot;content&quot; field on the &quot;CoreCode&quot; block'; public $deprecationReason = NULL; public $astNode = NULL; public $config = ['type' => class Closure { virtual $closure = "$this->WPGraphQL\Registry\{closure}", ... }, 'description' => 'The "content" field on the "CoreCode" block', 'resolve' => class Closure { virtual $closure = "$this->WPGraphQL\ContentBlocks\Blocks\{closure}", ... }, 'name' => 'content']; private $type = class GraphQL\Type\Definition\StringType { public $name = 'String'; public $description = 'The `String` scalar type represents textual data, represented as UTF-8\ncharacter sequences. The String type is most often used by GraphQL to\nrepresent free-form human-readable text.'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }, $fieldNode = class GraphQL\Language\AST\FieldNode { public $loc = class GraphQL\Language\AST\Location { public $start = 629; public $end = 636; public $startToken = class GraphQL\Language\Token { ... }; public $endToken = class GraphQL\Language\Token { ... }; public $source = class GraphQL\Language\Source { ... } }; public $kind = 'Field'; public $name = class GraphQL\Language\AST\NameNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'Name'; public $value = 'content' }; public $alias = NULL; public $arguments = class GraphQL\Language\AST\NodeList { private $nodes = [...] }; public $directives = class GraphQL\Language\AST\NodeList { private $nodes = [...] }; public $selectionSet = NULL }, $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", public $static = ['field_resolver' => class Closure { virtual $closure = "$this->WPGraphQL\ContentBlocks\Blocks\{closure}", ... }, 'type_name' => 'CoreCodeAttributes', 'field_key' => 'content', 'field' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $parameter = ['$source' => '<required>', '$args' => '<required>', '$context' => '<required>', '$info' => '<required>'] }, $rootValue = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6c2f2c9b07'], $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'content'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'The &quot;content&quot; field on the &quot;CoreCode&quot; block'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\StringType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'content'; public $returnType = class GraphQL\Type\Definition\StringType { public $name = 'String'; public $description = 'The `String` scalar type represents textual data, represented as UTF-8\ncharacter sequences. The String type is most often used by GraphQL to\nrepresent free-form human-readable text.'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes', 4 => 'content']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:550
[23-Feb-2023 01:35:46 UTC] PHP  40. WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure:/Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/src/Utils/InstrumentSchema.php:100-188}($source = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6c2f2c9b07'], $args = [], $context = class WPGraphQL\AppContext { public $root_url = 'http://localhost:10028'; public $viewer = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] }; public $request = NULL; public $config = ['registered_editor_blocks' => [...]]; public $currentConnection = NULL; public $connectionArgs = []; public $loaders = ['comment_author' => class WPGraphQL\Data\Loader\CommentAuthorLoader { ... }, 'comment' => class WPGraphQL\Data\Loader\CommentLoader { ... }, 'enqueued_script' => class WPGraphQL\Data\Loader\EnqueuedScriptLoader { ... }, 'enqueued_stylesheet' => class WPGraphQL\Data\Loader\EnqueuedStylesheetLoader { ... }, 'plugin' => class WPGraphQL\Data\Loader\PluginLoader { ... }, 'nav_menu_item' => class WPGraphQL\Data\Loader\PostObjectLoader { ... }, 'post' => class WPGraphQL\Data\Loader\PostObjectLoader { ... }, 'post_type' => class WPGraphQL\Data\Loader\PostTypeLoader { ... }, 'taxonomy' => class WPGraphQL\Data\Loader\TaxonomyLoader { ... }, 'term' => class WPGraphQL\Data\Loader\TermObjectLoader { ... }, 'theme' => class WPGraphQL\Data\Loader\ThemeLoader { ... }, 'user' => class WPGraphQL\Data\Loader\UserLoader { ... }, 'user_role' => class WPGraphQL\Data\Loader\UserRoleLoader { ... }]; public $node_resolver = class WPGraphQL\Data\NodeResolver { protected $wp = class WP { ... }; protected $context = ... }; public $connection_query_class = NULL }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'content'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'The &quot;content&quot; field on the &quot;CoreCode&quot; block'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\StringType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'content'; public $returnType = class GraphQL\Type\Definition\StringType { public $name = 'String'; public $description = 'The `String` scalar type represents textual data, represented as UTF-8\ncharacter sequences. The String type is most often used by GraphQL to\nrepresent free-form human-readable text.'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes', 4 => 'content']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:623
[23-Feb-2023 01:35:46 UTC] PHP  41. WPGraphQL\ContentBlocks\Blocks\Block->WPGraphQL\ContentBlocks\Blocks\{closure:/Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql-content-blocks-main/includes/Blocks/Block.php:161-163}($block = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6c2f2c9b07'], $args = [], $context = class WPGraphQL\AppContext { public $root_url = 'http://localhost:10028'; public $viewer = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] }; public $request = NULL; public $config = ['registered_editor_blocks' => [...]]; public $currentConnection = NULL; public $connectionArgs = []; public $loaders = ['comment_author' => class WPGraphQL\Data\Loader\CommentAuthorLoader { ... }, 'comment' => class WPGraphQL\Data\Loader\CommentLoader { ... }, 'enqueued_script' => class WPGraphQL\Data\Loader\EnqueuedScriptLoader { ... }, 'enqueued_stylesheet' => class WPGraphQL\Data\Loader\EnqueuedStylesheetLoader { ... }, 'plugin' => class WPGraphQL\Data\Loader\PluginLoader { ... }, 'nav_menu_item' => class WPGraphQL\Data\Loader\PostObjectLoader { ... }, 'post' => class WPGraphQL\Data\Loader\PostObjectLoader { ... }, 'post_type' => class WPGraphQL\Data\Loader\PostTypeLoader { ... }, 'taxonomy' => class WPGraphQL\Data\Loader\TaxonomyLoader { ... }, 'term' => class WPGraphQL\Data\Loader\TermObjectLoader { ... }, 'theme' => class WPGraphQL\Data\Loader\ThemeLoader { ... }, 'user' => class WPGraphQL\Data\Loader\UserLoader { ... }, 'user_role' => class WPGraphQL\Data\Loader\UserRoleLoader { ... }]; public $node_resolver = class WPGraphQL\Data\NodeResolver { protected $wp = class WP { ... }; protected $context = ... }; public $connection_query_class = NULL }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'content'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'The &quot;content&quot; field on the &quot;CoreCode&quot; block'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\StringType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'content'; public $returnType = class GraphQL\Type\Definition\StringType { public $name = 'String'; public $description = 'The `String` scalar type represents textual data, represented as UTF-8\ncharacter sequences. The String type is most often used by GraphQL to\nrepresent free-form human-readable text.'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes', 4 => 'content']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/src/Utils/InstrumentSchema.php:151
[23-Feb-2023 01:35:46 UTC] PHP  42. WPGraphQL\ContentBlocks\Blocks\Block->resolve_block_attributes($block = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6c2f2c9b07'], $attribute_name = 'content', $attribute_config = ['type' => 'string', 'source' => 'html', 'selector' => 'code']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql-content-blocks-main/includes/Blocks/Block.php:162
[23-Feb-2023 01:37:05 UTC] PHP Warning:  Undefined array key "default" in /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql-content-blocks-main/includes/Blocks/Block.php on line 214
[23-Feb-2023 01:37:05 UTC] PHP Stack trace:
[23-Feb-2023 01:37:05 UTC] PHP   1. {main}() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/index.php:0
[23-Feb-2023 01:37:05 UTC] PHP   2. require() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/index.php:17
[23-Feb-2023 01:37:05 UTC] PHP   3. wp($query_vars = *uninitialized*) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-blog-header.php:16
[23-Feb-2023 01:37:05 UTC] PHP   4. WP->main($query_args = '') /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/functions.php:1332
[23-Feb-2023 01:37:05 UTC] PHP   5. WP->parse_request($extra_query_vars = '') /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/class-wp.php:780
[23-Feb-2023 01:37:05 UTC] PHP   6. do_action_ref_array($hook_name = 'parse_request', $args = [0 => class WP { public $public_query_vars = [...]; public $private_query_vars = [...]; public $extra_query_vars = [...]; public $query_vars = [...]; public $query_string = ''; public $request = 'graphql'; public $matched_rule = 'graphql/?$'; public $matched_query = 'graphql=true'; public $did_permalink = TRUE }]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/class-wp.php:399
[23-Feb-2023 01:37:05 UTC] PHP   7. WP_Hook->do_action($args = [0 => class WP { public $public_query_vars = [...]; public $private_query_vars = [...]; public $extra_query_vars = [...]; public $query_vars = [...]; public $query_string = ''; public $request = 'graphql'; public $matched_rule = 'graphql/?$'; public $matched_query = 'graphql=true'; public $did_permalink = TRUE }]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/plugin.php:565
[23-Feb-2023 01:37:05 UTC] PHP   8. WP_Hook->apply_filters($value = '', $args = [0 => class WP { public $public_query_vars = [...]; public $private_query_vars = [...]; public $extra_query_vars = [...]; public $query_vars = [...]; public $query_string = ''; public $request = 'graphql'; public $matched_rule = 'graphql/?$'; public $matched_query = 'graphql=true'; public $did_permalink = TRUE }]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/class-wp-hook.php:332
[23-Feb-2023 01:37:05 UTC] PHP   9. WPGraphQL\Router::resolve_http_request(class WP { public $public_query_vars = [0 => 'm', 1 => 'p', 2 => 'posts', 3 => 'w', 4 => 'cat', 5 => 'withcomments', 6 => 'withoutcomments', 7 => 's', 8 => 'search', 9 => 'exact', 10 => 'sentence', 11 => 'calendar', 12 => 'page', 13 => 'paged', 14 => 'more', 15 => 'tb', 16 => 'pb', 17 => 'author', 18 => 'order', 19 => 'orderby', 20 => 'year', 21 => 'monthnum', 22 => 'day', 23 => 'hour', 24 => 'minute', 25 => 'second', 26 => 'name', 27 => 'category_name', 28 => 'tag', 29 => 'feed', 30 => 'author_name', 31 => 'pagename', 32 => 'page_id', 33 => 'error', 34 => 'attachment', 35 => 'attachment_id', 36 => 'subpost', 37 => 'subpost_id', 38 => 'preview', 39 => 'robots', 40 => 'favicon', 41 => 'taxonomy', 42 => 'term', 43 => 'cpage', 44 => 'post_type', 45 => 'embed', 46 => 'post_format', 47 => 'rest_route', 48 => 'sitemap', 49 => 'sitemap-subtype', 50 => 'sitemap-stylesheet', 51 => 'graphql']; public $private_query_vars = [0 => 'offset', 1 => 'posts_per_page', 2 => 'posts_per_archive_page', 3 => 'showposts', 4 => 'nopaging', 5 => 'post_type', 6 => 'post_status', 7 => 'category__in', 8 => 'category__not_in', 9 => 'category__and', 10 => 'tag__in', 11 => 'tag__not_in', 12 => 'tag__and', 13 => 'tag_slug__in', 14 => 'tag_slug__and', 15 => 'tag_id', 16 => 'post_mime_type', 17 => 'perm', 18 => 'comments_per_page', 19 => 'post__in', 20 => 'post__not_in', 21 => 'post_parent', 22 => 'post_parent__in', 23 => 'post_parent__not_in', 24 => 'title', 25 => 'fields']; public $extra_query_vars = []; public $query_vars = ['graphql' => 'true']; public $query_string = ''; public $request = 'graphql'; public $matched_rule = 'graphql/?$'; public $matched_query = 'graphql=true'; public $did_permalink = TRUE }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/class-wp-hook.php:308
[23-Feb-2023 01:37:05 UTC] PHP  10. WPGraphQL\Router::process_http_request() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/src/Router.php:275
[23-Feb-2023 01:37:05 UTC] PHP  11. WPGraphQL\Request->execute_http() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/src/Router.php:481
[23-Feb-2023 01:37:05 UTC] PHP  12. GraphQL\Server\StandardServer->executeRequest($parsedBody = class GraphQL\Server\OperationParams { public $queryId = NULL; public $query = 'fragment BlogInfoFragment on GeneralSettings {\n  title\n  description\n  __typename\n}\n\nfragment NavigationMenuItemFragment on MenuItem {\n  id\n  path\n  label\n  parentId\n  cssClasses\n  menu {\n    node {\n      name\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment FeaturedImageFragment on NodeWithFeaturedImage {\n  featuredImage {\n    node {\n      id\n      sourceUrl\n      altText\n      mediaDetails {\n        width\n        height\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }'...; public $operation = 'GetPost'; public $variables = ['asPreview' => TRUE, 'databaseId' => 5, 'headerLocation' => 'PRIMARY', 'footerLocation' => 'FOOTER']; public $extensions = NULL; private $originalInput = ['operationname' => 'GetPost', 'variables' => [...], 'query' => 'fragment BlogInfoFragment on GeneralSettings {\n  title\n  description\n  __typename\n}\n\nfragment NavigationMenuItemFragment on MenuItem {\n  id\n  path\n  label\n  parentId\n  cssClasses\n  menu {\n    node {\n      name\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment FeaturedImageFragment on NodeWithFeaturedImage {\n  featuredImage {\n    node {\n      id\n      sourceUrl\n      altText\n      mediaDetails {\n        width\n        height\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }'...]; private $readOnly = FALSE }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/src/Request.php:713
[23-Feb-2023 01:37:05 UTC] PHP  13. GraphQL\Server\Helper->executeOperation($config = class GraphQL\Server\ServerConfig { private $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; private $context = class WPGraphQL\AppContext { public $root_url = 'http://localhost:10028'; public $viewer = class WP_User { ... }; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... }; public $request = NULL; public $config = [...]; public $currentConnection = NULL; public $connectionArgs = [...]; public $loaders = [...]; public $node_resolver = class WPGraphQL\Data\NodeResolver { ... }; public $connection_query_class = NULL }; private $rootValue = NULL; private $errorFormatter = NULL; private $errorsHandler = NULL; private $debugFlag = 0; private $queryBatching = TRUE; private $validationRules = [0 => class GraphQL\Validator\Rules\ExecutableDefinitions { ... }, 1 => class GraphQL\Validator\Rules\UniqueOperationNames { ... }, 2 => class GraphQL\Validator\Rules\LoneAnonymousOperation { ... }, 3 => class GraphQL\Validator\Rules\SingleFieldSubscription { ... }, 4 => class GraphQL\Validator\Rules\KnownTypeNames { ... }, 5 => class GraphQL\Validator\Rules\FragmentsOnCompositeTypes { ... }, 6 => class GraphQL\Validator\Rules\VariablesAreInputTypes { ... }, 7 => class GraphQL\Validator\Rules\ScalarLeafs { ... }, 8 => class GraphQL\Validator\Rules\FieldsOnCorrectType { ... }, 9 => class GraphQL\Validator\Rules\UniqueFragmentNames { ... }, 10 => class GraphQL\Validator\Rules\KnownFragmentNames { ... }, 11 => class GraphQL\Validator\Rules\NoUnusedFragments { ... }, 12 => class GraphQL\Validator\Rules\PossibleFragmentSpreads { ... }, 13 => class GraphQL\Validator\Rules\NoFragmentCycles { ... }, 14 => class GraphQL\Validator\Rules\UniqueVariableNames { ... }, 15 => class GraphQL\Validator\Rules\NoUndefinedVariables { ... }, 16 => class GraphQL\Validator\Rules\NoUnusedVariables { ... }, 17 => class GraphQL\Validator\Rules\KnownDirectives { ... }, 18 => class GraphQL\Validator\Rules\UniqueDirectivesPerLocation { ... }, 19 => class GraphQL\Validator\Rules\KnownArgumentNames { ... }, 20 => class GraphQL\Validator\Rules\UniqueArgumentNames { ... }, 21 => class GraphQL\Validator\Rules\ValuesOfCorrectType { ... }, 22 => class GraphQL\Validator\Rules\ProvidedRequiredArguments { ... }, 23 => class GraphQL\Validator\Rules\VariablesInAllowedPosition { ... }, 24 => class GraphQL\Validator\Rules\OverlappingFieldsCanBeMerged { ... }, 25 => class GraphQL\Validator\Rules\UniqueInputFieldNames { ... }, 'require_authentication' => class WPGraphQL\Server\ValidationRules\RequireAuthentication { ... }, 'disable_introspection' => class WPGraphQL\Server\ValidationRules\DisableIntrospection { ... }, 'query_depth' => class WPGraphQL\Server\ValidationRules\QueryDepth { ... }]; private $fieldResolver = NULL; private $promiseAdapter = NULL; private $persistentQueryLoader = NULL }, $op = class GraphQL\Server\OperationParams { public $queryId = NULL; public $query = 'fragment BlogInfoFragment on GeneralSettings {\n  title\n  description\n  __typename\n}\n\nfragment NavigationMenuItemFragment on MenuItem {\n  id\n  path\n  label\n  parentId\n  cssClasses\n  menu {\n    node {\n      name\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment FeaturedImageFragment on NodeWithFeaturedImage {\n  featuredImage {\n    node {\n      id\n      sourceUrl\n      altText\n      mediaDetails {\n        width\n        height\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }'...; public $operation = 'GetPost'; public $variables = ['asPreview' => TRUE, 'databaseId' => 5, 'headerLocation' => 'PRIMARY', 'footerLocation' => 'FOOTER']; public $extensions = NULL; private $originalInput = ['operationname' => 'GetPost', 'variables' => [...], 'query' => 'fragment BlogInfoFragment on GeneralSettings {\n  title\n  description\n  __typename\n}\n\nfragment NavigationMenuItemFragment on MenuItem {\n  id\n  path\n  label\n  parentId\n  cssClasses\n  menu {\n    node {\n      name\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment FeaturedImageFragment on NodeWithFeaturedImage {\n  featuredImage {\n    node {\n      id\n      sourceUrl\n      altText\n      mediaDetails {\n        width\n        height\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }'...]; private $readOnly = FALSE }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Server/StandardServer.php:136
[23-Feb-2023 01:37:05 UTC] PHP  14. GraphQL\Executor\Promise\Adapter\SyncPromiseAdapter->wait($promise = class GraphQL\Executor\Promise\Promise { public $adoptedPromise = class GraphQL\Executor\Promise\Adapter\SyncPromise { public $state = 'pending'; public $result = NULL; private $waiting = [...] }; private $adapter = class GraphQL\Executor\Promise\Adapter\SyncPromiseAdapter {  } }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Server/Helper.php:214
[23-Feb-2023 01:37:05 UTC] PHP  15. GraphQL\Executor\Promise\Adapter\SyncPromise::runQueue() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/Promise/Adapter/SyncPromiseAdapter.php:149
[23-Feb-2023 01:37:05 UTC] PHP  16. GraphQL\Executor\Promise\Adapter\SyncPromise->GraphQL\Executor\Promise\Adapter\{closure:/Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/Promise/Adapter/SyncPromise.php:142-163}() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/Promise/Adapter/SyncPromise.php:53
[23-Feb-2023 01:37:05 UTC] PHP  17. GraphQL\Executor\ReferenceExecutor->GraphQL\Executor\{closure:/Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:650-652}($resolved = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/Promise/Adapter/SyncPromise.php:148
[23-Feb-2023 01:37:05 UTC] PHP  18. GraphQL\Executor\ReferenceExecutor->completeValue($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = ['description' => 'The post type', 'connections' => [...], 'interfaces' => [...], 'fields' => [...], 'model' => 'WPGraphQL\\Model\\Post', 'kind' => 'object', 'name' => 'Post']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['author' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'categories' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentCount' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'comments' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'conditionalTags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentType' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentTypeName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'databaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'date' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'dateGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'desiredSlug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'editingLockedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enclosure' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedScripts' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedStylesheets' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'excerpt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImage' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'guid' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'id' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isContentNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isPreview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRestricted' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRevision' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isSticky' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isTermNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lastEditedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'link' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modified' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modifiedGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pingStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pinged' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postFormats' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'preview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisionOf' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisions' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'slug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'status' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'tags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'template' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'templates' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'terms' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'title' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'toPing' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'uri' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['Node' => class WPGraphQL\Type\WPInterfaceType { ... }, 'ContentNode' => class WPGraphQL\Type\WPInterfaceType { ... }, 'UniformResourceIdentifiable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'DatabaseIdentifier' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTemplate' => class WPGraphQL\Type\WPInterfaceType { ... }, 'Previewable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTitle' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentEditor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithAuthor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithFeaturedImage' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithExcerpt' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithComments' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTrackbacks' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithRevisions' => class WPGraphQL\Type\WPInterfaceType { ... }, 'MenuItemLinkable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentBlocks' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'post'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'An object of the post Type. '; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class WPGraphQL\Type\WPObjectType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'post'; public $returnType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'RootQuery'; public $description = 'The root entry point into the Graph'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post'], $result = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:651
[23-Feb-2023 01:37:05 UTC] PHP  19. GraphQL\Executor\ReferenceExecutor->completeObjectValue($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = ['description' => 'The post type', 'connections' => [...], 'interfaces' => [...], 'fields' => [...], 'model' => 'WPGraphQL\\Model\\Post', 'kind' => 'object', 'name' => 'Post']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['author' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'categories' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentCount' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'comments' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'conditionalTags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentType' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentTypeName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'databaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'date' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'dateGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'desiredSlug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'editingLockedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enclosure' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedScripts' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedStylesheets' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'excerpt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImage' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'guid' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'id' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isContentNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isPreview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRestricted' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRevision' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isSticky' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isTermNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lastEditedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'link' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modified' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modifiedGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pingStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pinged' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postFormats' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'preview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisionOf' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisions' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'slug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'status' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'tags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'template' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'templates' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'terms' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'title' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'toPing' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'uri' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['Node' => class WPGraphQL\Type\WPInterfaceType { ... }, 'ContentNode' => class WPGraphQL\Type\WPInterfaceType { ... }, 'UniformResourceIdentifiable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'DatabaseIdentifier' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTemplate' => class WPGraphQL\Type\WPInterfaceType { ... }, 'Previewable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTitle' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentEditor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithAuthor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithFeaturedImage' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithExcerpt' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithComments' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTrackbacks' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithRevisions' => class WPGraphQL\Type\WPInterfaceType { ... }, 'MenuItemLinkable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentBlocks' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'post'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'An object of the post Type. '; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class WPGraphQL\Type\WPObjectType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'post'; public $returnType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'RootQuery'; public $description = 'The root entry point into the Graph'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post'], $result = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:793
[23-Feb-2023 01:37:05 UTC] PHP  20. GraphQL\Executor\ReferenceExecutor->collectAndExecuteSubfields($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = ['description' => 'The post type', 'connections' => [...], 'interfaces' => [...], 'fields' => [...], 'model' => 'WPGraphQL\\Model\\Post', 'kind' => 'object', 'name' => 'Post']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['author' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'categories' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentCount' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'comments' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'conditionalTags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentType' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentTypeName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'databaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'date' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'dateGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'desiredSlug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'editingLockedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enclosure' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedScripts' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedStylesheets' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'excerpt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImage' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'guid' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'id' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isContentNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isPreview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRestricted' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRevision' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isSticky' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isTermNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lastEditedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'link' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modified' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modifiedGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pingStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pinged' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postFormats' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'preview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisionOf' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisions' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'slug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'status' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'tags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'template' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'templates' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'terms' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'title' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'toPing' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'uri' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['Node' => class WPGraphQL\Type\WPInterfaceType { ... }, 'ContentNode' => class WPGraphQL\Type\WPInterfaceType { ... }, 'UniformResourceIdentifiable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'DatabaseIdentifier' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTemplate' => class WPGraphQL\Type\WPInterfaceType { ... }, 'Previewable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTitle' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentEditor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithAuthor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithFeaturedImage' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithExcerpt' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithComments' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTrackbacks' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithRevisions' => class WPGraphQL\Type\WPInterfaceType { ... }, 'MenuItemLinkable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentBlocks' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post'], $result = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1106
[23-Feb-2023 01:37:05 UTC] PHP  21. GraphQL\Executor\ReferenceExecutor->executeFields($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = ['description' => 'The post type', 'connections' => [...], 'interfaces' => [...], 'fields' => [...], 'model' => 'WPGraphQL\\Model\\Post', 'kind' => 'object', 'name' => 'Post']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['author' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'categories' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentCount' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'comments' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'conditionalTags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentType' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentTypeName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'databaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'date' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'dateGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'desiredSlug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'editingLockedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enclosure' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedScripts' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedStylesheets' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'excerpt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImage' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'guid' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'id' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isContentNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isPreview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRestricted' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRevision' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isSticky' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isTermNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lastEditedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'link' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modified' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modifiedGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pingStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pinged' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postFormats' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'preview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisionOf' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisions' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'slug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'status' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'tags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'template' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'templates' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'terms' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'title' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'toPing' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'uri' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['Node' => class WPGraphQL\Type\WPInterfaceType { ... }, 'ContentNode' => class WPGraphQL\Type\WPInterfaceType { ... }, 'UniformResourceIdentifiable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'DatabaseIdentifier' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTemplate' => class WPGraphQL\Type\WPInterfaceType { ... }, 'Previewable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTitle' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentEditor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithAuthor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithFeaturedImage' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithExcerpt' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithComments' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTrackbacks' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithRevisions' => class WPGraphQL\Type\WPInterfaceType { ... }, 'MenuItemLinkable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentBlocks' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }, $path = [0 => 'post'], $fields = class ArrayObject { private $storage = ['title' => class ArrayObject { ... }, 'content' => class ArrayObject { ... }, 'date' => class ArrayObject { ... }, 'author' => class ArrayObject { ... }, 'featuredImage' => class ArrayObject { ... }, '__typename' => class ArrayObject { ... }, 'contentBlocks' => class ArrayObject { ... }] }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1145
[23-Feb-2023 01:37:05 UTC] PHP  22. GraphQL\Executor\ReferenceExecutor->resolveField($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = ['description' => 'The post type', 'connections' => [...], 'interfaces' => [...], 'fields' => [...], 'model' => 'WPGraphQL\\Model\\Post', 'kind' => 'object', 'name' => 'Post']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['author' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'categories' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentCount' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'comments' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'conditionalTags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentType' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentTypeName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'databaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'date' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'dateGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'desiredSlug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'editingLockedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enclosure' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedScripts' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedStylesheets' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'excerpt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImage' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'guid' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'id' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isContentNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isPreview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRestricted' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRevision' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isSticky' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isTermNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lastEditedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'link' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modified' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modifiedGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pingStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pinged' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postFormats' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'preview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisionOf' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisions' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'slug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'status' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'tags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'template' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'templates' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'terms' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'title' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'toPing' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'uri' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['Node' => class WPGraphQL\Type\WPInterfaceType { ... }, 'ContentNode' => class WPGraphQL\Type\WPInterfaceType { ... }, 'UniformResourceIdentifiable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'DatabaseIdentifier' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTemplate' => class WPGraphQL\Type\WPInterfaceType { ... }, 'Previewable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTitle' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentEditor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithAuthor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithFeaturedImage' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithExcerpt' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithComments' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTrackbacks' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithRevisions' => class WPGraphQL\Type\WPInterfaceType { ... }, 'MenuItemLinkable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentBlocks' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post', 1 => 'contentBlocks']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1195
[23-Feb-2023 01:37:05 UTC] PHP  23. GraphQL\Executor\ReferenceExecutor->completeValueCatchingError($returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks'], $result = [0 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f6c341a8f4e'], 2 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f6c341a8f50']]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:557
[23-Feb-2023 01:37:05 UTC] PHP  24. GraphQL\Executor\ReferenceExecutor->completeValue($returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks'], $result = [0 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f6c341a8f4e'], 2 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f6c341a8f50']]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:654
[23-Feb-2023 01:37:05 UTC] PHP  25. GraphQL\Executor\ReferenceExecutor->completeListValue($returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks'], $results = [0 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f6c341a8f4e'], 2 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f6c341a8f50']]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:761
[23-Feb-2023 01:37:05 UTC] PHP  26. GraphQL\Executor\ReferenceExecutor->completeValueCatchingError($returnType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = ['eagerlyLoadType' => TRUE, 'description' => 'Blocks that can be edited to create content and layouts', 'fields' => [...], 'resolveType' => class Closure { virtual $closure = "$this->WPGraphQL\Type\{closure}", ... }, 'kind' => 'interface', 'name' => 'ContentBlock']; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = []; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6c341a8f4e']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:887
[23-Feb-2023 01:37:05 UTC] PHP  27. GraphQL\Executor\ReferenceExecutor->completeValue($returnType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = ['eagerlyLoadType' => TRUE, 'description' => 'Blocks that can be edited to create content and layouts', 'fields' => [...], 'resolveType' => class Closure { virtual $closure = "$this->WPGraphQL\Type\{closure}", ... }, 'kind' => 'interface', 'name' => 'ContentBlock']; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = []; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6c341a8f4e']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:654
[23-Feb-2023 01:37:05 UTC] PHP  28. GraphQL\Executor\ReferenceExecutor->completeAbstractValue($returnType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = ['eagerlyLoadType' => TRUE, 'description' => 'Blocks that can be edited to create content and layouts', 'fields' => [...], 'resolveType' => class Closure { virtual $closure = "$this->WPGraphQL\Type\{closure}", ... }, 'kind' => 'interface', 'name' => 'ContentBlock']; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = []; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6c341a8f4e']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:789
[23-Feb-2023 01:37:05 UTC] PHP  29. GraphQL\Executor\ReferenceExecutor->completeObjectValue($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = ['description' => 'A block used for editing the site', 'interfaces' => [...], 'eagerlyLoadType' => TRUE, 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCode']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'attributes' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['ContentBlock' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6c341a8f4e']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:974
[23-Feb-2023 01:37:05 UTC] PHP  30. GraphQL\Executor\ReferenceExecutor->collectAndExecuteSubfields($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = ['description' => 'A block used for editing the site', 'interfaces' => [...], 'eagerlyLoadType' => TRUE, 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCode']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'attributes' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['ContentBlock' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6c341a8f4e']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1106
[23-Feb-2023 01:37:05 UTC] PHP  31. GraphQL\Executor\ReferenceExecutor->executeFields($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = ['description' => 'A block used for editing the site', 'interfaces' => [...], 'eagerlyLoadType' => TRUE, 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCode']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'attributes' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['ContentBlock' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6c341a8f4e'], $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0], $fields = class ArrayObject { private $storage = ['__typename' => class ArrayObject { ... }, 'renderedHtml' => class ArrayObject { ... }, 'id' => class ArrayObject { ... }, 'parentId' => class ArrayObject { ... }, 'attributes' => class ArrayObject { ... }] }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1145
[23-Feb-2023 01:37:05 UTC] PHP  32. GraphQL\Executor\ReferenceExecutor->resolveField($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = ['description' => 'A block used for editing the site', 'interfaces' => [...], 'eagerlyLoadType' => TRUE, 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCode']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'attributes' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['ContentBlock' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6c341a8f4e'], $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1195
[23-Feb-2023 01:37:05 UTC] PHP  33. GraphQL\Executor\ReferenceExecutor->completeValueCatchingError($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'attributes'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'Attributes of the %s Block Type'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class WPGraphQL\Type\WPObjectType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'attributes'; public $returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes'], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6c341a8f4e']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:557
[23-Feb-2023 01:37:05 UTC] PHP  34. GraphQL\Executor\ReferenceExecutor->completeValue($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'attributes'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'Attributes of the %s Block Type'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class WPGraphQL\Type\WPObjectType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'attributes'; public $returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes'], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6c341a8f4e']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:654
[23-Feb-2023 01:37:05 UTC] PHP  35. GraphQL\Executor\ReferenceExecutor->completeObjectValue($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'attributes'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'Attributes of the %s Block Type'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class WPGraphQL\Type\WPObjectType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'attributes'; public $returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes'], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6c341a8f4e']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:793
[23-Feb-2023 01:37:05 UTC] PHP  36. GraphQL\Executor\ReferenceExecutor->collectAndExecuteSubfields($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes'], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6c341a8f4e']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1106
[23-Feb-2023 01:37:05 UTC] PHP  37. GraphQL\Executor\ReferenceExecutor->executeFields($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6c341a8f4e'], $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes'], $fields = class ArrayObject { private $storage = ['borderColor' => class ArrayObject { ... }, 'backgroundColor' => class ArrayObject { ... }, 'content' => class ArrayObject { ... }, 'style' => class ArrayObject { ... }, 'textColor' => class ArrayObject { ... }, 'fontSize' => class ArrayObject { ... }, 'fontFamily' => class ArrayObject { ... }, '__typename' => class ArrayObject { ... }] }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1145
[23-Feb-2023 01:37:05 UTC] PHP  38. GraphQL\Executor\ReferenceExecutor->resolveField($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6c341a8f4e'], $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes', 4 => 'content']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1195
[23-Feb-2023 01:37:05 UTC] PHP  39. GraphQL\Executor\ReferenceExecutor->resolveFieldValueOrError($fieldDef = class GraphQL\Type\Definition\FieldDefinition { public $name = 'content'; public $args = []; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", public $static = [...]; public $parameter = [...] }; public $mapFn = NULL; public $description = 'The &quot;content&quot; field on the &quot;CoreCode&quot; block'; public $deprecationReason = NULL; public $astNode = NULL; public $config = ['type' => class Closure { virtual $closure = "$this->WPGraphQL\Registry\{closure}", ... }, 'description' => 'The "content" field on the "CoreCode" block', 'resolve' => class Closure { virtual $closure = "$this->WPGraphQL\ContentBlocks\Blocks\{closure}", ... }, 'name' => 'content']; private $type = class GraphQL\Type\Definition\StringType { public $name = 'String'; public $description = 'The `String` scalar type represents textual data, represented as UTF-8\ncharacter sequences. The String type is most often used by GraphQL to\nrepresent free-form human-readable text.'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }, $fieldNode = class GraphQL\Language\AST\FieldNode { public $loc = class GraphQL\Language\AST\Location { public $start = 629; public $end = 636; public $startToken = class GraphQL\Language\Token { ... }; public $endToken = class GraphQL\Language\Token { ... }; public $source = class GraphQL\Language\Source { ... } }; public $kind = 'Field'; public $name = class GraphQL\Language\AST\NameNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'Name'; public $value = 'content' }; public $alias = NULL; public $arguments = class GraphQL\Language\AST\NodeList { private $nodes = [...] }; public $directives = class GraphQL\Language\AST\NodeList { private $nodes = [...] }; public $selectionSet = NULL }, $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", public $static = ['field_resolver' => class Closure { virtual $closure = "$this->WPGraphQL\ContentBlocks\Blocks\{closure}", ... }, 'type_name' => 'CoreCodeAttributes', 'field_key' => 'content', 'field' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $parameter = ['$source' => '<required>', '$args' => '<required>', '$context' => '<required>', '$info' => '<required>'] }, $rootValue = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6c341a8f4e'], $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'content'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'The &quot;content&quot; field on the &quot;CoreCode&quot; block'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\StringType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'content'; public $returnType = class GraphQL\Type\Definition\StringType { public $name = 'String'; public $description = 'The `String` scalar type represents textual data, represented as UTF-8\ncharacter sequences. The String type is most often used by GraphQL to\nrepresent free-form human-readable text.'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes', 4 => 'content']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:550
[23-Feb-2023 01:37:05 UTC] PHP  40. WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure:/Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/src/Utils/InstrumentSchema.php:100-188}($source = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6c341a8f4e'], $args = [], $context = class WPGraphQL\AppContext { public $root_url = 'http://localhost:10028'; public $viewer = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] }; public $request = NULL; public $config = ['registered_editor_blocks' => [...]]; public $currentConnection = NULL; public $connectionArgs = []; public $loaders = ['comment_author' => class WPGraphQL\Data\Loader\CommentAuthorLoader { ... }, 'comment' => class WPGraphQL\Data\Loader\CommentLoader { ... }, 'enqueued_script' => class WPGraphQL\Data\Loader\EnqueuedScriptLoader { ... }, 'enqueued_stylesheet' => class WPGraphQL\Data\Loader\EnqueuedStylesheetLoader { ... }, 'plugin' => class WPGraphQL\Data\Loader\PluginLoader { ... }, 'nav_menu_item' => class WPGraphQL\Data\Loader\PostObjectLoader { ... }, 'post' => class WPGraphQL\Data\Loader\PostObjectLoader { ... }, 'post_type' => class WPGraphQL\Data\Loader\PostTypeLoader { ... }, 'taxonomy' => class WPGraphQL\Data\Loader\TaxonomyLoader { ... }, 'term' => class WPGraphQL\Data\Loader\TermObjectLoader { ... }, 'theme' => class WPGraphQL\Data\Loader\ThemeLoader { ... }, 'user' => class WPGraphQL\Data\Loader\UserLoader { ... }, 'user_role' => class WPGraphQL\Data\Loader\UserRoleLoader { ... }]; public $node_resolver = class WPGraphQL\Data\NodeResolver { protected $wp = class WP { ... }; protected $context = ... }; public $connection_query_class = NULL }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'content'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'The &quot;content&quot; field on the &quot;CoreCode&quot; block'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\StringType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'content'; public $returnType = class GraphQL\Type\Definition\StringType { public $name = 'String'; public $description = 'The `String` scalar type represents textual data, represented as UTF-8\ncharacter sequences. The String type is most often used by GraphQL to\nrepresent free-form human-readable text.'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes', 4 => 'content']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:623
[23-Feb-2023 01:37:05 UTC] PHP  41. WPGraphQL\ContentBlocks\Blocks\Block->WPGraphQL\ContentBlocks\Blocks\{closure:/Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql-content-blocks-main/includes/Blocks/Block.php:161-163}($block = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6c341a8f4e'], $args = [], $context = class WPGraphQL\AppContext { public $root_url = 'http://localhost:10028'; public $viewer = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] }; public $request = NULL; public $config = ['registered_editor_blocks' => [...]]; public $currentConnection = NULL; public $connectionArgs = []; public $loaders = ['comment_author' => class WPGraphQL\Data\Loader\CommentAuthorLoader { ... }, 'comment' => class WPGraphQL\Data\Loader\CommentLoader { ... }, 'enqueued_script' => class WPGraphQL\Data\Loader\EnqueuedScriptLoader { ... }, 'enqueued_stylesheet' => class WPGraphQL\Data\Loader\EnqueuedStylesheetLoader { ... }, 'plugin' => class WPGraphQL\Data\Loader\PluginLoader { ... }, 'nav_menu_item' => class WPGraphQL\Data\Loader\PostObjectLoader { ... }, 'post' => class WPGraphQL\Data\Loader\PostObjectLoader { ... }, 'post_type' => class WPGraphQL\Data\Loader\PostTypeLoader { ... }, 'taxonomy' => class WPGraphQL\Data\Loader\TaxonomyLoader { ... }, 'term' => class WPGraphQL\Data\Loader\TermObjectLoader { ... }, 'theme' => class WPGraphQL\Data\Loader\ThemeLoader { ... }, 'user' => class WPGraphQL\Data\Loader\UserLoader { ... }, 'user_role' => class WPGraphQL\Data\Loader\UserRoleLoader { ... }]; public $node_resolver = class WPGraphQL\Data\NodeResolver { protected $wp = class WP { ... }; protected $context = ... }; public $connection_query_class = NULL }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'content'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'The &quot;content&quot; field on the &quot;CoreCode&quot; block'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\StringType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'content'; public $returnType = class GraphQL\Type\Definition\StringType { public $name = 'String'; public $description = 'The `String` scalar type represents textual data, represented as UTF-8\ncharacter sequences. The String type is most often used by GraphQL to\nrepresent free-form human-readable text.'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes', 4 => 'content']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/src/Utils/InstrumentSchema.php:151
[23-Feb-2023 01:37:05 UTC] PHP  42. WPGraphQL\ContentBlocks\Blocks\Block->resolve_block_attributes($block = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6c341a8f4e'], $attribute_name = 'content', $attribute_config = ['type' => 'string', 'source' => 'html', 'selector' => 'code']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql-content-blocks-main/includes/Blocks/Block.php:162
[23-Feb-2023 01:37:05 UTC] PHP Warning:  Undefined array key "default" in /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql-content-blocks-main/includes/Blocks/Block.php on line 214
[23-Feb-2023 01:37:05 UTC] PHP Stack trace:
[23-Feb-2023 01:37:05 UTC] PHP   1. {main}() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/index.php:0
[23-Feb-2023 01:37:05 UTC] PHP   2. require() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/index.php:17
[23-Feb-2023 01:37:05 UTC] PHP   3. wp($query_vars = *uninitialized*) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-blog-header.php:16
[23-Feb-2023 01:37:05 UTC] PHP   4. WP->main($query_args = '') /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/functions.php:1332
[23-Feb-2023 01:37:05 UTC] PHP   5. WP->parse_request($extra_query_vars = '') /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/class-wp.php:780
[23-Feb-2023 01:37:05 UTC] PHP   6. do_action_ref_array($hook_name = 'parse_request', $args = [0 => class WP { public $public_query_vars = [...]; public $private_query_vars = [...]; public $extra_query_vars = [...]; public $query_vars = [...]; public $query_string = ''; public $request = 'graphql'; public $matched_rule = 'graphql/?$'; public $matched_query = 'graphql=true'; public $did_permalink = TRUE }]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/class-wp.php:399
[23-Feb-2023 01:37:05 UTC] PHP   7. WP_Hook->do_action($args = [0 => class WP { public $public_query_vars = [...]; public $private_query_vars = [...]; public $extra_query_vars = [...]; public $query_vars = [...]; public $query_string = ''; public $request = 'graphql'; public $matched_rule = 'graphql/?$'; public $matched_query = 'graphql=true'; public $did_permalink = TRUE }]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/plugin.php:565
[23-Feb-2023 01:37:05 UTC] PHP   8. WP_Hook->apply_filters($value = '', $args = [0 => class WP { public $public_query_vars = [...]; public $private_query_vars = [...]; public $extra_query_vars = [...]; public $query_vars = [...]; public $query_string = ''; public $request = 'graphql'; public $matched_rule = 'graphql/?$'; public $matched_query = 'graphql=true'; public $did_permalink = TRUE }]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/class-wp-hook.php:332
[23-Feb-2023 01:37:05 UTC] PHP   9. WPGraphQL\Router::resolve_http_request(class WP { public $public_query_vars = [0 => 'm', 1 => 'p', 2 => 'posts', 3 => 'w', 4 => 'cat', 5 => 'withcomments', 6 => 'withoutcomments', 7 => 's', 8 => 'search', 9 => 'exact', 10 => 'sentence', 11 => 'calendar', 12 => 'page', 13 => 'paged', 14 => 'more', 15 => 'tb', 16 => 'pb', 17 => 'author', 18 => 'order', 19 => 'orderby', 20 => 'year', 21 => 'monthnum', 22 => 'day', 23 => 'hour', 24 => 'minute', 25 => 'second', 26 => 'name', 27 => 'category_name', 28 => 'tag', 29 => 'feed', 30 => 'author_name', 31 => 'pagename', 32 => 'page_id', 33 => 'error', 34 => 'attachment', 35 => 'attachment_id', 36 => 'subpost', 37 => 'subpost_id', 38 => 'preview', 39 => 'robots', 40 => 'favicon', 41 => 'taxonomy', 42 => 'term', 43 => 'cpage', 44 => 'post_type', 45 => 'embed', 46 => 'post_format', 47 => 'rest_route', 48 => 'sitemap', 49 => 'sitemap-subtype', 50 => 'sitemap-stylesheet', 51 => 'graphql']; public $private_query_vars = [0 => 'offset', 1 => 'posts_per_page', 2 => 'posts_per_archive_page', 3 => 'showposts', 4 => 'nopaging', 5 => 'post_type', 6 => 'post_status', 7 => 'category__in', 8 => 'category__not_in', 9 => 'category__and', 10 => 'tag__in', 11 => 'tag__not_in', 12 => 'tag__and', 13 => 'tag_slug__in', 14 => 'tag_slug__and', 15 => 'tag_id', 16 => 'post_mime_type', 17 => 'perm', 18 => 'comments_per_page', 19 => 'post__in', 20 => 'post__not_in', 21 => 'post_parent', 22 => 'post_parent__in', 23 => 'post_parent__not_in', 24 => 'title', 25 => 'fields']; public $extra_query_vars = []; public $query_vars = ['graphql' => 'true']; public $query_string = ''; public $request = 'graphql'; public $matched_rule = 'graphql/?$'; public $matched_query = 'graphql=true'; public $did_permalink = TRUE }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/class-wp-hook.php:308
[23-Feb-2023 01:37:05 UTC] PHP  10. WPGraphQL\Router::process_http_request() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/src/Router.php:275
[23-Feb-2023 01:37:05 UTC] PHP  11. WPGraphQL\Request->execute_http() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/src/Router.php:481
[23-Feb-2023 01:37:05 UTC] PHP  12. GraphQL\Server\StandardServer->executeRequest($parsedBody = class GraphQL\Server\OperationParams { public $queryId = NULL; public $query = 'fragment BlogInfoFragment on GeneralSettings {\n  title\n  description\n  __typename\n}\n\nfragment NavigationMenuItemFragment on MenuItem {\n  id\n  path\n  label\n  parentId\n  cssClasses\n  menu {\n    node {\n      name\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment FeaturedImageFragment on NodeWithFeaturedImage {\n  featuredImage {\n    node {\n      id\n      sourceUrl\n      altText\n      mediaDetails {\n        width\n        height\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }'...; public $operation = 'GetPost'; public $variables = ['asPreview' => TRUE, 'databaseId' => 5, 'headerLocation' => 'PRIMARY', 'footerLocation' => 'FOOTER']; public $extensions = NULL; private $originalInput = ['operationname' => 'GetPost', 'variables' => [...], 'query' => 'fragment BlogInfoFragment on GeneralSettings {\n  title\n  description\n  __typename\n}\n\nfragment NavigationMenuItemFragment on MenuItem {\n  id\n  path\n  label\n  parentId\n  cssClasses\n  menu {\n    node {\n      name\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment FeaturedImageFragment on NodeWithFeaturedImage {\n  featuredImage {\n    node {\n      id\n      sourceUrl\n      altText\n      mediaDetails {\n        width\n        height\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }'...]; private $readOnly = FALSE }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/src/Request.php:713
[23-Feb-2023 01:37:05 UTC] PHP  13. GraphQL\Server\Helper->executeOperation($config = class GraphQL\Server\ServerConfig { private $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; private $context = class WPGraphQL\AppContext { public $root_url = 'http://localhost:10028'; public $viewer = class WP_User { ... }; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... }; public $request = NULL; public $config = [...]; public $currentConnection = NULL; public $connectionArgs = [...]; public $loaders = [...]; public $node_resolver = class WPGraphQL\Data\NodeResolver { ... }; public $connection_query_class = NULL }; private $rootValue = NULL; private $errorFormatter = NULL; private $errorsHandler = NULL; private $debugFlag = 0; private $queryBatching = TRUE; private $validationRules = [0 => class GraphQL\Validator\Rules\ExecutableDefinitions { ... }, 1 => class GraphQL\Validator\Rules\UniqueOperationNames { ... }, 2 => class GraphQL\Validator\Rules\LoneAnonymousOperation { ... }, 3 => class GraphQL\Validator\Rules\SingleFieldSubscription { ... }, 4 => class GraphQL\Validator\Rules\KnownTypeNames { ... }, 5 => class GraphQL\Validator\Rules\FragmentsOnCompositeTypes { ... }, 6 => class GraphQL\Validator\Rules\VariablesAreInputTypes { ... }, 7 => class GraphQL\Validator\Rules\ScalarLeafs { ... }, 8 => class GraphQL\Validator\Rules\FieldsOnCorrectType { ... }, 9 => class GraphQL\Validator\Rules\UniqueFragmentNames { ... }, 10 => class GraphQL\Validator\Rules\KnownFragmentNames { ... }, 11 => class GraphQL\Validator\Rules\NoUnusedFragments { ... }, 12 => class GraphQL\Validator\Rules\PossibleFragmentSpreads { ... }, 13 => class GraphQL\Validator\Rules\NoFragmentCycles { ... }, 14 => class GraphQL\Validator\Rules\UniqueVariableNames { ... }, 15 => class GraphQL\Validator\Rules\NoUndefinedVariables { ... }, 16 => class GraphQL\Validator\Rules\NoUnusedVariables { ... }, 17 => class GraphQL\Validator\Rules\KnownDirectives { ... }, 18 => class GraphQL\Validator\Rules\UniqueDirectivesPerLocation { ... }, 19 => class GraphQL\Validator\Rules\KnownArgumentNames { ... }, 20 => class GraphQL\Validator\Rules\UniqueArgumentNames { ... }, 21 => class GraphQL\Validator\Rules\ValuesOfCorrectType { ... }, 22 => class GraphQL\Validator\Rules\ProvidedRequiredArguments { ... }, 23 => class GraphQL\Validator\Rules\VariablesInAllowedPosition { ... }, 24 => class GraphQL\Validator\Rules\OverlappingFieldsCanBeMerged { ... }, 25 => class GraphQL\Validator\Rules\UniqueInputFieldNames { ... }, 'require_authentication' => class WPGraphQL\Server\ValidationRules\RequireAuthentication { ... }, 'disable_introspection' => class WPGraphQL\Server\ValidationRules\DisableIntrospection { ... }, 'query_depth' => class WPGraphQL\Server\ValidationRules\QueryDepth { ... }]; private $fieldResolver = NULL; private $promiseAdapter = NULL; private $persistentQueryLoader = NULL }, $op = class GraphQL\Server\OperationParams { public $queryId = NULL; public $query = 'fragment BlogInfoFragment on GeneralSettings {\n  title\n  description\n  __typename\n}\n\nfragment NavigationMenuItemFragment on MenuItem {\n  id\n  path\n  label\n  parentId\n  cssClasses\n  menu {\n    node {\n      name\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment FeaturedImageFragment on NodeWithFeaturedImage {\n  featuredImage {\n    node {\n      id\n      sourceUrl\n      altText\n      mediaDetails {\n        width\n        height\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }'...; public $operation = 'GetPost'; public $variables = ['asPreview' => TRUE, 'databaseId' => 5, 'headerLocation' => 'PRIMARY', 'footerLocation' => 'FOOTER']; public $extensions = NULL; private $originalInput = ['operationname' => 'GetPost', 'variables' => [...], 'query' => 'fragment BlogInfoFragment on GeneralSettings {\n  title\n  description\n  __typename\n}\n\nfragment NavigationMenuItemFragment on MenuItem {\n  id\n  path\n  label\n  parentId\n  cssClasses\n  menu {\n    node {\n      name\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment FeaturedImageFragment on NodeWithFeaturedImage {\n  featuredImage {\n    node {\n      id\n      sourceUrl\n      altText\n      mediaDetails {\n        width\n        height\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }'...]; private $readOnly = FALSE }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Server/StandardServer.php:136
[23-Feb-2023 01:37:05 UTC] PHP  14. GraphQL\Executor\Promise\Adapter\SyncPromiseAdapter->wait($promise = class GraphQL\Executor\Promise\Promise { public $adoptedPromise = class GraphQL\Executor\Promise\Adapter\SyncPromise { public $state = 'pending'; public $result = NULL; private $waiting = [...] }; private $adapter = class GraphQL\Executor\Promise\Adapter\SyncPromiseAdapter {  } }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Server/Helper.php:214
[23-Feb-2023 01:37:05 UTC] PHP  15. GraphQL\Executor\Promise\Adapter\SyncPromise::runQueue() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/Promise/Adapter/SyncPromiseAdapter.php:149
[23-Feb-2023 01:37:05 UTC] PHP  16. GraphQL\Executor\Promise\Adapter\SyncPromise->GraphQL\Executor\Promise\Adapter\{closure:/Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/Promise/Adapter/SyncPromise.php:142-163}() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/Promise/Adapter/SyncPromise.php:53
[23-Feb-2023 01:37:05 UTC] PHP  17. GraphQL\Executor\ReferenceExecutor->GraphQL\Executor\{closure:/Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:650-652}($resolved = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/Promise/Adapter/SyncPromise.php:148
[23-Feb-2023 01:37:05 UTC] PHP  18. GraphQL\Executor\ReferenceExecutor->completeValue($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = ['description' => 'The post type', 'connections' => [...], 'interfaces' => [...], 'fields' => [...], 'model' => 'WPGraphQL\\Model\\Post', 'kind' => 'object', 'name' => 'Post']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['author' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'categories' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentCount' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'comments' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'conditionalTags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentType' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentTypeName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'databaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'date' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'dateGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'desiredSlug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'editingLockedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enclosure' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedScripts' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedStylesheets' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'excerpt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImage' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'guid' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'id' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isContentNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isPreview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRestricted' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRevision' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isSticky' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isTermNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lastEditedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'link' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modified' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modifiedGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pingStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pinged' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postFormats' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'preview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisionOf' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisions' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'slug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'status' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'tags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'template' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'templates' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'terms' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'title' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'toPing' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'uri' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['Node' => class WPGraphQL\Type\WPInterfaceType { ... }, 'ContentNode' => class WPGraphQL\Type\WPInterfaceType { ... }, 'UniformResourceIdentifiable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'DatabaseIdentifier' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTemplate' => class WPGraphQL\Type\WPInterfaceType { ... }, 'Previewable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTitle' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentEditor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithAuthor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithFeaturedImage' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithExcerpt' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithComments' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTrackbacks' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithRevisions' => class WPGraphQL\Type\WPInterfaceType { ... }, 'MenuItemLinkable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentBlocks' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'post'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'An object of the post Type. '; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class WPGraphQL\Type\WPObjectType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'post'; public $returnType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'RootQuery'; public $description = 'The root entry point into the Graph'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post'], $result = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:651
[23-Feb-2023 01:37:05 UTC] PHP  19. GraphQL\Executor\ReferenceExecutor->completeObjectValue($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = ['description' => 'The post type', 'connections' => [...], 'interfaces' => [...], 'fields' => [...], 'model' => 'WPGraphQL\\Model\\Post', 'kind' => 'object', 'name' => 'Post']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['author' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'categories' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentCount' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'comments' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'conditionalTags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentType' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentTypeName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'databaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'date' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'dateGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'desiredSlug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'editingLockedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enclosure' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedScripts' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedStylesheets' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'excerpt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImage' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'guid' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'id' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isContentNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isPreview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRestricted' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRevision' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isSticky' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isTermNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lastEditedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'link' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modified' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modifiedGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pingStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pinged' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postFormats' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'preview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisionOf' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisions' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'slug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'status' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'tags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'template' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'templates' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'terms' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'title' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'toPing' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'uri' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['Node' => class WPGraphQL\Type\WPInterfaceType { ... }, 'ContentNode' => class WPGraphQL\Type\WPInterfaceType { ... }, 'UniformResourceIdentifiable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'DatabaseIdentifier' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTemplate' => class WPGraphQL\Type\WPInterfaceType { ... }, 'Previewable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTitle' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentEditor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithAuthor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithFeaturedImage' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithExcerpt' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithComments' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTrackbacks' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithRevisions' => class WPGraphQL\Type\WPInterfaceType { ... }, 'MenuItemLinkable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentBlocks' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'post'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'An object of the post Type. '; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class WPGraphQL\Type\WPObjectType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'post'; public $returnType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'RootQuery'; public $description = 'The root entry point into the Graph'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post'], $result = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:793
[23-Feb-2023 01:37:05 UTC] PHP  20. GraphQL\Executor\ReferenceExecutor->collectAndExecuteSubfields($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = ['description' => 'The post type', 'connections' => [...], 'interfaces' => [...], 'fields' => [...], 'model' => 'WPGraphQL\\Model\\Post', 'kind' => 'object', 'name' => 'Post']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['author' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'categories' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentCount' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'comments' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'conditionalTags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentType' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentTypeName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'databaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'date' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'dateGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'desiredSlug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'editingLockedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enclosure' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedScripts' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedStylesheets' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'excerpt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImage' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'guid' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'id' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isContentNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isPreview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRestricted' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRevision' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isSticky' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isTermNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lastEditedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'link' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modified' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modifiedGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pingStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pinged' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postFormats' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'preview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisionOf' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisions' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'slug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'status' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'tags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'template' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'templates' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'terms' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'title' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'toPing' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'uri' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['Node' => class WPGraphQL\Type\WPInterfaceType { ... }, 'ContentNode' => class WPGraphQL\Type\WPInterfaceType { ... }, 'UniformResourceIdentifiable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'DatabaseIdentifier' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTemplate' => class WPGraphQL\Type\WPInterfaceType { ... }, 'Previewable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTitle' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentEditor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithAuthor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithFeaturedImage' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithExcerpt' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithComments' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTrackbacks' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithRevisions' => class WPGraphQL\Type\WPInterfaceType { ... }, 'MenuItemLinkable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentBlocks' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post'], $result = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1106
[23-Feb-2023 01:37:05 UTC] PHP  21. GraphQL\Executor\ReferenceExecutor->executeFields($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = ['description' => 'The post type', 'connections' => [...], 'interfaces' => [...], 'fields' => [...], 'model' => 'WPGraphQL\\Model\\Post', 'kind' => 'object', 'name' => 'Post']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['author' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'categories' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentCount' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'comments' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'conditionalTags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentType' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentTypeName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'databaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'date' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'dateGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'desiredSlug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'editingLockedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enclosure' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedScripts' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedStylesheets' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'excerpt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImage' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'guid' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'id' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isContentNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isPreview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRestricted' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRevision' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isSticky' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isTermNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lastEditedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'link' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modified' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modifiedGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pingStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pinged' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postFormats' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'preview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisionOf' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisions' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'slug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'status' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'tags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'template' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'templates' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'terms' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'title' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'toPing' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'uri' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['Node' => class WPGraphQL\Type\WPInterfaceType { ... }, 'ContentNode' => class WPGraphQL\Type\WPInterfaceType { ... }, 'UniformResourceIdentifiable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'DatabaseIdentifier' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTemplate' => class WPGraphQL\Type\WPInterfaceType { ... }, 'Previewable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTitle' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentEditor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithAuthor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithFeaturedImage' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithExcerpt' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithComments' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTrackbacks' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithRevisions' => class WPGraphQL\Type\WPInterfaceType { ... }, 'MenuItemLinkable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentBlocks' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }, $path = [0 => 'post'], $fields = class ArrayObject { private $storage = ['title' => class ArrayObject { ... }, 'content' => class ArrayObject { ... }, 'date' => class ArrayObject { ... }, 'author' => class ArrayObject { ... }, 'featuredImage' => class ArrayObject { ... }, '__typename' => class ArrayObject { ... }, 'contentBlocks' => class ArrayObject { ... }] }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1145
[23-Feb-2023 01:37:05 UTC] PHP  22. GraphQL\Executor\ReferenceExecutor->resolveField($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = ['description' => 'The post type', 'connections' => [...], 'interfaces' => [...], 'fields' => [...], 'model' => 'WPGraphQL\\Model\\Post', 'kind' => 'object', 'name' => 'Post']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['author' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'categories' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentCount' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'comments' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'conditionalTags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentType' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentTypeName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'databaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'date' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'dateGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'desiredSlug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'editingLockedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enclosure' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedScripts' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedStylesheets' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'excerpt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImage' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'guid' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'id' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isContentNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isPreview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRestricted' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRevision' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isSticky' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isTermNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lastEditedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'link' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modified' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modifiedGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pingStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pinged' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postFormats' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'preview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisionOf' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisions' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'slug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'status' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'tags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'template' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'templates' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'terms' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'title' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'toPing' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'uri' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['Node' => class WPGraphQL\Type\WPInterfaceType { ... }, 'ContentNode' => class WPGraphQL\Type\WPInterfaceType { ... }, 'UniformResourceIdentifiable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'DatabaseIdentifier' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTemplate' => class WPGraphQL\Type\WPInterfaceType { ... }, 'Previewable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTitle' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentEditor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithAuthor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithFeaturedImage' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithExcerpt' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithComments' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTrackbacks' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithRevisions' => class WPGraphQL\Type\WPInterfaceType { ... }, 'MenuItemLinkable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentBlocks' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post', 1 => 'contentBlocks']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1195
[23-Feb-2023 01:37:05 UTC] PHP  23. GraphQL\Executor\ReferenceExecutor->completeValueCatchingError($returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks'], $result = [0 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f6c341a8f4e'], 2 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f6c341a8f50']]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:557
[23-Feb-2023 01:37:05 UTC] PHP  24. GraphQL\Executor\ReferenceExecutor->completeValue($returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks'], $result = [0 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f6c341a8f4e'], 2 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f6c341a8f50']]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:654
[23-Feb-2023 01:37:05 UTC] PHP  25. GraphQL\Executor\ReferenceExecutor->completeListValue($returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks'], $results = [0 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f6c341a8f4e'], 2 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f6c341a8f50']]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:761
[23-Feb-2023 01:37:05 UTC] PHP  26. GraphQL\Executor\ReferenceExecutor->completeValueCatchingError($returnType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = ['eagerlyLoadType' => TRUE, 'description' => 'Blocks that can be edited to create content and layouts', 'fields' => [...], 'resolveType' => class Closure { virtual $closure = "$this->WPGraphQL\Type\{closure}", ... }, 'kind' => 'interface', 'name' => 'ContentBlock']; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = []; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6c341a8f50']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:887
[23-Feb-2023 01:37:05 UTC] PHP  27. GraphQL\Executor\ReferenceExecutor->completeValue($returnType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = ['eagerlyLoadType' => TRUE, 'description' => 'Blocks that can be edited to create content and layouts', 'fields' => [...], 'resolveType' => class Closure { virtual $closure = "$this->WPGraphQL\Type\{closure}", ... }, 'kind' => 'interface', 'name' => 'ContentBlock']; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = []; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6c341a8f50']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:654
[23-Feb-2023 01:37:05 UTC] PHP  28. GraphQL\Executor\ReferenceExecutor->completeAbstractValue($returnType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = ['eagerlyLoadType' => TRUE, 'description' => 'Blocks that can be edited to create content and layouts', 'fields' => [...], 'resolveType' => class Closure { virtual $closure = "$this->WPGraphQL\Type\{closure}", ... }, 'kind' => 'interface', 'name' => 'ContentBlock']; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = []; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6c341a8f50']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:789
[23-Feb-2023 01:37:05 UTC] PHP  29. GraphQL\Executor\ReferenceExecutor->completeObjectValue($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = ['description' => 'A block used for editing the site', 'interfaces' => [...], 'eagerlyLoadType' => TRUE, 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCode']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'attributes' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['ContentBlock' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6c341a8f50']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:974
[23-Feb-2023 01:37:05 UTC] PHP  30. GraphQL\Executor\ReferenceExecutor->collectAndExecuteSubfields($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = ['description' => 'A block used for editing the site', 'interfaces' => [...], 'eagerlyLoadType' => TRUE, 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCode']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'attributes' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['ContentBlock' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6c341a8f50']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1106
[23-Feb-2023 01:37:05 UTC] PHP  31. GraphQL\Executor\ReferenceExecutor->executeFields($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = ['description' => 'A block used for editing the site', 'interfaces' => [...], 'eagerlyLoadType' => TRUE, 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCode']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'attributes' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['ContentBlock' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6c341a8f50'], $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1], $fields = class ArrayObject { private $storage = ['__typename' => class ArrayObject { ... }, 'renderedHtml' => class ArrayObject { ... }, 'id' => class ArrayObject { ... }, 'parentId' => class ArrayObject { ... }, 'attributes' => class ArrayObject { ... }] }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1145
[23-Feb-2023 01:37:05 UTC] PHP  32. GraphQL\Executor\ReferenceExecutor->resolveField($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = ['description' => 'A block used for editing the site', 'interfaces' => [...], 'eagerlyLoadType' => TRUE, 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCode']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'attributes' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['ContentBlock' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6c341a8f50'], $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1195
[23-Feb-2023 01:37:05 UTC] PHP  33. GraphQL\Executor\ReferenceExecutor->completeValueCatchingError($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'attributes'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'Attributes of the %s Block Type'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class WPGraphQL\Type\WPObjectType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'attributes'; public $returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes'], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6c341a8f50']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:557
[23-Feb-2023 01:37:05 UTC] PHP  34. GraphQL\Executor\ReferenceExecutor->completeValue($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'attributes'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'Attributes of the %s Block Type'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class WPGraphQL\Type\WPObjectType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'attributes'; public $returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes'], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6c341a8f50']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:654
[23-Feb-2023 01:37:05 UTC] PHP  35. GraphQL\Executor\ReferenceExecutor->completeObjectValue($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'attributes'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'Attributes of the %s Block Type'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class WPGraphQL\Type\WPObjectType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'attributes'; public $returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes'], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6c341a8f50']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:793
[23-Feb-2023 01:37:05 UTC] PHP  36. GraphQL\Executor\ReferenceExecutor->collectAndExecuteSubfields($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes'], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6c341a8f50']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1106
[23-Feb-2023 01:37:05 UTC] PHP  37. GraphQL\Executor\ReferenceExecutor->executeFields($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6c341a8f50'], $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes'], $fields = class ArrayObject { private $storage = ['borderColor' => class ArrayObject { ... }, 'backgroundColor' => class ArrayObject { ... }, 'content' => class ArrayObject { ... }, 'style' => class ArrayObject { ... }, 'textColor' => class ArrayObject { ... }, 'fontSize' => class ArrayObject { ... }, 'fontFamily' => class ArrayObject { ... }, '__typename' => class ArrayObject { ... }] }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1145
[23-Feb-2023 01:37:05 UTC] PHP  38. GraphQL\Executor\ReferenceExecutor->resolveField($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6c341a8f50'], $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes', 4 => 'content']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1195
[23-Feb-2023 01:37:05 UTC] PHP  39. GraphQL\Executor\ReferenceExecutor->resolveFieldValueOrError($fieldDef = class GraphQL\Type\Definition\FieldDefinition { public $name = 'content'; public $args = []; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", public $static = [...]; public $parameter = [...] }; public $mapFn = NULL; public $description = 'The &quot;content&quot; field on the &quot;CoreCode&quot; block'; public $deprecationReason = NULL; public $astNode = NULL; public $config = ['type' => class Closure { virtual $closure = "$this->WPGraphQL\Registry\{closure}", ... }, 'description' => 'The "content" field on the "CoreCode" block', 'resolve' => class Closure { virtual $closure = "$this->WPGraphQL\ContentBlocks\Blocks\{closure}", ... }, 'name' => 'content']; private $type = class GraphQL\Type\Definition\StringType { public $name = 'String'; public $description = 'The `String` scalar type represents textual data, represented as UTF-8\ncharacter sequences. The String type is most often used by GraphQL to\nrepresent free-form human-readable text.'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }, $fieldNode = class GraphQL\Language\AST\FieldNode { public $loc = class GraphQL\Language\AST\Location { public $start = 629; public $end = 636; public $startToken = class GraphQL\Language\Token { ... }; public $endToken = class GraphQL\Language\Token { ... }; public $source = class GraphQL\Language\Source { ... } }; public $kind = 'Field'; public $name = class GraphQL\Language\AST\NameNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'Name'; public $value = 'content' }; public $alias = NULL; public $arguments = class GraphQL\Language\AST\NodeList { private $nodes = [...] }; public $directives = class GraphQL\Language\AST\NodeList { private $nodes = [...] }; public $selectionSet = NULL }, $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", public $static = ['field_resolver' => class Closure { virtual $closure = "$this->WPGraphQL\ContentBlocks\Blocks\{closure}", ... }, 'type_name' => 'CoreCodeAttributes', 'field_key' => 'content', 'field' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $parameter = ['$source' => '<required>', '$args' => '<required>', '$context' => '<required>', '$info' => '<required>'] }, $rootValue = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6c341a8f50'], $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'content'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'The &quot;content&quot; field on the &quot;CoreCode&quot; block'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\StringType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'content'; public $returnType = class GraphQL\Type\Definition\StringType { public $name = 'String'; public $description = 'The `String` scalar type represents textual data, represented as UTF-8\ncharacter sequences. The String type is most often used by GraphQL to\nrepresent free-form human-readable text.'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes', 4 => 'content']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:550
[23-Feb-2023 01:37:05 UTC] PHP  40. WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure:/Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/src/Utils/InstrumentSchema.php:100-188}($source = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6c341a8f50'], $args = [], $context = class WPGraphQL\AppContext { public $root_url = 'http://localhost:10028'; public $viewer = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] }; public $request = NULL; public $config = ['registered_editor_blocks' => [...]]; public $currentConnection = NULL; public $connectionArgs = []; public $loaders = ['comment_author' => class WPGraphQL\Data\Loader\CommentAuthorLoader { ... }, 'comment' => class WPGraphQL\Data\Loader\CommentLoader { ... }, 'enqueued_script' => class WPGraphQL\Data\Loader\EnqueuedScriptLoader { ... }, 'enqueued_stylesheet' => class WPGraphQL\Data\Loader\EnqueuedStylesheetLoader { ... }, 'plugin' => class WPGraphQL\Data\Loader\PluginLoader { ... }, 'nav_menu_item' => class WPGraphQL\Data\Loader\PostObjectLoader { ... }, 'post' => class WPGraphQL\Data\Loader\PostObjectLoader { ... }, 'post_type' => class WPGraphQL\Data\Loader\PostTypeLoader { ... }, 'taxonomy' => class WPGraphQL\Data\Loader\TaxonomyLoader { ... }, 'term' => class WPGraphQL\Data\Loader\TermObjectLoader { ... }, 'theme' => class WPGraphQL\Data\Loader\ThemeLoader { ... }, 'user' => class WPGraphQL\Data\Loader\UserLoader { ... }, 'user_role' => class WPGraphQL\Data\Loader\UserRoleLoader { ... }]; public $node_resolver = class WPGraphQL\Data\NodeResolver { protected $wp = class WP { ... }; protected $context = ... }; public $connection_query_class = NULL }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'content'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'The &quot;content&quot; field on the &quot;CoreCode&quot; block'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\StringType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'content'; public $returnType = class GraphQL\Type\Definition\StringType { public $name = 'String'; public $description = 'The `String` scalar type represents textual data, represented as UTF-8\ncharacter sequences. The String type is most often used by GraphQL to\nrepresent free-form human-readable text.'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes', 4 => 'content']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:623
[23-Feb-2023 01:37:05 UTC] PHP  41. WPGraphQL\ContentBlocks\Blocks\Block->WPGraphQL\ContentBlocks\Blocks\{closure:/Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql-content-blocks-main/includes/Blocks/Block.php:161-163}($block = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6c341a8f50'], $args = [], $context = class WPGraphQL\AppContext { public $root_url = 'http://localhost:10028'; public $viewer = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] }; public $request = NULL; public $config = ['registered_editor_blocks' => [...]]; public $currentConnection = NULL; public $connectionArgs = []; public $loaders = ['comment_author' => class WPGraphQL\Data\Loader\CommentAuthorLoader { ... }, 'comment' => class WPGraphQL\Data\Loader\CommentLoader { ... }, 'enqueued_script' => class WPGraphQL\Data\Loader\EnqueuedScriptLoader { ... }, 'enqueued_stylesheet' => class WPGraphQL\Data\Loader\EnqueuedStylesheetLoader { ... }, 'plugin' => class WPGraphQL\Data\Loader\PluginLoader { ... }, 'nav_menu_item' => class WPGraphQL\Data\Loader\PostObjectLoader { ... }, 'post' => class WPGraphQL\Data\Loader\PostObjectLoader { ... }, 'post_type' => class WPGraphQL\Data\Loader\PostTypeLoader { ... }, 'taxonomy' => class WPGraphQL\Data\Loader\TaxonomyLoader { ... }, 'term' => class WPGraphQL\Data\Loader\TermObjectLoader { ... }, 'theme' => class WPGraphQL\Data\Loader\ThemeLoader { ... }, 'user' => class WPGraphQL\Data\Loader\UserLoader { ... }, 'user_role' => class WPGraphQL\Data\Loader\UserRoleLoader { ... }]; public $node_resolver = class WPGraphQL\Data\NodeResolver { protected $wp = class WP { ... }; protected $context = ... }; public $connection_query_class = NULL }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'content'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'The &quot;content&quot; field on the &quot;CoreCode&quot; block'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\StringType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'content'; public $returnType = class GraphQL\Type\Definition\StringType { public $name = 'String'; public $description = 'The `String` scalar type represents textual data, represented as UTF-8\ncharacter sequences. The String type is most often used by GraphQL to\nrepresent free-form human-readable text.'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes', 4 => 'content']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/src/Utils/InstrumentSchema.php:151
[23-Feb-2023 01:37:05 UTC] PHP  42. WPGraphQL\ContentBlocks\Blocks\Block->resolve_block_attributes($block = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6c341a8f50'], $attribute_name = 'content', $attribute_config = ['type' => 'string', 'source' => 'html', 'selector' => 'code']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql-content-blocks-main/includes/Blocks/Block.php:162
[23-Feb-2023 01:37:41 UTC] PHP Warning:  Undefined array key "default" in /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql-content-blocks-main/includes/Blocks/Block.php on line 214
[23-Feb-2023 01:37:41 UTC] PHP Stack trace:
[23-Feb-2023 01:37:41 UTC] PHP   1. {main}() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/index.php:0
[23-Feb-2023 01:37:41 UTC] PHP   2. require() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/index.php:17
[23-Feb-2023 01:37:41 UTC] PHP   3. wp($query_vars = *uninitialized*) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-blog-header.php:16
[23-Feb-2023 01:37:41 UTC] PHP   4. WP->main($query_args = '') /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/functions.php:1332
[23-Feb-2023 01:37:41 UTC] PHP   5. WP->parse_request($extra_query_vars = '') /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/class-wp.php:780
[23-Feb-2023 01:37:41 UTC] PHP   6. do_action_ref_array($hook_name = 'parse_request', $args = [0 => class WP { public $public_query_vars = [...]; public $private_query_vars = [...]; public $extra_query_vars = [...]; public $query_vars = [...]; public $query_string = ''; public $request = 'graphql'; public $matched_rule = 'graphql/?$'; public $matched_query = 'graphql=true'; public $did_permalink = TRUE }]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/class-wp.php:399
[23-Feb-2023 01:37:41 UTC] PHP   7. WP_Hook->do_action($args = [0 => class WP { public $public_query_vars = [...]; public $private_query_vars = [...]; public $extra_query_vars = [...]; public $query_vars = [...]; public $query_string = ''; public $request = 'graphql'; public $matched_rule = 'graphql/?$'; public $matched_query = 'graphql=true'; public $did_permalink = TRUE }]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/plugin.php:565
[23-Feb-2023 01:37:41 UTC] PHP   8. WP_Hook->apply_filters($value = '', $args = [0 => class WP { public $public_query_vars = [...]; public $private_query_vars = [...]; public $extra_query_vars = [...]; public $query_vars = [...]; public $query_string = ''; public $request = 'graphql'; public $matched_rule = 'graphql/?$'; public $matched_query = 'graphql=true'; public $did_permalink = TRUE }]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/class-wp-hook.php:332
[23-Feb-2023 01:37:41 UTC] PHP   9. WPGraphQL\Router::resolve_http_request(class WP { public $public_query_vars = [0 => 'm', 1 => 'p', 2 => 'posts', 3 => 'w', 4 => 'cat', 5 => 'withcomments', 6 => 'withoutcomments', 7 => 's', 8 => 'search', 9 => 'exact', 10 => 'sentence', 11 => 'calendar', 12 => 'page', 13 => 'paged', 14 => 'more', 15 => 'tb', 16 => 'pb', 17 => 'author', 18 => 'order', 19 => 'orderby', 20 => 'year', 21 => 'monthnum', 22 => 'day', 23 => 'hour', 24 => 'minute', 25 => 'second', 26 => 'name', 27 => 'category_name', 28 => 'tag', 29 => 'feed', 30 => 'author_name', 31 => 'pagename', 32 => 'page_id', 33 => 'error', 34 => 'attachment', 35 => 'attachment_id', 36 => 'subpost', 37 => 'subpost_id', 38 => 'preview', 39 => 'robots', 40 => 'favicon', 41 => 'taxonomy', 42 => 'term', 43 => 'cpage', 44 => 'post_type', 45 => 'embed', 46 => 'post_format', 47 => 'rest_route', 48 => 'sitemap', 49 => 'sitemap-subtype', 50 => 'sitemap-stylesheet', 51 => 'graphql']; public $private_query_vars = [0 => 'offset', 1 => 'posts_per_page', 2 => 'posts_per_archive_page', 3 => 'showposts', 4 => 'nopaging', 5 => 'post_type', 6 => 'post_status', 7 => 'category__in', 8 => 'category__not_in', 9 => 'category__and', 10 => 'tag__in', 11 => 'tag__not_in', 12 => 'tag__and', 13 => 'tag_slug__in', 14 => 'tag_slug__and', 15 => 'tag_id', 16 => 'post_mime_type', 17 => 'perm', 18 => 'comments_per_page', 19 => 'post__in', 20 => 'post__not_in', 21 => 'post_parent', 22 => 'post_parent__in', 23 => 'post_parent__not_in', 24 => 'title', 25 => 'fields']; public $extra_query_vars = []; public $query_vars = ['graphql' => 'true']; public $query_string = ''; public $request = 'graphql'; public $matched_rule = 'graphql/?$'; public $matched_query = 'graphql=true'; public $did_permalink = TRUE }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/class-wp-hook.php:308
[23-Feb-2023 01:37:41 UTC] PHP  10. WPGraphQL\Router::process_http_request() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/src/Router.php:275
[23-Feb-2023 01:37:41 UTC] PHP  11. WPGraphQL\Request->execute_http() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/src/Router.php:481
[23-Feb-2023 01:37:41 UTC] PHP  12. GraphQL\Server\StandardServer->executeRequest($parsedBody = class GraphQL\Server\OperationParams { public $queryId = NULL; public $query = 'fragment BlogInfoFragment on GeneralSettings {\n  title\n  description\n  __typename\n}\n\nfragment NavigationMenuItemFragment on MenuItem {\n  id\n  path\n  label\n  parentId\n  cssClasses\n  menu {\n    node {\n      name\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment FeaturedImageFragment on NodeWithFeaturedImage {\n  featuredImage {\n    node {\n      id\n      sourceUrl\n      altText\n      mediaDetails {\n        width\n        height\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }'...; public $operation = 'GetPost'; public $variables = ['asPreview' => TRUE, 'databaseId' => 5, 'headerLocation' => 'PRIMARY', 'footerLocation' => 'FOOTER']; public $extensions = NULL; private $originalInput = ['operationname' => 'GetPost', 'variables' => [...], 'query' => 'fragment BlogInfoFragment on GeneralSettings {\n  title\n  description\n  __typename\n}\n\nfragment NavigationMenuItemFragment on MenuItem {\n  id\n  path\n  label\n  parentId\n  cssClasses\n  menu {\n    node {\n      name\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment FeaturedImageFragment on NodeWithFeaturedImage {\n  featuredImage {\n    node {\n      id\n      sourceUrl\n      altText\n      mediaDetails {\n        width\n        height\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }'...]; private $readOnly = FALSE }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/src/Request.php:713
[23-Feb-2023 01:37:41 UTC] PHP  13. GraphQL\Server\Helper->executeOperation($config = class GraphQL\Server\ServerConfig { private $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; private $context = class WPGraphQL\AppContext { public $root_url = 'http://localhost:10028'; public $viewer = class WP_User { ... }; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... }; public $request = NULL; public $config = [...]; public $currentConnection = NULL; public $connectionArgs = [...]; public $loaders = [...]; public $node_resolver = class WPGraphQL\Data\NodeResolver { ... }; public $connection_query_class = NULL }; private $rootValue = NULL; private $errorFormatter = NULL; private $errorsHandler = NULL; private $debugFlag = 0; private $queryBatching = TRUE; private $validationRules = [0 => class GraphQL\Validator\Rules\ExecutableDefinitions { ... }, 1 => class GraphQL\Validator\Rules\UniqueOperationNames { ... }, 2 => class GraphQL\Validator\Rules\LoneAnonymousOperation { ... }, 3 => class GraphQL\Validator\Rules\SingleFieldSubscription { ... }, 4 => class GraphQL\Validator\Rules\KnownTypeNames { ... }, 5 => class GraphQL\Validator\Rules\FragmentsOnCompositeTypes { ... }, 6 => class GraphQL\Validator\Rules\VariablesAreInputTypes { ... }, 7 => class GraphQL\Validator\Rules\ScalarLeafs { ... }, 8 => class GraphQL\Validator\Rules\FieldsOnCorrectType { ... }, 9 => class GraphQL\Validator\Rules\UniqueFragmentNames { ... }, 10 => class GraphQL\Validator\Rules\KnownFragmentNames { ... }, 11 => class GraphQL\Validator\Rules\NoUnusedFragments { ... }, 12 => class GraphQL\Validator\Rules\PossibleFragmentSpreads { ... }, 13 => class GraphQL\Validator\Rules\NoFragmentCycles { ... }, 14 => class GraphQL\Validator\Rules\UniqueVariableNames { ... }, 15 => class GraphQL\Validator\Rules\NoUndefinedVariables { ... }, 16 => class GraphQL\Validator\Rules\NoUnusedVariables { ... }, 17 => class GraphQL\Validator\Rules\KnownDirectives { ... }, 18 => class GraphQL\Validator\Rules\UniqueDirectivesPerLocation { ... }, 19 => class GraphQL\Validator\Rules\KnownArgumentNames { ... }, 20 => class GraphQL\Validator\Rules\UniqueArgumentNames { ... }, 21 => class GraphQL\Validator\Rules\ValuesOfCorrectType { ... }, 22 => class GraphQL\Validator\Rules\ProvidedRequiredArguments { ... }, 23 => class GraphQL\Validator\Rules\VariablesInAllowedPosition { ... }, 24 => class GraphQL\Validator\Rules\OverlappingFieldsCanBeMerged { ... }, 25 => class GraphQL\Validator\Rules\UniqueInputFieldNames { ... }, 'require_authentication' => class WPGraphQL\Server\ValidationRules\RequireAuthentication { ... }, 'disable_introspection' => class WPGraphQL\Server\ValidationRules\DisableIntrospection { ... }, 'query_depth' => class WPGraphQL\Server\ValidationRules\QueryDepth { ... }]; private $fieldResolver = NULL; private $promiseAdapter = NULL; private $persistentQueryLoader = NULL }, $op = class GraphQL\Server\OperationParams { public $queryId = NULL; public $query = 'fragment BlogInfoFragment on GeneralSettings {\n  title\n  description\n  __typename\n}\n\nfragment NavigationMenuItemFragment on MenuItem {\n  id\n  path\n  label\n  parentId\n  cssClasses\n  menu {\n    node {\n      name\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment FeaturedImageFragment on NodeWithFeaturedImage {\n  featuredImage {\n    node {\n      id\n      sourceUrl\n      altText\n      mediaDetails {\n        width\n        height\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }'...; public $operation = 'GetPost'; public $variables = ['asPreview' => TRUE, 'databaseId' => 5, 'headerLocation' => 'PRIMARY', 'footerLocation' => 'FOOTER']; public $extensions = NULL; private $originalInput = ['operationname' => 'GetPost', 'variables' => [...], 'query' => 'fragment BlogInfoFragment on GeneralSettings {\n  title\n  description\n  __typename\n}\n\nfragment NavigationMenuItemFragment on MenuItem {\n  id\n  path\n  label\n  parentId\n  cssClasses\n  menu {\n    node {\n      name\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment FeaturedImageFragment on NodeWithFeaturedImage {\n  featuredImage {\n    node {\n      id\n      sourceUrl\n      altText\n      mediaDetails {\n        width\n        height\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }'...]; private $readOnly = FALSE }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Server/StandardServer.php:136
[23-Feb-2023 01:37:41 UTC] PHP  14. GraphQL\Executor\Promise\Adapter\SyncPromiseAdapter->wait($promise = class GraphQL\Executor\Promise\Promise { public $adoptedPromise = class GraphQL\Executor\Promise\Adapter\SyncPromise { public $state = 'pending'; public $result = NULL; private $waiting = [...] }; private $adapter = class GraphQL\Executor\Promise\Adapter\SyncPromiseAdapter {  } }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Server/Helper.php:214
[23-Feb-2023 01:37:41 UTC] PHP  15. GraphQL\Executor\Promise\Adapter\SyncPromise::runQueue() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/Promise/Adapter/SyncPromiseAdapter.php:149
[23-Feb-2023 01:37:41 UTC] PHP  16. GraphQL\Executor\Promise\Adapter\SyncPromise->GraphQL\Executor\Promise\Adapter\{closure:/Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/Promise/Adapter/SyncPromise.php:142-163}() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/Promise/Adapter/SyncPromise.php:53
[23-Feb-2023 01:37:41 UTC] PHP  17. GraphQL\Executor\ReferenceExecutor->GraphQL\Executor\{closure:/Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:650-652}($resolved = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/Promise/Adapter/SyncPromise.php:148
[23-Feb-2023 01:37:41 UTC] PHP  18. GraphQL\Executor\ReferenceExecutor->completeValue($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = ['description' => 'The post type', 'connections' => [...], 'interfaces' => [...], 'fields' => [...], 'model' => 'WPGraphQL\\Model\\Post', 'kind' => 'object', 'name' => 'Post']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['author' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'categories' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentCount' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'comments' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'conditionalTags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentType' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentTypeName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'databaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'date' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'dateGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'desiredSlug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'editingLockedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enclosure' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedScripts' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedStylesheets' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'excerpt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImage' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'guid' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'id' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isContentNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isPreview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRestricted' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRevision' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isSticky' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isTermNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lastEditedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'link' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modified' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modifiedGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pingStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pinged' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postFormats' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'preview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisionOf' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisions' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'slug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'status' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'tags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'template' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'templates' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'terms' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'title' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'toPing' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'uri' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['Node' => class WPGraphQL\Type\WPInterfaceType { ... }, 'ContentNode' => class WPGraphQL\Type\WPInterfaceType { ... }, 'UniformResourceIdentifiable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'DatabaseIdentifier' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTemplate' => class WPGraphQL\Type\WPInterfaceType { ... }, 'Previewable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTitle' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentEditor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithAuthor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithFeaturedImage' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithExcerpt' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithComments' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTrackbacks' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithRevisions' => class WPGraphQL\Type\WPInterfaceType { ... }, 'MenuItemLinkable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentBlocks' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'post'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'An object of the post Type. '; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class WPGraphQL\Type\WPObjectType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'post'; public $returnType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'RootQuery'; public $description = 'The root entry point into the Graph'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post'], $result = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:651
[23-Feb-2023 01:37:41 UTC] PHP  19. GraphQL\Executor\ReferenceExecutor->completeObjectValue($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = ['description' => 'The post type', 'connections' => [...], 'interfaces' => [...], 'fields' => [...], 'model' => 'WPGraphQL\\Model\\Post', 'kind' => 'object', 'name' => 'Post']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['author' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'categories' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentCount' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'comments' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'conditionalTags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentType' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentTypeName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'databaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'date' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'dateGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'desiredSlug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'editingLockedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enclosure' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedScripts' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedStylesheets' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'excerpt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImage' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'guid' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'id' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isContentNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isPreview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRestricted' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRevision' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isSticky' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isTermNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lastEditedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'link' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modified' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modifiedGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pingStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pinged' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postFormats' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'preview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisionOf' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisions' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'slug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'status' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'tags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'template' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'templates' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'terms' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'title' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'toPing' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'uri' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['Node' => class WPGraphQL\Type\WPInterfaceType { ... }, 'ContentNode' => class WPGraphQL\Type\WPInterfaceType { ... }, 'UniformResourceIdentifiable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'DatabaseIdentifier' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTemplate' => class WPGraphQL\Type\WPInterfaceType { ... }, 'Previewable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTitle' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentEditor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithAuthor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithFeaturedImage' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithExcerpt' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithComments' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTrackbacks' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithRevisions' => class WPGraphQL\Type\WPInterfaceType { ... }, 'MenuItemLinkable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentBlocks' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'post'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'An object of the post Type. '; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class WPGraphQL\Type\WPObjectType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'post'; public $returnType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'RootQuery'; public $description = 'The root entry point into the Graph'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post'], $result = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:793
[23-Feb-2023 01:37:41 UTC] PHP  20. GraphQL\Executor\ReferenceExecutor->collectAndExecuteSubfields($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = ['description' => 'The post type', 'connections' => [...], 'interfaces' => [...], 'fields' => [...], 'model' => 'WPGraphQL\\Model\\Post', 'kind' => 'object', 'name' => 'Post']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['author' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'categories' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentCount' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'comments' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'conditionalTags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentType' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentTypeName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'databaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'date' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'dateGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'desiredSlug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'editingLockedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enclosure' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedScripts' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedStylesheets' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'excerpt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImage' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'guid' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'id' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isContentNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isPreview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRestricted' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRevision' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isSticky' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isTermNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lastEditedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'link' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modified' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modifiedGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pingStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pinged' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postFormats' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'preview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisionOf' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisions' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'slug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'status' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'tags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'template' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'templates' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'terms' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'title' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'toPing' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'uri' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['Node' => class WPGraphQL\Type\WPInterfaceType { ... }, 'ContentNode' => class WPGraphQL\Type\WPInterfaceType { ... }, 'UniformResourceIdentifiable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'DatabaseIdentifier' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTemplate' => class WPGraphQL\Type\WPInterfaceType { ... }, 'Previewable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTitle' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentEditor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithAuthor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithFeaturedImage' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithExcerpt' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithComments' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTrackbacks' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithRevisions' => class WPGraphQL\Type\WPInterfaceType { ... }, 'MenuItemLinkable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentBlocks' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post'], $result = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1106
[23-Feb-2023 01:37:41 UTC] PHP  21. GraphQL\Executor\ReferenceExecutor->executeFields($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = ['description' => 'The post type', 'connections' => [...], 'interfaces' => [...], 'fields' => [...], 'model' => 'WPGraphQL\\Model\\Post', 'kind' => 'object', 'name' => 'Post']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['author' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'categories' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentCount' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'comments' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'conditionalTags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentType' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentTypeName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'databaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'date' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'dateGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'desiredSlug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'editingLockedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enclosure' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedScripts' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedStylesheets' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'excerpt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImage' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'guid' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'id' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isContentNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isPreview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRestricted' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRevision' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isSticky' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isTermNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lastEditedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'link' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modified' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modifiedGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pingStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pinged' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postFormats' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'preview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisionOf' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisions' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'slug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'status' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'tags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'template' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'templates' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'terms' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'title' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'toPing' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'uri' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['Node' => class WPGraphQL\Type\WPInterfaceType { ... }, 'ContentNode' => class WPGraphQL\Type\WPInterfaceType { ... }, 'UniformResourceIdentifiable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'DatabaseIdentifier' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTemplate' => class WPGraphQL\Type\WPInterfaceType { ... }, 'Previewable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTitle' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentEditor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithAuthor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithFeaturedImage' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithExcerpt' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithComments' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTrackbacks' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithRevisions' => class WPGraphQL\Type\WPInterfaceType { ... }, 'MenuItemLinkable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentBlocks' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }, $path = [0 => 'post'], $fields = class ArrayObject { private $storage = ['title' => class ArrayObject { ... }, 'content' => class ArrayObject { ... }, 'date' => class ArrayObject { ... }, 'author' => class ArrayObject { ... }, 'featuredImage' => class ArrayObject { ... }, '__typename' => class ArrayObject { ... }, 'contentBlocks' => class ArrayObject { ... }] }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1145
[23-Feb-2023 01:37:41 UTC] PHP  22. GraphQL\Executor\ReferenceExecutor->resolveField($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = ['description' => 'The post type', 'connections' => [...], 'interfaces' => [...], 'fields' => [...], 'model' => 'WPGraphQL\\Model\\Post', 'kind' => 'object', 'name' => 'Post']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['author' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'categories' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentCount' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'comments' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'conditionalTags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentType' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentTypeName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'databaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'date' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'dateGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'desiredSlug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'editingLockedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enclosure' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedScripts' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedStylesheets' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'excerpt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImage' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'guid' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'id' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isContentNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isPreview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRestricted' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRevision' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isSticky' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isTermNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lastEditedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'link' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modified' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modifiedGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pingStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pinged' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postFormats' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'preview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisionOf' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisions' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'slug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'status' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'tags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'template' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'templates' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'terms' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'title' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'toPing' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'uri' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['Node' => class WPGraphQL\Type\WPInterfaceType { ... }, 'ContentNode' => class WPGraphQL\Type\WPInterfaceType { ... }, 'UniformResourceIdentifiable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'DatabaseIdentifier' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTemplate' => class WPGraphQL\Type\WPInterfaceType { ... }, 'Previewable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTitle' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentEditor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithAuthor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithFeaturedImage' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithExcerpt' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithComments' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTrackbacks' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithRevisions' => class WPGraphQL\Type\WPInterfaceType { ... }, 'MenuItemLinkable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentBlocks' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post', 1 => 'contentBlocks']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1195
[23-Feb-2023 01:37:41 UTC] PHP  23. GraphQL\Executor\ReferenceExecutor->completeValueCatchingError($returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks'], $result = [0 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f6c3659a1ca'], 2 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f6c3659a1cd']]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:557
[23-Feb-2023 01:37:41 UTC] PHP  24. GraphQL\Executor\ReferenceExecutor->completeValue($returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks'], $result = [0 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f6c3659a1ca'], 2 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f6c3659a1cd']]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:654
[23-Feb-2023 01:37:41 UTC] PHP  25. GraphQL\Executor\ReferenceExecutor->completeListValue($returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks'], $results = [0 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f6c3659a1ca'], 2 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f6c3659a1cd']]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:761
[23-Feb-2023 01:37:41 UTC] PHP  26. GraphQL\Executor\ReferenceExecutor->completeValueCatchingError($returnType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = ['eagerlyLoadType' => TRUE, 'description' => 'Blocks that can be edited to create content and layouts', 'fields' => [...], 'resolveType' => class Closure { virtual $closure = "$this->WPGraphQL\Type\{closure}", ... }, 'kind' => 'interface', 'name' => 'ContentBlock']; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = []; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6c3659a1ca']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:887
[23-Feb-2023 01:37:41 UTC] PHP  27. GraphQL\Executor\ReferenceExecutor->completeValue($returnType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = ['eagerlyLoadType' => TRUE, 'description' => 'Blocks that can be edited to create content and layouts', 'fields' => [...], 'resolveType' => class Closure { virtual $closure = "$this->WPGraphQL\Type\{closure}", ... }, 'kind' => 'interface', 'name' => 'ContentBlock']; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = []; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6c3659a1ca']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:654
[23-Feb-2023 01:37:41 UTC] PHP  28. GraphQL\Executor\ReferenceExecutor->completeAbstractValue($returnType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = ['eagerlyLoadType' => TRUE, 'description' => 'Blocks that can be edited to create content and layouts', 'fields' => [...], 'resolveType' => class Closure { virtual $closure = "$this->WPGraphQL\Type\{closure}", ... }, 'kind' => 'interface', 'name' => 'ContentBlock']; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = []; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6c3659a1ca']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:789
[23-Feb-2023 01:37:41 UTC] PHP  29. GraphQL\Executor\ReferenceExecutor->completeObjectValue($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = ['description' => 'A block used for editing the site', 'interfaces' => [...], 'eagerlyLoadType' => TRUE, 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCode']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'attributes' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['ContentBlock' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6c3659a1ca']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:974
[23-Feb-2023 01:37:41 UTC] PHP  30. GraphQL\Executor\ReferenceExecutor->collectAndExecuteSubfields($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = ['description' => 'A block used for editing the site', 'interfaces' => [...], 'eagerlyLoadType' => TRUE, 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCode']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'attributes' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['ContentBlock' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6c3659a1ca']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1106
[23-Feb-2023 01:37:41 UTC] PHP  31. GraphQL\Executor\ReferenceExecutor->executeFields($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = ['description' => 'A block used for editing the site', 'interfaces' => [...], 'eagerlyLoadType' => TRUE, 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCode']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'attributes' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['ContentBlock' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6c3659a1ca'], $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0], $fields = class ArrayObject { private $storage = ['__typename' => class ArrayObject { ... }, 'renderedHtml' => class ArrayObject { ... }, 'id' => class ArrayObject { ... }, 'parentId' => class ArrayObject { ... }, 'attributes' => class ArrayObject { ... }] }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1145
[23-Feb-2023 01:37:41 UTC] PHP  32. GraphQL\Executor\ReferenceExecutor->resolveField($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = ['description' => 'A block used for editing the site', 'interfaces' => [...], 'eagerlyLoadType' => TRUE, 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCode']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'attributes' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['ContentBlock' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6c3659a1ca'], $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1195
[23-Feb-2023 01:37:41 UTC] PHP  33. GraphQL\Executor\ReferenceExecutor->completeValueCatchingError($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'attributes'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'Attributes of the %s Block Type'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class WPGraphQL\Type\WPObjectType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'attributes'; public $returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes'], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6c3659a1ca']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:557
[23-Feb-2023 01:37:41 UTC] PHP  34. GraphQL\Executor\ReferenceExecutor->completeValue($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'attributes'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'Attributes of the %s Block Type'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class WPGraphQL\Type\WPObjectType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'attributes'; public $returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes'], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6c3659a1ca']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:654
[23-Feb-2023 01:37:41 UTC] PHP  35. GraphQL\Executor\ReferenceExecutor->completeObjectValue($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'attributes'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'Attributes of the %s Block Type'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class WPGraphQL\Type\WPObjectType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'attributes'; public $returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes'], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6c3659a1ca']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:793
[23-Feb-2023 01:37:41 UTC] PHP  36. GraphQL\Executor\ReferenceExecutor->collectAndExecuteSubfields($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes'], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6c3659a1ca']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1106
[23-Feb-2023 01:37:41 UTC] PHP  37. GraphQL\Executor\ReferenceExecutor->executeFields($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6c3659a1ca'], $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes'], $fields = class ArrayObject { private $storage = ['borderColor' => class ArrayObject { ... }, 'backgroundColor' => class ArrayObject { ... }, 'content' => class ArrayObject { ... }, 'style' => class ArrayObject { ... }, 'textColor' => class ArrayObject { ... }, 'fontSize' => class ArrayObject { ... }, 'fontFamily' => class ArrayObject { ... }, '__typename' => class ArrayObject { ... }] }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1145
[23-Feb-2023 01:37:41 UTC] PHP  38. GraphQL\Executor\ReferenceExecutor->resolveField($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6c3659a1ca'], $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes', 4 => 'content']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1195
[23-Feb-2023 01:37:41 UTC] PHP  39. GraphQL\Executor\ReferenceExecutor->resolveFieldValueOrError($fieldDef = class GraphQL\Type\Definition\FieldDefinition { public $name = 'content'; public $args = []; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", public $static = [...]; public $parameter = [...] }; public $mapFn = NULL; public $description = 'The &quot;content&quot; field on the &quot;CoreCode&quot; block'; public $deprecationReason = NULL; public $astNode = NULL; public $config = ['type' => class Closure { virtual $closure = "$this->WPGraphQL\Registry\{closure}", ... }, 'description' => 'The "content" field on the "CoreCode" block', 'resolve' => class Closure { virtual $closure = "$this->WPGraphQL\ContentBlocks\Blocks\{closure}", ... }, 'name' => 'content']; private $type = class GraphQL\Type\Definition\StringType { public $name = 'String'; public $description = 'The `String` scalar type represents textual data, represented as UTF-8\ncharacter sequences. The String type is most often used by GraphQL to\nrepresent free-form human-readable text.'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }, $fieldNode = class GraphQL\Language\AST\FieldNode { public $loc = class GraphQL\Language\AST\Location { public $start = 629; public $end = 636; public $startToken = class GraphQL\Language\Token { ... }; public $endToken = class GraphQL\Language\Token { ... }; public $source = class GraphQL\Language\Source { ... } }; public $kind = 'Field'; public $name = class GraphQL\Language\AST\NameNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'Name'; public $value = 'content' }; public $alias = NULL; public $arguments = class GraphQL\Language\AST\NodeList { private $nodes = [...] }; public $directives = class GraphQL\Language\AST\NodeList { private $nodes = [...] }; public $selectionSet = NULL }, $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", public $static = ['field_resolver' => class Closure { virtual $closure = "$this->WPGraphQL\ContentBlocks\Blocks\{closure}", ... }, 'type_name' => 'CoreCodeAttributes', 'field_key' => 'content', 'field' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $parameter = ['$source' => '<required>', '$args' => '<required>', '$context' => '<required>', '$info' => '<required>'] }, $rootValue = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6c3659a1ca'], $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'content'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'The &quot;content&quot; field on the &quot;CoreCode&quot; block'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\StringType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'content'; public $returnType = class GraphQL\Type\Definition\StringType { public $name = 'String'; public $description = 'The `String` scalar type represents textual data, represented as UTF-8\ncharacter sequences. The String type is most often used by GraphQL to\nrepresent free-form human-readable text.'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes', 4 => 'content']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:550
[23-Feb-2023 01:37:41 UTC] PHP  40. WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure:/Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/src/Utils/InstrumentSchema.php:100-188}($source = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6c3659a1ca'], $args = [], $context = class WPGraphQL\AppContext { public $root_url = 'http://localhost:10028'; public $viewer = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] }; public $request = NULL; public $config = ['registered_editor_blocks' => [...]]; public $currentConnection = NULL; public $connectionArgs = []; public $loaders = ['comment_author' => class WPGraphQL\Data\Loader\CommentAuthorLoader { ... }, 'comment' => class WPGraphQL\Data\Loader\CommentLoader { ... }, 'enqueued_script' => class WPGraphQL\Data\Loader\EnqueuedScriptLoader { ... }, 'enqueued_stylesheet' => class WPGraphQL\Data\Loader\EnqueuedStylesheetLoader { ... }, 'plugin' => class WPGraphQL\Data\Loader\PluginLoader { ... }, 'nav_menu_item' => class WPGraphQL\Data\Loader\PostObjectLoader { ... }, 'post' => class WPGraphQL\Data\Loader\PostObjectLoader { ... }, 'post_type' => class WPGraphQL\Data\Loader\PostTypeLoader { ... }, 'taxonomy' => class WPGraphQL\Data\Loader\TaxonomyLoader { ... }, 'term' => class WPGraphQL\Data\Loader\TermObjectLoader { ... }, 'theme' => class WPGraphQL\Data\Loader\ThemeLoader { ... }, 'user' => class WPGraphQL\Data\Loader\UserLoader { ... }, 'user_role' => class WPGraphQL\Data\Loader\UserRoleLoader { ... }]; public $node_resolver = class WPGraphQL\Data\NodeResolver { protected $wp = class WP { ... }; protected $context = ... }; public $connection_query_class = NULL }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'content'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'The &quot;content&quot; field on the &quot;CoreCode&quot; block'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\StringType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'content'; public $returnType = class GraphQL\Type\Definition\StringType { public $name = 'String'; public $description = 'The `String` scalar type represents textual data, represented as UTF-8\ncharacter sequences. The String type is most often used by GraphQL to\nrepresent free-form human-readable text.'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes', 4 => 'content']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:623
[23-Feb-2023 01:37:41 UTC] PHP  41. WPGraphQL\ContentBlocks\Blocks\Block->WPGraphQL\ContentBlocks\Blocks\{closure:/Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql-content-blocks-main/includes/Blocks/Block.php:161-163}($block = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6c3659a1ca'], $args = [], $context = class WPGraphQL\AppContext { public $root_url = 'http://localhost:10028'; public $viewer = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] }; public $request = NULL; public $config = ['registered_editor_blocks' => [...]]; public $currentConnection = NULL; public $connectionArgs = []; public $loaders = ['comment_author' => class WPGraphQL\Data\Loader\CommentAuthorLoader { ... }, 'comment' => class WPGraphQL\Data\Loader\CommentLoader { ... }, 'enqueued_script' => class WPGraphQL\Data\Loader\EnqueuedScriptLoader { ... }, 'enqueued_stylesheet' => class WPGraphQL\Data\Loader\EnqueuedStylesheetLoader { ... }, 'plugin' => class WPGraphQL\Data\Loader\PluginLoader { ... }, 'nav_menu_item' => class WPGraphQL\Data\Loader\PostObjectLoader { ... }, 'post' => class WPGraphQL\Data\Loader\PostObjectLoader { ... }, 'post_type' => class WPGraphQL\Data\Loader\PostTypeLoader { ... }, 'taxonomy' => class WPGraphQL\Data\Loader\TaxonomyLoader { ... }, 'term' => class WPGraphQL\Data\Loader\TermObjectLoader { ... }, 'theme' => class WPGraphQL\Data\Loader\ThemeLoader { ... }, 'user' => class WPGraphQL\Data\Loader\UserLoader { ... }, 'user_role' => class WPGraphQL\Data\Loader\UserRoleLoader { ... }]; public $node_resolver = class WPGraphQL\Data\NodeResolver { protected $wp = class WP { ... }; protected $context = ... }; public $connection_query_class = NULL }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'content'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'The &quot;content&quot; field on the &quot;CoreCode&quot; block'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\StringType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'content'; public $returnType = class GraphQL\Type\Definition\StringType { public $name = 'String'; public $description = 'The `String` scalar type represents textual data, represented as UTF-8\ncharacter sequences. The String type is most often used by GraphQL to\nrepresent free-form human-readable text.'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 0, 3 => 'attributes', 4 => 'content']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/src/Utils/InstrumentSchema.php:151
[23-Feb-2023 01:37:41 UTC] PHP  42. WPGraphQL\ContentBlocks\Blocks\Block->resolve_block_attributes($block = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n'], 'nodeId' => '63f6c3659a1ca'], $attribute_name = 'content', $attribute_config = ['type' => 'string', 'source' => 'html', 'selector' => 'code']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql-content-blocks-main/includes/Blocks/Block.php:162
[23-Feb-2023 01:37:41 UTC] PHP Warning:  Undefined array key "default" in /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql-content-blocks-main/includes/Blocks/Block.php on line 214
[23-Feb-2023 01:37:41 UTC] PHP Stack trace:
[23-Feb-2023 01:37:41 UTC] PHP   1. {main}() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/index.php:0
[23-Feb-2023 01:37:41 UTC] PHP   2. require() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/index.php:17
[23-Feb-2023 01:37:41 UTC] PHP   3. wp($query_vars = *uninitialized*) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-blog-header.php:16
[23-Feb-2023 01:37:41 UTC] PHP   4. WP->main($query_args = '') /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/functions.php:1332
[23-Feb-2023 01:37:41 UTC] PHP   5. WP->parse_request($extra_query_vars = '') /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/class-wp.php:780
[23-Feb-2023 01:37:41 UTC] PHP   6. do_action_ref_array($hook_name = 'parse_request', $args = [0 => class WP { public $public_query_vars = [...]; public $private_query_vars = [...]; public $extra_query_vars = [...]; public $query_vars = [...]; public $query_string = ''; public $request = 'graphql'; public $matched_rule = 'graphql/?$'; public $matched_query = 'graphql=true'; public $did_permalink = TRUE }]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/class-wp.php:399
[23-Feb-2023 01:37:41 UTC] PHP   7. WP_Hook->do_action($args = [0 => class WP { public $public_query_vars = [...]; public $private_query_vars = [...]; public $extra_query_vars = [...]; public $query_vars = [...]; public $query_string = ''; public $request = 'graphql'; public $matched_rule = 'graphql/?$'; public $matched_query = 'graphql=true'; public $did_permalink = TRUE }]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/plugin.php:565
[23-Feb-2023 01:37:41 UTC] PHP   8. WP_Hook->apply_filters($value = '', $args = [0 => class WP { public $public_query_vars = [...]; public $private_query_vars = [...]; public $extra_query_vars = [...]; public $query_vars = [...]; public $query_string = ''; public $request = 'graphql'; public $matched_rule = 'graphql/?$'; public $matched_query = 'graphql=true'; public $did_permalink = TRUE }]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/class-wp-hook.php:332
[23-Feb-2023 01:37:41 UTC] PHP   9. WPGraphQL\Router::resolve_http_request(class WP { public $public_query_vars = [0 => 'm', 1 => 'p', 2 => 'posts', 3 => 'w', 4 => 'cat', 5 => 'withcomments', 6 => 'withoutcomments', 7 => 's', 8 => 'search', 9 => 'exact', 10 => 'sentence', 11 => 'calendar', 12 => 'page', 13 => 'paged', 14 => 'more', 15 => 'tb', 16 => 'pb', 17 => 'author', 18 => 'order', 19 => 'orderby', 20 => 'year', 21 => 'monthnum', 22 => 'day', 23 => 'hour', 24 => 'minute', 25 => 'second', 26 => 'name', 27 => 'category_name', 28 => 'tag', 29 => 'feed', 30 => 'author_name', 31 => 'pagename', 32 => 'page_id', 33 => 'error', 34 => 'attachment', 35 => 'attachment_id', 36 => 'subpost', 37 => 'subpost_id', 38 => 'preview', 39 => 'robots', 40 => 'favicon', 41 => 'taxonomy', 42 => 'term', 43 => 'cpage', 44 => 'post_type', 45 => 'embed', 46 => 'post_format', 47 => 'rest_route', 48 => 'sitemap', 49 => 'sitemap-subtype', 50 => 'sitemap-stylesheet', 51 => 'graphql']; public $private_query_vars = [0 => 'offset', 1 => 'posts_per_page', 2 => 'posts_per_archive_page', 3 => 'showposts', 4 => 'nopaging', 5 => 'post_type', 6 => 'post_status', 7 => 'category__in', 8 => 'category__not_in', 9 => 'category__and', 10 => 'tag__in', 11 => 'tag__not_in', 12 => 'tag__and', 13 => 'tag_slug__in', 14 => 'tag_slug__and', 15 => 'tag_id', 16 => 'post_mime_type', 17 => 'perm', 18 => 'comments_per_page', 19 => 'post__in', 20 => 'post__not_in', 21 => 'post_parent', 22 => 'post_parent__in', 23 => 'post_parent__not_in', 24 => 'title', 25 => 'fields']; public $extra_query_vars = []; public $query_vars = ['graphql' => 'true']; public $query_string = ''; public $request = 'graphql'; public $matched_rule = 'graphql/?$'; public $matched_query = 'graphql=true'; public $did_permalink = TRUE }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-includes/class-wp-hook.php:308
[23-Feb-2023 01:37:41 UTC] PHP  10. WPGraphQL\Router::process_http_request() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/src/Router.php:275
[23-Feb-2023 01:37:41 UTC] PHP  11. WPGraphQL\Request->execute_http() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/src/Router.php:481
[23-Feb-2023 01:37:41 UTC] PHP  12. GraphQL\Server\StandardServer->executeRequest($parsedBody = class GraphQL\Server\OperationParams { public $queryId = NULL; public $query = 'fragment BlogInfoFragment on GeneralSettings {\n  title\n  description\n  __typename\n}\n\nfragment NavigationMenuItemFragment on MenuItem {\n  id\n  path\n  label\n  parentId\n  cssClasses\n  menu {\n    node {\n      name\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment FeaturedImageFragment on NodeWithFeaturedImage {\n  featuredImage {\n    node {\n      id\n      sourceUrl\n      altText\n      mediaDetails {\n        width\n        height\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }'...; public $operation = 'GetPost'; public $variables = ['asPreview' => TRUE, 'databaseId' => 5, 'headerLocation' => 'PRIMARY', 'footerLocation' => 'FOOTER']; public $extensions = NULL; private $originalInput = ['operationname' => 'GetPost', 'variables' => [...], 'query' => 'fragment BlogInfoFragment on GeneralSettings {\n  title\n  description\n  __typename\n}\n\nfragment NavigationMenuItemFragment on MenuItem {\n  id\n  path\n  label\n  parentId\n  cssClasses\n  menu {\n    node {\n      name\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment FeaturedImageFragment on NodeWithFeaturedImage {\n  featuredImage {\n    node {\n      id\n      sourceUrl\n      altText\n      mediaDetails {\n        width\n        height\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }'...]; private $readOnly = FALSE }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/src/Request.php:713
[23-Feb-2023 01:37:41 UTC] PHP  13. GraphQL\Server\Helper->executeOperation($config = class GraphQL\Server\ServerConfig { private $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; private $context = class WPGraphQL\AppContext { public $root_url = 'http://localhost:10028'; public $viewer = class WP_User { ... }; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... }; public $request = NULL; public $config = [...]; public $currentConnection = NULL; public $connectionArgs = [...]; public $loaders = [...]; public $node_resolver = class WPGraphQL\Data\NodeResolver { ... }; public $connection_query_class = NULL }; private $rootValue = NULL; private $errorFormatter = NULL; private $errorsHandler = NULL; private $debugFlag = 0; private $queryBatching = TRUE; private $validationRules = [0 => class GraphQL\Validator\Rules\ExecutableDefinitions { ... }, 1 => class GraphQL\Validator\Rules\UniqueOperationNames { ... }, 2 => class GraphQL\Validator\Rules\LoneAnonymousOperation { ... }, 3 => class GraphQL\Validator\Rules\SingleFieldSubscription { ... }, 4 => class GraphQL\Validator\Rules\KnownTypeNames { ... }, 5 => class GraphQL\Validator\Rules\FragmentsOnCompositeTypes { ... }, 6 => class GraphQL\Validator\Rules\VariablesAreInputTypes { ... }, 7 => class GraphQL\Validator\Rules\ScalarLeafs { ... }, 8 => class GraphQL\Validator\Rules\FieldsOnCorrectType { ... }, 9 => class GraphQL\Validator\Rules\UniqueFragmentNames { ... }, 10 => class GraphQL\Validator\Rules\KnownFragmentNames { ... }, 11 => class GraphQL\Validator\Rules\NoUnusedFragments { ... }, 12 => class GraphQL\Validator\Rules\PossibleFragmentSpreads { ... }, 13 => class GraphQL\Validator\Rules\NoFragmentCycles { ... }, 14 => class GraphQL\Validator\Rules\UniqueVariableNames { ... }, 15 => class GraphQL\Validator\Rules\NoUndefinedVariables { ... }, 16 => class GraphQL\Validator\Rules\NoUnusedVariables { ... }, 17 => class GraphQL\Validator\Rules\KnownDirectives { ... }, 18 => class GraphQL\Validator\Rules\UniqueDirectivesPerLocation { ... }, 19 => class GraphQL\Validator\Rules\KnownArgumentNames { ... }, 20 => class GraphQL\Validator\Rules\UniqueArgumentNames { ... }, 21 => class GraphQL\Validator\Rules\ValuesOfCorrectType { ... }, 22 => class GraphQL\Validator\Rules\ProvidedRequiredArguments { ... }, 23 => class GraphQL\Validator\Rules\VariablesInAllowedPosition { ... }, 24 => class GraphQL\Validator\Rules\OverlappingFieldsCanBeMerged { ... }, 25 => class GraphQL\Validator\Rules\UniqueInputFieldNames { ... }, 'require_authentication' => class WPGraphQL\Server\ValidationRules\RequireAuthentication { ... }, 'disable_introspection' => class WPGraphQL\Server\ValidationRules\DisableIntrospection { ... }, 'query_depth' => class WPGraphQL\Server\ValidationRules\QueryDepth { ... }]; private $fieldResolver = NULL; private $promiseAdapter = NULL; private $persistentQueryLoader = NULL }, $op = class GraphQL\Server\OperationParams { public $queryId = NULL; public $query = 'fragment BlogInfoFragment on GeneralSettings {\n  title\n  description\n  __typename\n}\n\nfragment NavigationMenuItemFragment on MenuItem {\n  id\n  path\n  label\n  parentId\n  cssClasses\n  menu {\n    node {\n      name\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment FeaturedImageFragment on NodeWithFeaturedImage {\n  featuredImage {\n    node {\n      id\n      sourceUrl\n      altText\n      mediaDetails {\n        width\n        height\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }'...; public $operation = 'GetPost'; public $variables = ['asPreview' => TRUE, 'databaseId' => 5, 'headerLocation' => 'PRIMARY', 'footerLocation' => 'FOOTER']; public $extensions = NULL; private $originalInput = ['operationname' => 'GetPost', 'variables' => [...], 'query' => 'fragment BlogInfoFragment on GeneralSettings {\n  title\n  description\n  __typename\n}\n\nfragment NavigationMenuItemFragment on MenuItem {\n  id\n  path\n  label\n  parentId\n  cssClasses\n  menu {\n    node {\n      name\n      __typename\n    }\n    __typename\n  }\n  __typename\n}\n\nfragment FeaturedImageFragment on NodeWithFeaturedImage {\n  featuredImage {\n    node {\n      id\n      sourceUrl\n      altText\n      mediaDetails {\n        width\n        height\n        __typename\n      }\n      __typename\n    }\n    __typename\n  }'...]; private $readOnly = FALSE }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Server/StandardServer.php:136
[23-Feb-2023 01:37:41 UTC] PHP  14. GraphQL\Executor\Promise\Adapter\SyncPromiseAdapter->wait($promise = class GraphQL\Executor\Promise\Promise { public $adoptedPromise = class GraphQL\Executor\Promise\Adapter\SyncPromise { public $state = 'pending'; public $result = NULL; private $waiting = [...] }; private $adapter = class GraphQL\Executor\Promise\Adapter\SyncPromiseAdapter {  } }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Server/Helper.php:214
[23-Feb-2023 01:37:41 UTC] PHP  15. GraphQL\Executor\Promise\Adapter\SyncPromise::runQueue() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/Promise/Adapter/SyncPromiseAdapter.php:149
[23-Feb-2023 01:37:41 UTC] PHP  16. GraphQL\Executor\Promise\Adapter\SyncPromise->GraphQL\Executor\Promise\Adapter\{closure:/Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/Promise/Adapter/SyncPromise.php:142-163}() /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/Promise/Adapter/SyncPromise.php:53
[23-Feb-2023 01:37:41 UTC] PHP  17. GraphQL\Executor\ReferenceExecutor->GraphQL\Executor\{closure:/Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:650-652}($resolved = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/Promise/Adapter/SyncPromise.php:148
[23-Feb-2023 01:37:41 UTC] PHP  18. GraphQL\Executor\ReferenceExecutor->completeValue($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = ['description' => 'The post type', 'connections' => [...], 'interfaces' => [...], 'fields' => [...], 'model' => 'WPGraphQL\\Model\\Post', 'kind' => 'object', 'name' => 'Post']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['author' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'categories' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentCount' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'comments' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'conditionalTags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentType' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentTypeName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'databaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'date' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'dateGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'desiredSlug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'editingLockedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enclosure' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedScripts' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedStylesheets' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'excerpt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImage' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'guid' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'id' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isContentNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isPreview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRestricted' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRevision' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isSticky' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isTermNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lastEditedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'link' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modified' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modifiedGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pingStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pinged' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postFormats' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'preview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisionOf' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisions' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'slug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'status' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'tags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'template' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'templates' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'terms' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'title' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'toPing' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'uri' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['Node' => class WPGraphQL\Type\WPInterfaceType { ... }, 'ContentNode' => class WPGraphQL\Type\WPInterfaceType { ... }, 'UniformResourceIdentifiable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'DatabaseIdentifier' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTemplate' => class WPGraphQL\Type\WPInterfaceType { ... }, 'Previewable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTitle' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentEditor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithAuthor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithFeaturedImage' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithExcerpt' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithComments' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTrackbacks' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithRevisions' => class WPGraphQL\Type\WPInterfaceType { ... }, 'MenuItemLinkable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentBlocks' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'post'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'An object of the post Type. '; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class WPGraphQL\Type\WPObjectType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'post'; public $returnType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'RootQuery'; public $description = 'The root entry point into the Graph'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post'], $result = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:651
[23-Feb-2023 01:37:41 UTC] PHP  19. GraphQL\Executor\ReferenceExecutor->completeObjectValue($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = ['description' => 'The post type', 'connections' => [...], 'interfaces' => [...], 'fields' => [...], 'model' => 'WPGraphQL\\Model\\Post', 'kind' => 'object', 'name' => 'Post']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['author' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'categories' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentCount' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'comments' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'conditionalTags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentType' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentTypeName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'databaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'date' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'dateGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'desiredSlug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'editingLockedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enclosure' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedScripts' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedStylesheets' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'excerpt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImage' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'guid' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'id' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isContentNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isPreview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRestricted' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRevision' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isSticky' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isTermNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lastEditedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'link' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modified' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modifiedGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pingStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pinged' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postFormats' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'preview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisionOf' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisions' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'slug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'status' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'tags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'template' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'templates' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'terms' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'title' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'toPing' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'uri' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['Node' => class WPGraphQL\Type\WPInterfaceType { ... }, 'ContentNode' => class WPGraphQL\Type\WPInterfaceType { ... }, 'UniformResourceIdentifiable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'DatabaseIdentifier' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTemplate' => class WPGraphQL\Type\WPInterfaceType { ... }, 'Previewable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTitle' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentEditor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithAuthor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithFeaturedImage' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithExcerpt' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithComments' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTrackbacks' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithRevisions' => class WPGraphQL\Type\WPInterfaceType { ... }, 'MenuItemLinkable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentBlocks' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'post'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'An object of the post Type. '; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class WPGraphQL\Type\WPObjectType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'post'; public $returnType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'RootQuery'; public $description = 'The root entry point into the Graph'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post'], $result = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:793
[23-Feb-2023 01:37:41 UTC] PHP  20. GraphQL\Executor\ReferenceExecutor->collectAndExecuteSubfields($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = ['description' => 'The post type', 'connections' => [...], 'interfaces' => [...], 'fields' => [...], 'model' => 'WPGraphQL\\Model\\Post', 'kind' => 'object', 'name' => 'Post']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['author' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'categories' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentCount' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'comments' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'conditionalTags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentType' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentTypeName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'databaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'date' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'dateGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'desiredSlug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'editingLockedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enclosure' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedScripts' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedStylesheets' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'excerpt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImage' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'guid' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'id' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isContentNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isPreview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRestricted' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRevision' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isSticky' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isTermNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lastEditedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'link' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modified' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modifiedGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pingStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pinged' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postFormats' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'preview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisionOf' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisions' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'slug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'status' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'tags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'template' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'templates' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'terms' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'title' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'toPing' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'uri' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['Node' => class WPGraphQL\Type\WPInterfaceType { ... }, 'ContentNode' => class WPGraphQL\Type\WPInterfaceType { ... }, 'UniformResourceIdentifiable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'DatabaseIdentifier' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTemplate' => class WPGraphQL\Type\WPInterfaceType { ... }, 'Previewable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTitle' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentEditor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithAuthor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithFeaturedImage' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithExcerpt' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithComments' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTrackbacks' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithRevisions' => class WPGraphQL\Type\WPInterfaceType { ... }, 'MenuItemLinkable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentBlocks' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post'], $result = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1106
[23-Feb-2023 01:37:41 UTC] PHP  21. GraphQL\Executor\ReferenceExecutor->executeFields($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = ['description' => 'The post type', 'connections' => [...], 'interfaces' => [...], 'fields' => [...], 'model' => 'WPGraphQL\\Model\\Post', 'kind' => 'object', 'name' => 'Post']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['author' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'categories' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentCount' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'comments' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'conditionalTags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentType' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentTypeName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'databaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'date' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'dateGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'desiredSlug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'editingLockedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enclosure' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedScripts' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedStylesheets' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'excerpt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImage' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'guid' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'id' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isContentNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isPreview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRestricted' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRevision' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isSticky' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isTermNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lastEditedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'link' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modified' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modifiedGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pingStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pinged' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postFormats' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'preview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisionOf' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisions' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'slug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'status' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'tags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'template' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'templates' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'terms' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'title' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'toPing' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'uri' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['Node' => class WPGraphQL\Type\WPInterfaceType { ... }, 'ContentNode' => class WPGraphQL\Type\WPInterfaceType { ... }, 'UniformResourceIdentifiable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'DatabaseIdentifier' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTemplate' => class WPGraphQL\Type\WPInterfaceType { ... }, 'Previewable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTitle' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentEditor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithAuthor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithFeaturedImage' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithExcerpt' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithComments' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTrackbacks' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithRevisions' => class WPGraphQL\Type\WPInterfaceType { ... }, 'MenuItemLinkable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentBlocks' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }, $path = [0 => 'post'], $fields = class ArrayObject { private $storage = ['title' => class ArrayObject { ... }, 'content' => class ArrayObject { ... }, 'date' => class ArrayObject { ... }, 'author' => class ArrayObject { ... }, 'featuredImage' => class ArrayObject { ... }, '__typename' => class ArrayObject { ... }, 'contentBlocks' => class ArrayObject { ... }] }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1145
[23-Feb-2023 01:37:41 UTC] PHP  22. GraphQL\Executor\ReferenceExecutor->resolveField($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = ['description' => 'The post type', 'connections' => [...], 'interfaces' => [...], 'fields' => [...], 'model' => 'WPGraphQL\\Model\\Post', 'kind' => 'object', 'name' => 'Post']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['author' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'authorId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'categories' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentCount' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'commentStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'comments' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'conditionalTags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentType' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'contentTypeName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'databaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'date' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'dateGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'desiredSlug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'editingLockedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enclosure' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedScripts' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'enqueuedStylesheets' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'excerpt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImage' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'featuredImageId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'guid' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'id' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isContentNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isPreview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRestricted' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isRevision' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isSticky' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isTermNode' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lastEditedBy' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'link' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modified' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'modifiedGmt' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pingStatus' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'pinged' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postFormats' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'postId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'preview' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionDatabaseId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'previewRevisionId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisionOf' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'revisions' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'slug' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'status' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'tags' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'template' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'templates' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'terms' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'title' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'toPing' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'uri' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['Node' => class WPGraphQL\Type\WPInterfaceType { ... }, 'ContentNode' => class WPGraphQL\Type\WPInterfaceType { ... }, 'UniformResourceIdentifiable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'DatabaseIdentifier' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTemplate' => class WPGraphQL\Type\WPInterfaceType { ... }, 'Previewable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTitle' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentEditor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithAuthor' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithFeaturedImage' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithExcerpt' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithComments' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithTrackbacks' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithRevisions' => class WPGraphQL\Type\WPInterfaceType { ... }, 'MenuItemLinkable' => class WPGraphQL\Type\WPInterfaceType { ... }, 'NodeWithContentBlocks' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = class WPGraphQL\Model\Post { protected $model_name = 'PostObject'; protected $data = class WP_Post { public $ID = 11; public $post_author = '1'; public $post_date = '2023-02-22 20:26:13'; public $post_date_gmt = '2023-02-22 20:26:13'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'inherit'; public $comment_status = 'closed'; public $ping_status = 'closed'; public $post_password = ''; public $post_name = '5-autosave-v1'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 20:26:13'; public $post_modified_gmt = '2023-02-22 20:26:13'; public $post_content_filtered = ''; public $post_parent = 5; public $guid = 'http://merl741tutorialtesting.local/?p=11'; public $menu_order = 0; public $post_type = 'revision'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $restricted_cap = ''; protected $allowed_restricted_fields = [0 => 'databaseId', 1 => 'enqueuedScriptsQueue', 2 => 'enqueuedStylesheetsQueue', 3 => 'id', 4 => 'isRestricted', 5 => 'link', 6 => 'post_status', 7 => 'post_type', 8 => 'slug', 9 => 'status', 10 => 'titleRendered', 11 => 'uri', 12 => 'isPostsPage', 13 => 'isFrontPage', 14 => 'isPrivacyPage', 15 => 'postId']; protected $owner = 1; protected $current_user = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; protected $visibility = 'public'; public $fields = ['ID' => 11, 'post_author' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'id' => 'cG9zdDoxMQ==', 'databaseId' => 11, 'post_type' => 'revision', 'authorId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'authorDatabaseId' => '1', 'date' => '2023-02-22T20:26:13', 'dateGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRendered' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n\n\n\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'pageTemplate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'contentRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'titleRendered' => 'Code Block', 'titleRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRendered' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'excerptRaw' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'post_status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'status' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pingStatus' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'slug' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'template' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isFrontPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivacyPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPostsPage' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'toPing' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'pinged' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modified' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'modifiedGmt' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'parentDatabaseId' => 5, 'editLastId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'editLock' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enclosure' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'guid' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'menuOrder' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'link' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'uri' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'commentCount' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'featuredImageDatabaseId' => NULL, 'password' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedScriptsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'enqueuedStylesheetsQueue' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRevision' => TRUE, 'previewRevisionDatabaseId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'previewRevisionId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPreview' => TRUE, 'isSticky' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'postId' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPublic' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isRestricted' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }, 'isPrivate' => class Closure { virtual $closure = "$this->WPGraphQL\Model\{closure}", ... }]; protected $global_post = class WP_Post { public $ID = 5; public $post_author = '1'; public $post_date = '2023-02-21 03:11:58'; public $post_date_gmt = '2023-02-21 03:11:58'; public $post_content = '<!-- wp:code -->\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n<!-- /wp:code -->\n\n<!-- wp:code -->\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n<!-- /wp:code -->'; public $post_title = 'Code Block'; public $post_excerpt = ''; public $post_status = 'publish'; public $comment_status = 'open'; public $ping_status = 'open'; public $post_password = ''; public $post_name = '5-2'; public $to_ping = ''; public $pinged = ''; public $post_modified = '2023-02-22 18:28:59'; public $post_modified_gmt = '2023-02-22 18:28:59'; public $post_content_filtered = ''; public $post_parent = 0; public $guid = 'http://merl741tutorialtesting.local/?p=5'; public $menu_order = 0; public $post_type = 'post'; public $post_mime_type = ''; public $comment_count = '0'; public $filter = 'raw' }; protected $post_type_object = class WP_Post_Type { public $name = 'post'; public $label = 'Posts'; public $labels = class stdClass { ... }; public $description = ''; public $public = TRUE; public $hierarchical = FALSE; public $exclude_from_search = FALSE; public $publicly_queryable = TRUE; public $show_ui = TRUE; public $show_in_menu = TRUE; public $show_in_nav_menus = TRUE; public $show_in_admin_bar = TRUE; public $menu_position = 5; public $menu_icon = 'dashicons-admin-post'; public $capability_type = 'post'; public $map_meta_cap = TRUE; public $register_meta_box_cb = NULL; public $taxonomies = [...]; public $has_archive = FALSE; public $query_var = FALSE; public $can_export = TRUE; public $delete_with_user = TRUE; public $template = [...]; public $template_lock = FALSE; public $_builtin = TRUE; public $_edit_link = 'post.php?post=%d'; public $cap = class stdClass { ... }; public $rewrite = FALSE; public $supports = *uninitialized*; public $show_in_rest = TRUE; public $rest_base = 'posts'; public $rest_namespace = 'wp/v2'; public $rest_controller_class = 'WP_REST_Posts_Controller'; public $rest_controller = NULL; public $graphql_kind = 'object'; public $graphql_resolve_type = NULL; public $graphql_interfaces = [...]; public $graphql_exclude_interfaces = [...]; public $graphql_connections = [...]; public $graphql_exclude_connections = [...]; public $graphql_union_types = [...]; public $graphql_register_root_field = TRUE; public $graphql_register_root_connection = TRUE; public $show_in_graphql = TRUE; public $graphql_single_name = 'post'; public $graphql_plural_name = 'posts' }; protected $wp_query = NULL }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post', 1 => 'contentBlocks']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1195
[23-Feb-2023 01:37:41 UTC] PHP  23. GraphQL\Executor\ReferenceExecutor->completeValueCatchingError($returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks'], $result = [0 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f6c3659a1ca'], 2 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f6c3659a1cd']]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:557
[23-Feb-2023 01:37:41 UTC] PHP  24. GraphQL\Executor\ReferenceExecutor->completeValue($returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks'], $result = [0 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f6c3659a1ca'], 2 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f6c3659a1cd']]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:654
[23-Feb-2023 01:37:41 UTC] PHP  25. GraphQL\Executor\ReferenceExecutor->completeListValue($returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = [...]; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks'], $results = [0 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>function fibonacci(n) {\n   return n &lt; 1 ? 0\n        : n &lt;= 2 ? 1\n        : fibonacci(n - 1) + fibonacci(n - 2)\n}\n\nconsole.log(fibonacci(4))</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f6c3659a1ca'], 2 => ['blockName' => 'core/code', 'attrs' => [...], 'innerBlocks' => [...], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [...], 'nodeId' => '63f6c3659a1cd']]) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:761
[23-Feb-2023 01:37:41 UTC] PHP  26. GraphQL\Executor\ReferenceExecutor->completeValueCatchingError($returnType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = ['eagerlyLoadType' => TRUE, 'description' => 'Blocks that can be edited to create content and layouts', 'fields' => [...], 'resolveType' => class Closure { virtual $closure = "$this->WPGraphQL\Type\{closure}", ... }, 'kind' => 'interface', 'name' => 'ContentBlock']; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = []; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6c3659a1cd']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:887
[23-Feb-2023 01:37:41 UTC] PHP  27. GraphQL\Executor\ReferenceExecutor->completeValue($returnType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = ['eagerlyLoadType' => TRUE, 'description' => 'Blocks that can be edited to create content and layouts', 'fields' => [...], 'resolveType' => class Closure { virtual $closure = "$this->WPGraphQL\Type\{closure}", ... }, 'kind' => 'interface', 'name' => 'ContentBlock']; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = []; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6c3659a1cd']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:654
[23-Feb-2023 01:37:41 UTC] PHP  28. GraphQL\Executor\ReferenceExecutor->completeAbstractValue($returnType = class WPGraphQL\Type\WPInterfaceType { public $name = 'ContentBlock'; public $description = 'Blocks that can be edited to create content and layouts'; public $astNode = NULL; public $config = ['eagerlyLoadType' => TRUE, 'description' => 'Blocks that can be edited to create content and layouts', 'fields' => [...], 'resolveType' => class Closure { virtual $closure = "$this->WPGraphQL\Type\{closure}", ... }, 'kind' => 'interface', 'name' => 'ContentBlock']; public $extensionASTNodes = NULL; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; private ${GraphQL\Type\Definition\InterfaceType}interfaces = []; private ${GraphQL\Type\Definition\InterfaceType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6c3659a1cd']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:789
[23-Feb-2023 01:37:41 UTC] PHP  29. GraphQL\Executor\ReferenceExecutor->completeObjectValue($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = ['description' => 'A block used for editing the site', 'interfaces' => [...], 'eagerlyLoadType' => TRUE, 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCode']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'attributes' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['ContentBlock' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'contentBlocks'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'List of content blocks'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\ListOfType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'contentBlocks'; public $returnType = class GraphQL\Type\Definition\ListOfType { public $name = NULL; public $description = NULL; public $astNode = NULL; public $config = NULL; public $extensionASTNodes = NULL; public $ofType = class WPGraphQL\Type\WPInterfaceType { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'Post'; public $description = 'The post type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1]; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6c3659a1cd']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:974
[23-Feb-2023 01:37:41 UTC] PHP  30. GraphQL\Executor\ReferenceExecutor->collectAndExecuteSubfields($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = ['description' => 'A block used for editing the site', 'interfaces' => [...], 'eagerlyLoadType' => TRUE, 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCode']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'attributes' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['ContentBlock' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6c3659a1cd']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1106
[23-Feb-2023 01:37:41 UTC] PHP  31. GraphQL\Executor\ReferenceExecutor->executeFields($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = ['description' => 'A block used for editing the site', 'interfaces' => [...], 'eagerlyLoadType' => TRUE, 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCode']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'attributes' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['ContentBlock' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6c3659a1cd'], $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1], $fields = class ArrayObject { private $storage = ['__typename' => class ArrayObject { ... }, 'renderedHtml' => class ArrayObject { ... }, 'id' => class ArrayObject { ... }, 'parentId' => class ArrayObject { ... }, 'attributes' => class ArrayObject { ... }] }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1145
[23-Feb-2023 01:37:41 UTC] PHP  32. GraphQL\Executor\ReferenceExecutor->resolveField($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = ['description' => 'A block used for editing the site', 'interfaces' => [...], 'eagerlyLoadType' => TRUE, 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCode']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['apiVersion' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'attributes' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'blockEditorCategoryName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassNames' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'innerBlocks' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'isDynamic' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'name' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'nodeId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'parentId' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'renderedHtml' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = ['ContentBlock' => class WPGraphQL\Type\WPInterfaceType { ... }]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6c3659a1cd'], $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1195
[23-Feb-2023 01:37:41 UTC] PHP  33. GraphQL\Executor\ReferenceExecutor->completeValueCatchingError($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'attributes'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'Attributes of the %s Block Type'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class WPGraphQL\Type\WPObjectType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'attributes'; public $returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes'], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6c3659a1cd']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:557
[23-Feb-2023 01:37:41 UTC] PHP  34. GraphQL\Executor\ReferenceExecutor->completeValue($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'attributes'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'Attributes of the %s Block Type'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class WPGraphQL\Type\WPObjectType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'attributes'; public $returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes'], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6c3659a1cd']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:654
[23-Feb-2023 01:37:41 UTC] PHP  35. GraphQL\Executor\ReferenceExecutor->completeObjectValue($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'attributes'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'Attributes of the %s Block Type'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class WPGraphQL\Type\WPObjectType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'attributes'; public $returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCode'; public $description = 'A block used for editing the site'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = [...]; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes'], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6c3659a1cd']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:793
[23-Feb-2023 01:37:41 UTC] PHP  36. GraphQL\Executor\ReferenceExecutor->collectAndExecuteSubfields($returnType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes'], $result = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6c3659a1cd']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1106
[23-Feb-2023 01:37:41 UTC] PHP  37. GraphQL\Executor\ReferenceExecutor->executeFields($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6c3659a1cd'], $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes'], $fields = class ArrayObject { private $storage = ['borderColor' => class ArrayObject { ... }, 'backgroundColor' => class ArrayObject { ... }, 'content' => class ArrayObject { ... }, 'style' => class ArrayObject { ... }, 'textColor' => class ArrayObject { ... }, 'fontSize' => class ArrayObject { ... }, 'fontFamily' => class ArrayObject { ... }, '__typename' => class ArrayObject { ... }] }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1145
[23-Feb-2023 01:37:41 UTC] PHP  38. GraphQL\Executor\ReferenceExecutor->resolveField($parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = ['description' => 'Attributes of the %s Block Type', 'fields' => [...], 'kind' => 'object', 'name' => 'CoreCodeAttributes']; public $extensionASTNodes = []; private ${GraphQL\Type\Definition\TypeWithFields}fields = ['backgroundColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'borderColor' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'className' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'content' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'cssClassName' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontFamily' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'fontSize' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'gradient' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'lock' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'style' => class GraphQL\Type\Definition\FieldDefinition { ... }, 'textColor' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = []; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] } }, $rootValue = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6c3659a1cd'], $fieldNodes = class ArrayObject { private $storage = [0 => class GraphQL\Language\AST\FieldNode { ... }] }, $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes', 4 => 'content']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:1195
[23-Feb-2023 01:37:41 UTC] PHP  39. GraphQL\Executor\ReferenceExecutor->resolveFieldValueOrError($fieldDef = class GraphQL\Type\Definition\FieldDefinition { public $name = 'content'; public $args = []; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", public $static = [...]; public $parameter = [...] }; public $mapFn = NULL; public $description = 'The &quot;content&quot; field on the &quot;CoreCode&quot; block'; public $deprecationReason = NULL; public $astNode = NULL; public $config = ['type' => class Closure { virtual $closure = "$this->WPGraphQL\Registry\{closure}", ... }, 'description' => 'The "content" field on the "CoreCode" block', 'resolve' => class Closure { virtual $closure = "$this->WPGraphQL\ContentBlocks\Blocks\{closure}", ... }, 'name' => 'content']; private $type = class GraphQL\Type\Definition\StringType { public $name = 'String'; public $description = 'The `String` scalar type represents textual data, represented as UTF-8\ncharacter sequences. The String type is most often used by GraphQL to\nrepresent free-form human-readable text.'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }, $fieldNode = class GraphQL\Language\AST\FieldNode { public $loc = class GraphQL\Language\AST\Location { public $start = 629; public $end = 636; public $startToken = class GraphQL\Language\Token { ... }; public $endToken = class GraphQL\Language\Token { ... }; public $source = class GraphQL\Language\Source { ... } }; public $kind = 'Field'; public $name = class GraphQL\Language\AST\NameNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'Name'; public $value = 'content' }; public $alias = NULL; public $arguments = class GraphQL\Language\AST\NodeList { private $nodes = [...] }; public $directives = class GraphQL\Language\AST\NodeList { private $nodes = [...] }; public $selectionSet = NULL }, $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", public $static = ['field_resolver' => class Closure { virtual $closure = "$this->WPGraphQL\ContentBlocks\Blocks\{closure}", ... }, 'type_name' => 'CoreCodeAttributes', 'field_key' => 'content', 'field' => class GraphQL\Type\Definition\FieldDefinition { ... }]; public $parameter = ['$source' => '<required>', '$args' => '<required>', '$context' => '<required>', '$info' => '<required>'] }, $rootValue = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6c3659a1cd'], $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'content'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'The &quot;content&quot; field on the &quot;CoreCode&quot; block'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\StringType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'content'; public $returnType = class GraphQL\Type\Definition\StringType { public $name = 'String'; public $description = 'The `String` scalar type represents textual data, represented as UTF-8\ncharacter sequences. The String type is most often used by GraphQL to\nrepresent free-form human-readable text.'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes', 4 => 'content']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:550
[23-Feb-2023 01:37:41 UTC] PHP  40. WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure:/Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/src/Utils/InstrumentSchema.php:100-188}($source = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6c3659a1cd'], $args = [], $context = class WPGraphQL\AppContext { public $root_url = 'http://localhost:10028'; public $viewer = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] }; public $request = NULL; public $config = ['registered_editor_blocks' => [...]]; public $currentConnection = NULL; public $connectionArgs = []; public $loaders = ['comment_author' => class WPGraphQL\Data\Loader\CommentAuthorLoader { ... }, 'comment' => class WPGraphQL\Data\Loader\CommentLoader { ... }, 'enqueued_script' => class WPGraphQL\Data\Loader\EnqueuedScriptLoader { ... }, 'enqueued_stylesheet' => class WPGraphQL\Data\Loader\EnqueuedStylesheetLoader { ... }, 'plugin' => class WPGraphQL\Data\Loader\PluginLoader { ... }, 'nav_menu_item' => class WPGraphQL\Data\Loader\PostObjectLoader { ... }, 'post' => class WPGraphQL\Data\Loader\PostObjectLoader { ... }, 'post_type' => class WPGraphQL\Data\Loader\PostTypeLoader { ... }, 'taxonomy' => class WPGraphQL\Data\Loader\TaxonomyLoader { ... }, 'term' => class WPGraphQL\Data\Loader\TermObjectLoader { ... }, 'theme' => class WPGraphQL\Data\Loader\ThemeLoader { ... }, 'user' => class WPGraphQL\Data\Loader\UserLoader { ... }, 'user_role' => class WPGraphQL\Data\Loader\UserRoleLoader { ... }]; public $node_resolver = class WPGraphQL\Data\NodeResolver { protected $wp = class WP { ... }; protected $context = ... }; public $connection_query_class = NULL }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'content'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'The &quot;content&quot; field on the &quot;CoreCode&quot; block'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\StringType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'content'; public $returnType = class GraphQL\Type\Definition\StringType { public $name = 'String'; public $description = 'The `String` scalar type represents textual data, represented as UTF-8\ncharacter sequences. The String type is most often used by GraphQL to\nrepresent free-form human-readable text.'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes', 4 => 'content']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/vendor/webonyx/graphql-php/src/Executor/ReferenceExecutor.php:623
[23-Feb-2023 01:37:41 UTC] PHP  41. WPGraphQL\ContentBlocks\Blocks\Block->WPGraphQL\ContentBlocks\Blocks\{closure:/Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql-content-blocks-main/includes/Blocks/Block.php:161-163}($block = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6c3659a1cd'], $args = [], $context = class WPGraphQL\AppContext { public $root_url = 'http://localhost:10028'; public $viewer = class WP_User { public $data = class stdClass { ... }; public $ID = 1; public $caps = [...]; public $cap_key = 'wp_capabilities'; public $roles = [...]; public $allcaps = [...]; public $filter = NULL; private $site_id = 1 }; public $type_registry = class WPGraphQL\Registry\TypeRegistry { protected $types = [...]; protected $type_loaders = [...]; protected $eager_type_map = [...]; protected $excluded_types = [...] }; public $request = NULL; public $config = ['registered_editor_blocks' => [...]]; public $currentConnection = NULL; public $connectionArgs = []; public $loaders = ['comment_author' => class WPGraphQL\Data\Loader\CommentAuthorLoader { ... }, 'comment' => class WPGraphQL\Data\Loader\CommentLoader { ... }, 'enqueued_script' => class WPGraphQL\Data\Loader\EnqueuedScriptLoader { ... }, 'enqueued_stylesheet' => class WPGraphQL\Data\Loader\EnqueuedStylesheetLoader { ... }, 'plugin' => class WPGraphQL\Data\Loader\PluginLoader { ... }, 'nav_menu_item' => class WPGraphQL\Data\Loader\PostObjectLoader { ... }, 'post' => class WPGraphQL\Data\Loader\PostObjectLoader { ... }, 'post_type' => class WPGraphQL\Data\Loader\PostTypeLoader { ... }, 'taxonomy' => class WPGraphQL\Data\Loader\TaxonomyLoader { ... }, 'term' => class WPGraphQL\Data\Loader\TermObjectLoader { ... }, 'theme' => class WPGraphQL\Data\Loader\ThemeLoader { ... }, 'user' => class WPGraphQL\Data\Loader\UserLoader { ... }, 'user_role' => class WPGraphQL\Data\Loader\UserRoleLoader { ... }]; public $node_resolver = class WPGraphQL\Data\NodeResolver { protected $wp = class WP { ... }; protected $context = ... }; public $connection_query_class = NULL }, $info = class GraphQL\Type\Definition\ResolveInfo { public $fieldDefinition = class GraphQL\Type\Definition\FieldDefinition { public $name = 'content'; public $args = [...]; public $resolveFn = class Closure { virtual $closure = "WPGraphQL\Utils\InstrumentSchema::WPGraphQL\Utils\{closure}", ... }; public $mapFn = NULL; public $description = 'The &quot;content&quot; field on the &quot;CoreCode&quot; block'; public $deprecationReason = NULL; public $astNode = NULL; public $config = [...]; private $type = class GraphQL\Type\Definition\StringType { ... }; private $complexityFn = 'GraphQL\\Type\\Definition\\FieldDefinition::defaultComplexity' }; public $fieldName = 'content'; public $returnType = class GraphQL\Type\Definition\StringType { public $name = 'String'; public $description = 'The `String` scalar type represents textual data, represented as UTF-8\ncharacter sequences. The String type is most often used by GraphQL to\nrepresent free-form human-readable text.'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = NULL }; public $fieldNodes = class ArrayObject { private $storage = [...] }; public $parentType = class WPGraphQL\Type\WPObjectType { public $name = 'CoreCodeAttributes'; public $description = 'Attributes of the %s Block Type'; public $astNode = NULL; public $config = [...]; public $extensionASTNodes = [...]; private ${GraphQL\Type\Definition\TypeWithFields}fields = [...]; public $resolveFieldFn = NULL; private ${GraphQL\Type\Definition\ObjectType}interfaces = [...]; private ${GraphQL\Type\Definition\ObjectType}interfaceMap = NULL; public $type_registry = class WPGraphQL\Registry\TypeRegistry { ... } }; public $path = [0 => 'post', 1 => 'contentBlocks', 2 => 1, 3 => 'attributes', 4 => 'content']; public $schema = class WPGraphQL\WPSchema { private ${GraphQL\Type\Schema}config = class GraphQL\Type\SchemaConfig { ... }; private ${GraphQL\Type\Schema}resolvedTypes = [...]; private ${GraphQL\Type\Schema}implementationsMap = [...]; private ${GraphQL\Type\Schema}fullyLoaded = TRUE; private ${GraphQL\Type\Schema}validationErrors = NULL; public $extensionASTNodes = [...]; public $config = class GraphQL\Type\SchemaConfig { ... }; public $filterable_config = class GraphQL\Type\SchemaConfig { ... } }; public $fragments = ['BlogInfoFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'NavigationMenuItemFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'FeaturedImageFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }, 'CoreCodeBlockFragment' => class GraphQL\Language\AST\FragmentDefinitionNode { ... }]; public $rootValue = NULL; public $operation = class GraphQL\Language\AST\OperationDefinitionNode { public $loc = class GraphQL\Language\AST\Location { ... }; public $kind = 'OperationDefinition'; public $name = class GraphQL\Language\AST\NameNode { ... }; public $operation = 'query'; public $variableDefinitions = class GraphQL\Language\AST\NodeList { ... }; public $directives = class GraphQL\Language\AST\NodeList { ... }; public $selectionSet = class GraphQL\Language\AST\SelectionSetNode { ... } }; public $variableValues = ['databaseId' => '5', 'headerLocation' => 'primary', 'footerLocation' => 'footer', 'asPreview' => TRUE]; private $queryPlan = NULL }) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql/src/Utils/InstrumentSchema.php:151
[23-Feb-2023 01:37:41 UTC] PHP  42. WPGraphQL\ContentBlocks\Blocks\Block->resolve_block_attributes($block = ['blockName' => 'core/code', 'attrs' => [], 'innerBlocks' => [], 'innerHTML' => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n', 'innerContent' => [0 => '\n<pre class="wp-block-code"><code>Code test\n</code></pre>\n'], 'nodeId' => '63f6c3659a1cd'], $attribute_name = 'content', $attribute_config = ['type' => 'string', 'source' => 'html', 'selector' => 'code']) /Users/teresa.gobble/Local Sites/merl741tutorialtesting/app/public/wp-content/plugins/wp-graphql-content-blocks-main/includes/Blocks/Block.php:162
